
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pyscanYY_create_buffer
#define yy_delete_buffer pyscanYY_delete_buffer
#define yy_flex_debug pyscanYY_flex_debug
#define yy_init_buffer pyscanYY_init_buffer
#define yy_flush_buffer pyscanYY_flush_buffer
#define yy_load_buffer_state pyscanYY_load_buffer_state
#define yy_switch_to_buffer pyscanYY_switch_to_buffer
#define yyin pyscanYYin
#define yyleng pyscanYYleng
#define yylex pyscanYYlex
#define yylineno pyscanYYlineno
#define yyout pyscanYYout
#define yyrestart pyscanYYrestart
#define yytext pyscanYYtext
#define yywrap pyscanYYwrap
#define yyalloc pyscanYYalloc
#define yyrealloc pyscanYYrealloc
#define yyfree pyscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pyscanYYrestart(pyscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t pyscanYYleng;

extern FILE *pyscanYYin, *pyscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pyscanYYrestart()), so that the user can continue scanning by
	 * just pointing pyscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pyscanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t pyscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pyscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh pyscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pyscanYYrestart (FILE *input_file  );
void pyscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pyscanYY_create_buffer (FILE *file,int size  );
void pyscanYY_delete_buffer (YY_BUFFER_STATE b  );
void pyscanYY_flush_buffer (YY_BUFFER_STATE b  );
void pyscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pyscanYYpop_buffer_state (void );

static void pyscanYYensure_buffer_stack (void );
static void pyscanYY_load_buffer_state (void );
static void pyscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pyscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pyscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pyscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pyscanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *pyscanYYalloc (yy_size_t  );
void *pyscanYYrealloc (void *,yy_size_t  );
void pyscanYYfree (void *  );

#define yy_new_buffer pyscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pyscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pyscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pyscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pyscanYYin = (FILE *) 0, *pyscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int pyscanYYlineno;

int pyscanYYlineno = 1;

extern char *pyscanYYtext;
#define yytext_ptr pyscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pyscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pyscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 149
#define YY_END_OF_BUFFER 150
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[742] =
    {   0,
    16479,16479,   97,   97,   24,   24,   29,   29,   33,   33,
      150,  148,  149,  147,  149,   20,  148,  149,   16,  147,
      149,   12,   20,  148,  149,   20,  148,  149,   11,   20,
      148,  149,   14,   20,  148,  149,   14,   20,  148,  149,
       14,   20,  148,  149,   14,   20,  148,  149,   14,   20,
      148,  149,   15,   20,  148,  149,   14,   20,  148,  149,
    16393,16394,   14,   20,  148,  149,16393,16394,   14,   20,
      148,  149,16393,16394,   14,   20,  148,  149,16393,16394,
       14,   20,  148,  149,16393,16394,   44,   45,  148,  149,
       42,   44,  147,  149,   41,   45,  148,  149,   45,  148,

      149,   40,   45,  148,  149,   45,  148,  149,   43,   45,
      148,  149,   43,   45,  148,  149,  122,  124,  148,  149,
      124,  148,  149,  123,  147,  149,  124,  148,  149,  124,
      148,  149,  121,  124,  148,  149,  127,  129,  148,  149,
      128,  147,  149,  129,  148,  149,  127,  129,  148,  149,
      125,  129,  148,  149,  148,  149,   62,  148,  149,   61,
      148,  149,   60,  148,  149,   69,  148,  149,   63,  148,
      149,   69,  148,  149,   66,  148,  149,   63,   69,  148,
      149,   67,  148,  149,   65,   69,  148,  149,   64,   69,
      148,  149,   52,   56,  148,  149,   56,  148,  149,   55,

      147,  149,16430,   51,   56,  148,  149,   54,   56,  148,
      149,   50,   56,  148,  149,   49,   56,  148,  149,   54,
       56,  148,  149,   73,  148,  149,   74,  147,  149,   70,
       73,  148,  149,   72,   73,  148,  149,   71,   73,  148,
      149,   87,  148,  149,   88,  148,  149,   88,  148,  149,
       89,  148,  149,   90,  148,  149,  148,  149,   91,  147,
      149, 8287,  148,  149,  148,  149,  148,  149,   94,  148,
      149,   81,   84,  148,  149,   84,  148,  149,   82,  147,
      149,   80,   84,  148,  149,   84,  148,  149,   79,   84,
      148,  149,   78,   84,  148,  149,  109,  148,  149,   97,

      109,  148,  149,  110,  147,  149,  101,  109,  148,  149,
      107,  109,  148,  149,  100,  109,  148,  149,  104,  109,
      148,  149,   98,  109,  148,  149,   98,  109,  148,  149,
       96,  109,  148,  149,  108,  109,  148,  149,  108,  109,
      148,  149,  108,  109,  148,  149,  105,  109,  148,  149,
      108,  109,  148,  149,  106,  109,  148,  149,  118,  148,
      149,  117,  147,  149,  115,  148,  149,  116,  147,  149,
      113,  115,  148,  149,  111,  115,  148,  149,  112,  115,
      148,  149,  114,  115,  148,  149,  134,  135,  148,  149,
      135,  148,  149,  133,  135,  148,  149,  135,  148,  149,

      140,  141,  148,  149,  139,  141,  148,  149,  141,  148,
      149,  141,  148,  149,  144,  146,  148,  149,  144,  145,
      147,  149,  144,  146,  148,  149,  144,  146,  148,  149,
      146,  148,  149,   25,  148,  149,   24,   25,  148,  149,
       23,  147,  149,   21,   25,  148,  149,   21,   25,  148,
      149,   30,  148,  149,   29,   30,  148,  149,   28,  147,
      149,   26,   30,  148,  149,   27,   30,  148,  149,   34,
      148,  149,   33,   34,  148,  149,   32,  147,  149,   31,
       34,  148,  149,   16,   13,   14,   14,   14,   14,   14,
       15,16393,16394,16393,16394,16393,16394,16393,16394,16393,

    16394,   14,16393,16394,   14,16393,16394,   14,16393,16394,
       14,16393,16394,   14,16393,16394,   44,   39,   43,   43,
      122,  121,  127,  126,  127,  125,  125,   62,   61,   60,
       63,   68,   67,   64,   52,16430,   54,   54,   49,   48,
       53,   54,   87,   88,   90,   91,   94,   81,   83,   78,
       77,   97,  107,   98,   98,   98,  108,  101,  100,  108,
      114,  134,  131,  131,  130,  140,  137,  137,  136,  144,
      144,  144,   24,   21,   21,   29,   27,   33,   31,   17,
       13,   19,   18,   14,   14,   14,   14,16393,16394,16393,
    16394,16393,16394,16393,16394,16393,16394, 8202, 8202, 8202,

       14,16393,16394,   14,16393,16394,   14,16393,16394,   14,
    16393,16394,   36,   39,   38,   37,   43,  119,  120,   68,
       47, 8238,   57,   54,   59,   59,   58,   53,   54,   90,
       92,   93,   75,   85,   83,   86,  102,  103,   99,   98,
       98,  132,  138,  142,  143,   21,   21,   31,   17,   18,
       14,    2,   14,   14,16393,16394,16393,16394,16393,16394,
    16393,16394,   14,16393,16394,    1,    2,   14,16393,16394,
       14,16393,16394,   36,   37,   43,  119,  120,   57,   58,
       90,   92,   93,   76,   85,   86,  102,  103,   99,   98,
      142,  143,   21,   21,   31,   14,    6,   14,16393,16394,

        1,16393,16394,16393,16394,   14,16393,16394,    5,    6,
       14,16393,16394,   99,   21,    4,   14,16393,16394,    5,
    16393,16394,    3,    4,   14,16393,16394,16419,   21,   22,
        8,    3,16393,16394,    7,    8,16419, 8227,   22,    7,
     8201
    } ;

static yyconst flex_int16_t yy_accept[435] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    8,    9,   10,   11,   12,   14,   16,
       19,   22,   26,   29,   33,   37,   41,   45,   49,   53,
       57,   63,   69,   75,   81,   87,   91,   95,   99,  102,
      106,  109,  113,  117,  121,  124,  127,  130,  133,  137,
      141,  144,  147,  151,  155,  157,  160,  163,  166,  169,
      172,  175,  178,  182,  185,  189,  193,  197,  200,  204,

      208,  212,  216,  220,  224,  227,  230,  234,  238,  242,
      245,  248,  251,  254,  257,  259,  262,  265,  267,  269,
      272,  276,  279,  282,  286,  289,  293,  297,  300,  304,
      307,  311,  315,  319,  323,  327,  331,  335,  339,  343,
      347,  351,  355,  359,  362,  365,  368,  371,  375,  379,
      383,  387,  391,  394,  398,  401,  405,  409,  412,  415,
      419,  423,  427,  431,  434,  437,  441,  444,  448,  452,
      455,  459,  462,  466,  470,  473,  477,  480,  484,  485,
      485,  486,  486,  486,  487,  488,  489,  490,  491,  492,
      494,  496,  498,  500,  502,  502,  505,  505,  508,  511,

      514,  517,  518,  518,  519,  519,  519,  520,  521,  522,
      522,  522,  523,  524,  524,  525,  526,  527,  528,  528,
      529,  530,  531,  532,  533,  534,  535,  536,  537,  537,
      537,  537,  538,  539,  539,  540,  541,  543,  544,  545,
      545,  546,  546,  547,  547,  547,  548,  549,  549,  549,
      549,  550,  550,  551,  552,  553,  553,  554,  554,  554,
      555,  556,  557,  557,  558,  559,  560,  561,  562,  563,
      563,  564,  565,  566,  567,  567,  568,  569,  570,  571,
      571,  572,  573,  574,  574,  574,  575,  576,  577,  578,
      579,  579,  579,  580,  581,  582,  583,  584,  585,  586,

      587,  588,  590,  592,  594,  596,  598,  599,  600,  601,
      604,  607,  610,  613,  614,  615,  616,  617,  618,  619,
      620,  621,  622,  623,  623,  624,  626,  627,  628,  630,
      631,  632,  633,  633,  634,  634,  635,  636,  637,  638,
      639,  640,  641,  642,  643,  643,  644,  644,  645,  646,
      646,  647,  648,  648,  649,  650,  651,  652,  653,  654,
      655,  657,  659,  661,  663,  663,  663,  663,  666,  668,
      671,  674,  675,  676,  677,  678,  679,  680,  681,  682,
      683,  684,  685,  686,  687,  688,  689,  689,  690,  691,
      692,  693,  694,  695,  696,  697,  698,  699,  701,  702,

      704,  706,  706,  709,  711,  714,  714,  714,  715,  716,
      717,  718,  720,  721,  723,  723,  725,  728,  729,  731,
      732,  733,  735,  735,  737,  737,  738,  739,  740,  741,
      741,  741,  742,  742
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   12,   14,    7,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    7,    7,
       19,    7,    1,    1,   20,   20,   20,   20,   21,   20,
       22,   22,   22,   23,   22,   24,   22,   22,   22,   22,
       22,   25,   22,   22,   26,   22,   22,   27,   22,   22,
       28,   29,   30,    1,   31,    7,   32,   20,   33,   34,

       35,   36,   22,   22,   37,   23,   22,   38,   39,   22,
       40,   41,   22,   42,   43,   44,   45,   22,   22,   27,
       46,   22,   47,    7,   30,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[48] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    1,    1,
        1,    1,    1,    6,    7,    7,    7,    1,    8,    9,
        9,   10,   10,   10,   10,   10,   10,    1,   11,    1,
       10,    9,    9,    9,    9,    9,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,    1
    } ;

static yyconst flex_int16_t yy_base[499] =
    {   0,
     1535, 1527,    0,   47,   94,    0, 1520, 1515,  140,  144,
      147,  152,  158,    0,  205,    0,  251,  258,  264,  266,
      279,    0,  326,    0,  373,  381,  385,  392,  400,    0,
     1514, 1513,  447,    0,  492,  493,  499,  500,  506,  507,
      536,    0,  583,    0,  630,    0, 1515, 1566, 1566, 1566,
     1511, 1508, 1503, 1500,    0, 1469, 1471, 1463, 1465,  497,
      377,  676,  677,  678,  679,    0,    0, 1496, 1485, 1478,
     1566,    0, 1449,    0, 1566, 1566, 1478, 1474, 1479,    0,
      256, 1566,  511, 1463,  514, 1566, 1566,    0, 1566, 1451,
        0, 1566, 1566, 1449, 1566,    0,    0, 1566,  518, 1445,

     1443, 1440,  154, 1432, 1566, 1566, 1566, 1566, 1566,    0,
     1427, 1566, 1566, 1402,  268, 1566, 1566, 1405, 1390,  516,
        0, 1566, 1391, 1391,    0, 1387,  523, 1566, 1385, 1566,
     1369,    0, 1361, 1566,  707,  668, 1566,    0,  372,  685,
     1566,  694, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
        0,    0, 1361, 1566,  684,    0, 1566, 1357,  686, 1335,
     1331, 1351, 1345,  700, 1566, 1350, 1566,  699,  702, 1566,
     1349, 1566, 1566,    0, 1566, 1340, 1566,  715, 1318, 1315,
        0,    0, 1292,    0, 1267, 1258, 1250, 1239,  713,  692,
      723,  724,  733,  735,  736,  737,  707,  738,  749,  758,

      760,    0, 1266,    0,    0, 1261,    0, 1226,    0, 1258,
     1254, 1252,    0,  726, 1566,  761, 1247, 1246,  762, 1566,
     1566,    0, 1249,    0, 1245,    0,    0,  763, 1236, 1230,
     1216,    0,  770, 1208,  779, 1566,    0,    0, 1213,    0,
     1200,  781, 1566, 1207, 1203,  784,    0, 1198, 1201, 1197,
        0, 1193,  786, 1566, 1198, 1191,    0, 1180,  775,  779,
      790, 1566,    0,    0, 1566, 1566,  792,    0,    0, 1181,
     1566,  806, 1566,    0, 1173, 1566,  808, 1566, 1144,  813,
     1166, 1153, 1158,  764, 1157,  810,  813, 1153,    0, 1143,
      817, 1139,  818, 1136,    0, 1566, 1133, 1093, 1133, 1088,

     1086,  820,  821,  823,  824,  827, 1566,  731, 1083,  828,
      831,  833,  836, 1120,    0, 1566, 1116, 1083, 1114, 1113,
        0, 1566, 1114, 1113, 1107,    0, 1566, 1097,    0,  962,
      971,  970,    0,  971,  970,  967,    0,  966,  965,  964,
      846, 1566,  361, 1566,  834, 1566,  842,  960,  947,  941,
      846,  856,  920,  863, 1566, 1566,  869,  906,  885,  837,
      832,  847,  854,  855,  839,  836,  759,  880,  881,  882,
      883, 1566, 1566,  744, 1566, 1566, 1566, 1566,  739, 1566,
     1566, 1566, 1566, 1566, 1566, 1566,  874, 1566, 1566, 1566,
     1566,  890,  892,  895,  742,  705,  656,  886,  896,  901,

      905,  486,  908,  909,  911,    0,  901,  916,  912,  504,
      390,  917,  919,  933,  243,  935,  938,  939,  946,  266,
      940,  942,  213,  943,  944,  947, 1566,  951,  948,  107,
       98, 1566, 1566,  977,  988,  999, 1010, 1021, 1032, 1043,
     1054, 1065, 1076, 1087, 1098, 1103, 1112, 1121, 1131, 1142,
     1147, 1157, 1168, 1173, 1183, 1188, 1198, 1208, 1218, 1229,
     1234, 1239, 1249, 1256, 1266, 1277, 1282, 1286, 1296, 1306,
     1317, 1327, 1338, 1348, 1352, 1361, 1371, 1382, 1392, 1402,
     1413, 1424, 1435, 1445, 1455, 1466, 1469, 1478, 1488, 1493,
     1501, 1510, 1515, 1525, 1535, 1544, 1546, 1555

    } ;

static yyconst flex_int16_t yy_def[499] =
    {   0,
      434,  434,  433,  433,  433,    5,  434,  434,  435,  435,
      436,  436,  433,   13,  433,   15,  437,  437,  438,  438,
      433,   21,  433,   23,  439,  439,  440,  440,  433,   29,
      441,  441,  433,   33,  442,  442,  443,  443,  444,  444,
      433,   41,  433,   43,  433,   45,  433,  433,  433,  433,
      433,  433,  445,  433,  446,  446,  446,  446,  446,  447,
      448,  448,  448,  448,  448,  449,  449,  433,  450,  433,
      433,  451,  451,  452,  433,  433,  433,  433,  433,  453,
      433,  433,  453,  433,  433,  433,  433,  454,  433,  433,
      455,  433,  433,  433,  433,  456,  457,  433,  458,  433,

      459,  433,  433,  460,  433,  433,  433,  433,  433,  461,
      433,  433,  433,  462,  433,  433,  433,  433,  433,  433,
      463,  433,  464,  433,  465,  433,  433,  433,  433,  433,
      433,  466,  433,  433,  433,  433,  433,  467,  467,  467,
      433,  467,  433,  433,  433,  433,  433,  433,  433,  433,
      468,  469,  433,  433,  470,  471,  433,  433,  472,  473,
      473,  433,  433,  473,  433,  433,  433,  474,  474,  433,
      433,  433,  433,  475,  433,  433,  433,  476,  433,  433,
      477,  478,  433,  446,  446,  446,  446,  446,  447,  479,
      479,  479,  479,  479,  433,  448,  480,  448,  448,  448,

      448,  449,  433,  481,  482,  433,  451,  451,  452,  433,
      433,  433,  453,  433,  433,  453,  433,  433,  433,  433,
      433,  454,  433,  483,  433,  456,  457,  458,  433,  484,
      433,  459,  485,  433,  433,  433,  486,  461,  433,  487,
      462,  433,  433,  433,  433,  433,  463,  433,  488,  433,
      489,  433,  433,  433,  433,  433,  466,  433,  433,  433,
      433,  433,  490,  467,  433,  433,  467,  468,  469,  433,
      433,  433,  433,  471,  433,  433,  433,  433,  473,  473,
      433,  433,  433,  433,  491,  474,  474,  433,  475,  433,
      433,  492,  476,  433,  477,  433,  433,  446,  446,  446,

      446,  479,  479,  479,  479,  479,  433,  433,  433,  448,
      448,  448,  448,  433,  481,  433,  433,  451,  433,  433,
      483,  433,  433,  484,  433,  459,  433,  433,  486,  493,
      433,  433,  494,  433,  488,  433,  489,  433,  433,  433,
      433,  433,  490,  433,  433,  433,  433,  433,  433,  491,
      495,  474,  492,  496,  433,  433,  446,  433,  446,  446,
      479,  479,  479,  479,  433,  433,  433,  448,  433,  448,
      448,  433,  433,  451,  433,  433,  433,  433,  493,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  495,  474,  496,  446,  433,  446,  479,  433,  479,

      479,  433,  448,  433,  448,  497,  433,  433,  474,  433,
      446,  479,  433,  479,  433,  433,  448,  498,  474,  433,
      433,  479,  433,  433,  433,  498,  433,  433,  433,  433,
      433,  433,    0,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433

    } ;

static yyconst flex_int16_t yy_nxt[1614] =
    {   0,
       50,   50,   51,   50,   52,   53,   50,   54,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   55,
       55,   55,   55,   55,   55,   55,   55,   50,   50,   50,
       55,   55,   56,   57,   55,   58,   59,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   50,   50,   60,   51,
       50,   52,   53,   50,   54,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   61,   61,   61,   61,
       61,   61,   61,   61,   50,   50,   50,   61,   61,   62,
       63,   61,   64,   65,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   50,   66,   66,   67,   66,   68,   69,

       66,   70,   66,   66,   66,   66,   66,   71,   66,   66,
       66,   66,   66,   72,   72,   72,   72,   72,   72,   72,
       72,   66,   66,   66,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   73,   72,   72,   72,
       66,   75,   76,  432,   77,   79,   76,   78,   77,   81,
      431,   78,   82,   83,   81,  235,  236,   84,   48,   85,
       49,   48,   48,   48,   48,   48,   86,   48,   48,   48,
       48,   48,   48,   48,   48,   87,   48,   88,   88,   88,
       88,   88,   88,   88,   88,   48,   48,   48,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   88,   48,   89,   90,   49,   89,   89,
       91,   89,   89,   48,   92,   89,   89,   93,   89,   89,
       89,   89,   94,   95,   96,   96,   96,   96,   96,   96,
       96,   96,   89,   89,   89,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   89,   98,   99,  430,  100,  101,  214,  102,  103,
       99,  215,  100,  104,   98,  102,  106,  420,  106,  242,
      243,   98,  107,  108,  107,  108,  109,  423,  109,   48,
       48,   49,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,  110,  110,

      110,  110,  110,  110,  110,  110,   48,   48,   48,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,   48,   48,  111,   49,   48,
       48,   48,   48,   48,  112,  112,   48,   48,  112,   48,
       48,   48,   48,  113,   48,  114,  114,  114,  114,  114,
      114,  114,  114,   48,   48,   48,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,   48,   48,  115,  116,  265,  118,  195,  266,
      119,   48,  120,  116,  389,  118,  122,  123,  119,  124,
      125,  420,  126,  127,  123,  197,  124,  125,  389,  126,

      128,  129,  130,  128,  131,  132,  128,  133,  134,  128,
      128,  128,  128,  128,  135,  136,  136,  128,  137,  138,
      138,  138,  138,  138,  139,  140,  138,  141,  128,  128,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  139,  138,  138,  142,  138,  143,  146,  146,  147,
      146,  148,  146,  146,  146,  149,  150,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  151,  151,  151,  151,
      151,  151,  151,  151,  149,  146,  150,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  149,   49,   49,  153,  153,  189,  154,

      154,   49,   49,  157,  157,  410,  158,  158,  161,  161,
      162,  162,  216,  163,  163,  219,  217,  246,  243,  228,
      155,  155,  220,  229,  253,  254,  415,  159,  159,  191,
      192,  221,  193,  194,  164,  164,  165,  166,  167,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  168,  168,  168,  168,  168,
      168,  168,  168,  165,  165,  165,  168,  168,  168,  168,
      168,  168,  169,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  165,  170,  171,  172,  170,  170,  170,  170,
      170,  170,  170,  173,  170,  170,  170,  170,  170,  170,

      170,  170,  174,  174,  174,  174,  174,  174,  174,  174,
      170,  170,  170,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  170,
      175,  176,  177,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  178,
      178,  178,  178,  178,  178,  178,  178,  175,  175,  175,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  175,  195,  195,  195,
      195,  259,  261,  261,  261,  272,  273,  277,  278,  265,
      262,  262,  266,  195,  197,  197,  197,  197,  265,  411,

      284,  266,  433,  284,  279,  262,  396,  279,  308,  267,
      197,  199,  285,  198,  189,  285,  291,  201,  267,  200,
      259,  260,  260,  261,  195,  195,  267,  214,  292,  262,
      262,  215,  365,  263,  195,  267,  195,  195,  195,  195,
      287,  197,  197,  410,  262,  191,  192,  309,  193,  194,
      195,  197,  240,  197,  197,  197,  197,  406,  304,  195,
      303,  195,  216,  219,  228,  284,  217,  197,  229,  310,
      220,  366,  327,  306,  305,  232,  197,  285,  197,  221,
      235,  236,  242,  243,  311,  246,  243,  253,  254,  341,
      341,  341,  259,  260,  260,  261,  265,  312,  402,  266,

      313,  262,  342,  259,  261,  261,  261,  345,  273,  347,
      278,  284,  262,  262,  284,  433,  342,  279,  291,  291,
      279,  195,  195,  285,  195,  195,  285,  262,  195,  195,
      292,  292,  369,  195,  195,  345,  273,  195,  197,  197,
      365,  197,  197,  347,  278,  197,  197,  284,  399,  197,
      197,  197,  361,  352,  197,  195,  195,  284,  362,  285,
      341,  341,  341,  363,  291,  197,  387,  364,  388,  285,
      368,  370,  197,  197,  398,  371,  292,  367,  397,  366,
      387,  195,  369,  404,  195,  407,  396,  195,  408,  408,
      408,  284,  400,  284,  401,  393,  291,  399,  197,  197,

      197,  197,  413,  285,  197,  285,  195,  358,  292,  416,
      404,  395,  195,  284,  197,  408,  408,  408,  421,  197,
      413,  353,  403,  197,  405,  285,  197,  197,  412,  197,
      408,  408,  408,  409,  195,  197,  416,  197,  388,  424,
      425,  421,  350,  429,  424,  425,  414,  428,  425,  429,
      391,  197,  428,  197,  417,  419,  197,  427,  197,  285,
      197,  197,  427,  390,  285,  427,  197,  386,  385,  384,
      383,  334,  334,  381,  380,  240,  422,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  181,  181,

      378,  181,  181,  181,  181,  181,  181,  181,  181,  184,
      377,  184,  184,  190,  323,  323,  376,  375,  374,  373,
      190,  190,  196,  372,  367,  360,  359,  196,  196,  196,
      196,  202,  202,  202,  358,  357,  356,  202,  202,  355,
      353,  202,  204,  204,  290,  204,  204,  204,  204,  204,
      204,  204,  204,  207,  288,  207,  207,  209,  350,  283,
      349,  209,  209,  209,  209,  209,  209,  209,  213,  213,
      348,  213,  280,  213,  213,  213,  213,  213,  213,  222,
      346,  222,  222,  224,  224,  344,  224,  340,  224,  224,
      224,  224,  224,  224,  226,  339,  226,  226,  227,  255,

      338,  336,  334,  333,  227,  227,  227,  227,  227,  230,
      332,  331,  230,  240,  239,  328,  230,  230,  232,  232,
      325,  232,  232,  232,  232,  232,  232,  232,  232,  237,
      237,  323,  237,  237,  237,  237,  237,  237,  237,  237,
      238,  322,  238,  238,  241,  241,  225,  241,  241,  247,
      223,  218,  218,  212,  247,  247,  247,  247,  247,  247,
      249,  320,  319,  318,  249,  249,  251,  251,  317,  251,
      314,  251,  251,  251,  251,  251,  251,  257,  257,  301,
      257,  257,  257,  257,  257,  257,  257,  257,  264,  300,
      264,  264,  268,  299,  268,  268,  269,  269,  298,  297,

      269,  269,  269,  269,  269,  269,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  274,  274,  294,
      179,  274,  274,  274,  274,  274,  274,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  279,  279,
      279,  290,  279,  279,  279,  279,  279,  279,  279,  286,
      288,  283,  282,  286,  286,  281,  286,  286,  289,  280,
      289,  289,  293,  280,  275,  270,  293,  293,  258,  293,
      293,  295,  295,  256,  295,  295,  295,  295,  295,  295,
      295,  295,  296,  296,  296,  296,  255,  296,  296,  296,
      296,  296,  296,  302,  252,  250,  248,  245,  302,  302,

      302,  302,  307,  307,  307,  307,  307,  307,  307,  244,
      307,  307,  307,  315,  315,  240,  315,  315,  315,  315,
      315,  315,  315,  315,  316,  316,  316,  316,  239,  316,
      316,  316,  316,  316,  316,  321,  321,  233,  321,  321,
      321,  321,  321,  321,  321,  321,  324,  234,  233,  231,
      225,  324,  223,  324,  324,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  329,  329,  218,  329,
      329,  329,  329,  329,  329,  329,  329,  330,  330,  335,
      212,  211,  210,  208,  335,  206,  335,  335,  337,  337,
      205,  337,  337,  337,  337,  337,  337,  337,  337,  343,

      203,  343,  351,  188,  187,  186,  185,  183,  182,  351,
      351,  354,  180,  179,  433,  145,  145,   49,  354,  354,
      379,  379,   49,  379,  379,  382,  382,  382,  382,   49,
      382,  382,  382,  382,  382,  382,  392,   49,  433,  433,
      392,  392,  433,  392,  392,  394,  433,  433,  433,  394,
      394,  433,  394,  394,  418,  418,  426,  433,  433,  433,
      433,  426,  426,  426,  426,   47,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433
    } ;

static yyconst flex_int16_t yy_chk[1614] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    9,    9,  431,    9,   10,   10,    9,   10,   11,
      430,   10,   11,   12,   12,  103,  103,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   17,   17,  423,   17,   17,   81,   17,   18,
       18,   81,   18,   18,   17,   18,   19,  420,   20,  115,
      115,   18,   19,   19,   20,   20,   19,  415,   20,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   25,   25,   25,  139,   25,   61,  139,
       25,   26,   26,   26,  343,   26,   27,   27,   26,   27,
       27,  411,   27,   28,   28,   61,   28,   28,  343,   28,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   35,   36,   35,   36,   60,   35,

       36,   37,   38,   37,   38,  410,   37,   38,   39,   40,
       39,   40,   83,   39,   40,   85,   83,  120,  120,   99,
       35,   36,   85,   99,  127,  127,  402,   37,   38,   60,
       60,   85,   60,   60,   39,   40,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   62,   63,   64,
       65,  136,  136,  136,  136,  155,  155,  159,  159,  140,
      136,  136,  140,  190,   62,   63,   64,   65,  142,  397,

      168,  142,  164,  169,  164,  136,  396,  164,  197,  140,
      190,   63,  168,   62,  189,  169,  178,   65,  142,   64,
      135,  135,  135,  135,  191,  192,  140,  214,  178,  135,
      135,  214,  308,  135,  193,  142,  194,  195,  196,  198,
      169,  191,  192,  395,  135,  189,  189,  197,  189,  189,
      199,  193,  379,  194,  195,  196,  198,  374,  192,  200,
      191,  201,  216,  219,  228,  284,  216,  199,  228,  198,
      219,  308,  233,  194,  193,  233,  200,  284,  201,  219,
      235,  235,  242,  242,  199,  246,  246,  253,  253,  259,
      259,  259,  260,  260,  260,  260,  267,  200,  367,  267,

      201,  260,  260,  261,  261,  261,  261,  272,  272,  277,
      277,  286,  261,  261,  287,  280,  260,  280,  291,  293,
      280,  302,  303,  286,  304,  305,  287,  261,  306,  310,
      291,  293,  311,  361,  312,  345,  345,  313,  302,  303,
      365,  304,  305,  347,  347,  306,  310,  351,  362,  311,
      361,  312,  303,  287,  313,  363,  364,  352,  304,  351,
      341,  341,  341,  305,  354,  362,  341,  306,  341,  352,
      310,  312,  363,  364,  361,  313,  354,  366,  360,  365,
      341,  368,  369,  370,  371,  387,  359,  398,  387,  387,
      387,  392,  363,  393,  364,  352,  394,  399,  368,  369,

      370,  371,  400,  392,  398,  393,  401,  358,  394,  403,
      404,  357,  405,  409,  399,  407,  407,  407,  412,  400,
      413,  353,  368,  401,  371,  409,  403,  404,  398,  405,
      408,  408,  408,  393,  414,  412,  416,  413,  408,  417,
      418,  421,  350,  422,  424,  425,  401,  419,  426,  429,
      349,  414,  428,  416,  405,  409,  417,  418,  421,  419,
      422,  424,  425,  348,  428,  426,  429,  340,  339,  338,
      336,  335,  334,  332,  331,  330,  414,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  436,

      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  445,  445,

      328,  445,  445,  445,  445,  445,  445,  445,  445,  446,
      325,  446,  446,  447,  324,  323,  320,  319,  318,  317,
      447,  447,  448,  314,  309,  301,  300,  448,  448,  448,
      448,  449,  449,  449,  299,  298,  297,  449,  449,  294,
      292,  449,  450,  450,  290,  450,  450,  450,  450,  450,
      450,  450,  450,  451,  288,  451,  451,  452,  285,  283,
      282,  452,  452,  452,  452,  452,  452,  452,  453,  453,
      281,  453,  279,  453,  453,  453,  453,  453,  453,  454,
      275,  454,  454,  455,  455,  270,  455,  258,  455,  455,
      455,  455,  455,  455,  456,  256,  456,  456,  457,  255,

      252,  250,  249,  248,  457,  457,  457,  457,  457,  458,
      245,  244,  458,  241,  239,  234,  458,  458,  459,  459,
      231,  459,  459,  459,  459,  459,  459,  459,  459,  460,
      460,  230,  460,  460,  460,  460,  460,  460,  460,  460,
      461,  229,  461,  461,  462,  462,  225,  462,  462,  463,
      223,  218,  217,  212,  463,  463,  463,  463,  463,  463,
      464,  211,  210,  208,  464,  464,  465,  465,  206,  465,
      203,  465,  465,  465,  465,  465,  465,  466,  466,  188,
      466,  466,  466,  466,  466,  466,  466,  466,  467,  187,
      467,  467,  468,  186,  468,  468,  469,  469,  185,  183,

      469,  469,  469,  469,  469,  469,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  471,  471,  180,
      179,  471,  471,  471,  471,  471,  471,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  473,  473,
      473,  176,  473,  473,  473,  473,  473,  473,  473,  474,
      171,  166,  163,  474,  474,  162,  474,  474,  475,  161,
      475,  475,  476,  160,  158,  153,  476,  476,  133,  476,
      476,  477,  477,  131,  477,  477,  477,  477,  477,  477,
      477,  477,  478,  478,  478,  478,  129,  478,  478,  478,
      478,  478,  478,  479,  126,  124,  123,  119,  479,  479,

      479,  479,  480,  480,  480,  480,  480,  480,  480,  118,
      480,  480,  480,  481,  481,  114,  481,  481,  481,  481,
      481,  481,  481,  481,  482,  482,  482,  482,  111,  482,
      482,  482,  482,  482,  482,  483,  483,  104,  483,  483,
      483,  483,  483,  483,  483,  483,  484,  102,  101,  100,
       94,  484,   90,  484,  484,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  486,  486,   84,  486,
      486,  486,  486,  486,  486,  486,  486,  487,  487,  488,
       79,   78,   77,   73,  488,   70,  488,  488,  489,  489,
       69,  489,  489,  489,  489,  489,  489,  489,  489,  490,

       68,  490,  491,   59,   58,   57,   56,   54,   53,  491,
      491,  492,   52,   51,   47,   32,   31,    8,  492,  492,
      493,  493,    7,  493,  493,  494,  494,  494,  494,    2,
      494,  494,  494,  494,  494,  494,  495,    1,    0,    0,
      495,  495,    0,  495,  495,  496,    0,    0,    0,  496,
      496,    0,  496,  496,  497,  497,  498,    0,    0,    0,
        0,  498,  498,  498,  498,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433
    } ;

extern int pyscanYY_flex_debug;
int pyscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pyscanYYtext;
#line 1 "pyscanner.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2011 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */
#line 26 "pyscanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
#include <qfileinfo.h>
  
#include "pyscanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "pycode.h"

#define YY_NEVER_INTERACTIVE 1

/* -----------------------------------------------------------------
 *
 *	statics
 */

  
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;

static Protection	protection;

static Entry*		current_root = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		bodyEntry    = 0 ;
static int		yyLineNr     = 1 ;
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static Specifier 	virt;

static int              docBlockContext;
static QCString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockJavaStyle;
static bool             docBrief;
static bool             docBlockSpecial;

static bool             g_doubleQuote;
static bool             g_specialBlock;
static int              g_stringContext;
static QGString *       g_copyString;
static int              g_indent = 0;
static int              g_curIndent = 0;

static QDict<QCString>  g_packageNameCache(257);
static QCString         g_packageScope;

static char             g_atomStart;
static char             g_atomEnd;
static int              g_atomCount;

//static bool             g_insideConstructor;

static QCString         g_moduleScope;
static QCString         g_packageName;

static bool             g_hideClassDocs;

static QCString         g_defVal;
static int              g_braceCount;

static bool             g_lexInit = FALSE;
static bool             g_packageCommentAllowed;

//-----------------------------------------------------------------------------


static void initParser()
{
  protection = Public;
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  previous = 0;
  g_packageCommentAllowed = TRUE;
  g_packageNameCache.setAutoDelete(TRUE);
}

static void initEntry()
{
  //current->python = TRUE;
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->lang       = SrcLangExt_Python; 
  current->setParent(current_root);
  initGroupInfo(current);
}

static void newEntry()
{
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry ;
  initEntry();
}

static void newVariable()
{
  if (!current->name.isEmpty() && current->name.at(0)=='_') // mark as private
  {
    current->protection=Private;
  }
  if (current_root->section&Entry::COMPOUND_MASK) // mark as class variable
  {
    current->stat = TRUE;
  }
  newEntry();
}

static void newFunction()
{
  if (current->name.left(2)=="__" && current->name.right(2)=="__")
  {
    // special method name, see
    // http://docs.python.org/ref/specialnames.html
    current->protection=Public;
  }
  else if (current->name.at(0)=='_')
  {
    current->protection=Private;
  }
}

static inline int computeIndent(const char *s)
{
  int col=0;
  static int tabSize=Config_getInt("TAB_SIZE");
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize);
    else break;
  }
  return col;
}

static QCString findPackageScopeFromPath(const QCString &path)
{
  QCString *pScope = g_packageNameCache.find(path);
  if (pScope)
  {
    return *pScope;
  }
  QFileInfo pf(path+"/__init__.py"); // found package initialization file
  if (pf.exists())
  {
    int i=path.findRev('/');
    if (i!=-1)
    {
      QCString scope = findPackageScopeFromPath(path.left(i));
      if (!scope.isEmpty())
      {
	scope+="::";
      }
      scope+=path.mid(i+1);
      g_packageNameCache.insert(path,new QCString(scope));
      return scope;
    }
  }
  return "";
}
  
static QCString findPackageScope(const char *fileName)
{
  if (fileName==0) return "";
  QFileInfo fi(fileName);
  return findPackageScopeFromPath(fi.dirPath(TRUE).data());
}

//-----------------------------------------------------------------------------

static void lineCount()
{
  for( const char* c = pyscanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}

#if 0
// Appends the current-name to current-type;
// Destroys current-name.
// Destroys current->args and current->argList
static void addType( Entry* current )
{
    uint tl=current->type.length();
    if ( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if ( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}

static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}
#endif
//-----------------------------------------------------------------

//-----------------------------------------------------------------
static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}

/*
static void appendDocBlock() {
  previous = current;
  current_root->addSubEntry(current);
  current = new Entry;
  initEntry();
}
*/

static void handleCommentBlock(const QCString &doc,bool brief)
{
  //printf("handleCommentBlock(doc=[%s] brief=%d docBlockInBody=%d docBlockJavaStyle=%d\n",
  //    doc.data(),brief,docBlockInBody,docBlockJavaStyle);

  // TODO: Fix me
  docBlockInBody=FALSE;
  
  if (docBlockInBody && previous && !previous->doc.isEmpty())
  {
    previous->doc=previous->doc.stripWhiteSpace()+"\n\n";
  }

  int position = 0;
  bool needsEntry;
  int lineNr = brief ? current->briefLine : current->docLine;
  while (parseCommentBlock(
	g_thisParser,
	(docBlockInBody && previous) ? previous : current,
	doc,     // text
	yyFileName, // file
	lineNr,
	docBlockInBody ? FALSE : brief, 
    docBlockJavaStyle, // javadoc style // or FALSE,
	docBlockInBody,
	protection,
        position,
        needsEntry)
     ) // need to start a new entry
  {
    if (needsEntry)
    {
      newEntry();
    }
  }
  if (needsEntry)
  {
    newEntry();
  }

}

static void endOfDef(int correction=0)
{
  if (bodyEntry)
  {
    bodyEntry->endBodyLine  = yyLineNr-correction;
    bodyEntry = 0;
  }
  newEntry();
  //g_insideConstructor = FALSE;
}

static inline void addToString(const char *s)
{
  if (g_copyString) (*g_copyString)+=s;
}

static void initTriDoubleQuoteBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBlockSpecial   = pyscanYYtext[3]=='!';
  docBlock.resize(0);
  g_doubleQuote = TRUE;
  startCommentBlock(FALSE);
}

static void initTriSingleQuoteBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBlockSpecial   = pyscanYYtext[3]=='!';
  docBlock.resize(0);
  g_doubleQuote = FALSE;
  startCommentBlock(FALSE);
}

static void initSpecialBlock()
{
  docBlockContext   = YY_START;
  docBlockInBody    = FALSE;
  docBlockJavaStyle = TRUE;
  docBrief = TRUE;
  docBlock.resize(0);
  startCommentBlock(TRUE);
}

static void searchFoundDef()
{
  current->fileName  = yyFileName;
  current->startLine = yyLineNr;
  current->bodyLine  = yyLineNr;
  current->section = Entry::FUNCTION_SEC;
  current->protection = protection = Public;
  current->lang = SrcLangExt_Python;
  current->virt = Normal;
  current->stat = FALSE;
  current->mtype = mtype = Method;
  current->type.resize(0);
  current->name.resize(0);
  current->args.resize(0);
  current->argList->clear();
  g_packageCommentAllowed = FALSE;
}

static void searchFoundClass()
{
  current->section = Entry::CLASS_SEC;
  current->argList->clear();
  current->type += "class" ;
  current->fileName  = yyFileName;
  current->bodyLine  = yyLineNr;
  g_packageCommentAllowed = FALSE;
}

//-----------------------------------------------------------------------------
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int c=0;
  while ( c < max_size && inputString[inputPosition] )
  {
    *buf = inputString[inputPosition++] ;
    //printf("%d (%c)\n",*buf,*buf);
    c++; buf++;
  }
  return c;
}

/* start command character */
/* Main start state */


/* Mid-comment states */
/* %x FuncDoubleComment */
/* %x ClassDoubleComment */



/* Function states */




/* Class states */




/* Variable states */



/* String states */



/* import */



#line 1538 "<stdout>"

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TryClassDocString 3
#define TripleComment 4
#define SpecialComment 5
#define FunctionDec 6
#define FunctionParams 7
#define FunctionBody 8
#define FunctionParamDefVal 9
#define ClassDec 10
#define ClassInheritance 11
#define ClassCaptureIndent 12
#define ClassBody 13
#define VariableDec 14
#define VariableEnd 15
#define VariableAtom 16
#define SingleQuoteString 17
#define DoubleQuoteString 18
#define TripleString 19
#define FromMod 20
#define FromModItem 21
#define Import 22

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pyscanYYlex_destroy (void );

int pyscanYYget_debug (void );

void pyscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE pyscanYYget_extra (void );

void pyscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pyscanYYget_in (void );

void pyscanYYset_in  (FILE * in_str  );

FILE *pyscanYYget_out (void );

void pyscanYYset_out  (FILE * out_str  );

yy_size_t pyscanYYget_leng (void );

char *pyscanYYget_text (void );

int pyscanYYget_lineno (void );

void pyscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pyscanYYwrap (void );
#else
extern int pyscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( pyscanYYtext, pyscanYYleng, 1, pyscanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pyscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pyscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pyscanYYin))==0 && ferror(pyscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pyscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pyscanYYlex (void);

#define YY_DECL int pyscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pyscanYYtext and pyscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( pyscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(pyscanYYtext[pyscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 518 "pyscanner.l"


  /* ------------ Function recognition rules -------------- */

#line 1750 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)pyscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in pyscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pyscanYYin )
			pyscanYYin = stdin;

		if ( ! pyscanYYout )
			pyscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pyscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE );
		}

		pyscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pyscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 434 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1566 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 524 "pyscanner.l"
{ // start of a function/method definition with indent
      			  g_indent=computeIndent(pyscanYYtext);
			  searchFoundDef();
			  BEGIN( FunctionDec );
      			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 529 "pyscanner.l"
{ // start of a function/method definition
			  searchFoundDef();
			  BEGIN( FunctionDec );
                        }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 534 "pyscanner.l"
{ // start of a class definition with indent
      			  g_indent=computeIndent(pyscanYYtext);
			  searchFoundClass();
			  BEGIN( ClassDec ) ;
       			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 539 "pyscanner.l"
{  // start of a class definition
			  searchFoundClass();
			  BEGIN( ClassDec ) ;
                       }
	YY_BREAK
case 5:
#line 544 "pyscanner.l"
case 6:
YY_RULE_SETUP
#line 544 "pyscanner.l"
{ // start of an from import
			  g_packageCommentAllowed = FALSE;
                          BEGIN( FromMod );
                       }
	YY_BREAK
case 7:
#line 550 "pyscanner.l"
case 8:
YY_RULE_SETUP
#line 550 "pyscanner.l"
{ // start of an import statement
			  g_packageCommentAllowed = FALSE;
                          BEGIN( Import );
                       }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 554 "pyscanner.l"
{ // property
      			current->section   = Entry::VARIABLE_SEC;
  			current->mtype     = Property;
			current->name      = QCString(pyscanYYtext).stripWhiteSpace();
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			g_packageCommentAllowed = FALSE;
			BEGIN(VariableDec);
       	              }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 564 "pyscanner.l"
{ // variable
      			g_indent=computeIndent(pyscanYYtext);
      			current->section   = Entry::VARIABLE_SEC;
			current->name      = QCString(pyscanYYtext).stripWhiteSpace();
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			g_packageCommentAllowed = FALSE;
			BEGIN(VariableDec);
      		      }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 574 "pyscanner.l"
{ // start of a single quoted string
       		        g_stringContext=YY_START;
		        g_copyString=0;
			g_packageCommentAllowed = FALSE;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 580 "pyscanner.l"
{ // start of a double quoted string
       	                g_stringContext=YY_START;
			g_copyString=0;
			g_packageCommentAllowed = FALSE;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 587 "pyscanner.l"
{ // normal comment 
			g_packageCommentAllowed = FALSE;
      		      }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 590 "pyscanner.l"
{ // some other identifier
			g_packageCommentAllowed = FALSE;
		      }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 593 "pyscanner.l"
{
      			g_curIndent=computeIndent(pyscanYYtext);
                      }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 597 "pyscanner.l"
{ // new line
                        lineCount();
                      }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 601 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 606 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 19:
/* rule 19 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 611 "pyscanner.l"
{  // start of a special comment
      			g_curIndent=computeIndent(pyscanYYtext);
			g_packageCommentAllowed = FALSE;
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 617 "pyscanner.l"
{ // any other character...
                        // This is the major default
                        // that should catch everything
                        // else in Body.
                      }
	YY_BREAK


case 21:
YY_RULE_SETUP
#line 625 "pyscanner.l"
{ // from package import 
                        g_packageName=pyscanYYtext;
		      }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 628 "pyscanner.l"
{
    			BEGIN(FromModItem);
    		      }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 631 "pyscanner.l"
{
                        yyLineNr++;
                        BEGIN(Search);
                      }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 635 "pyscanner.l"
{
		      }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 637 "pyscanner.l"
{
                        unput(*pyscanYYtext);
                        BEGIN(Search);
                      }
	YY_BREAK


case 26:
YY_RULE_SETUP
#line 644 "pyscanner.l"
{ // import all
                  QCString item=g_packageName;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using directive: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDIR_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
                  BEGIN(Search);
    		}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 655 "pyscanner.l"
{
                  QCString item=g_packageName+"."+pyscanYYtext;
		  current->name=removeRedundantWhiteSpace(substitute(item,".","::"));
		  current->fileName = yyFileName; 
		  //printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
		  current->section=Entry::USINGDECL_SEC;
		  current_root->addSubEntry(current);
		  current = new Entry ;
		  initEntry();
                  BEGIN(Search);
		}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 666 "pyscanner.l"
{
                  yyLineNr++;
                  BEGIN(Search);
                }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 670 "pyscanner.l"
{
		}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 672 "pyscanner.l"
{
                  unput(*pyscanYYtext);
                  BEGIN(Search);
                }
	YY_BREAK


case 31:
YY_RULE_SETUP
#line 679 "pyscanner.l"
{
			current->name=removeRedundantWhiteSpace(substitute(pyscanYYtext,".","::"));
			current->fileName = yyFileName; 
			//printf("Adding using declaration: found:%s:%d name=%s\n",yyFileName.data(),yyLineNr,current->name.data());
			current->section=Entry::USINGDECL_SEC;
			current_root->addSubEntry(current);
			current = new Entry ;
			initEntry();
			BEGIN(Search);
                      }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 689 "pyscanner.l"
{
                  yyLineNr++;
                  BEGIN(Search);
                }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 693 "pyscanner.l"
{
		}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 695 "pyscanner.l"
{
                  unput(*pyscanYYtext);
                  BEGIN(Search);
                }
	YY_BREAK


case 35:
YY_RULE_SETUP
#line 702 "pyscanner.l"
{
                        //printf("Found member variable %s in %s\n",&pyscanYYtext[5],current_root->name.data());
			current->name=&pyscanYYtext[5];
			current->section=Entry::VARIABLE_SEC;
			current->fileName  = yyFileName;
			current->startLine = yyLineNr;
			current->bodyLine  = yyLineNr;
			current->type.resize(0);
			if (current->name.at(0)=='_') // mark as private
			{
			  current->protection=Private;
			}
			else
			{
			  current->protection=Public;
			}
			newEntry();
                      }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 720 "pyscanner.l"
{ // start of a comment block
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 725 "pyscanner.l"
{ // start of a comment block
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 38:
/* rule 38 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 730 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 734 "pyscanner.l"
{ // #
	              }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 736 "pyscanner.l"
{ // start of a single quoted string
       			g_stringContext=YY_START;
			g_copyString=0;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 741 "pyscanner.l"
{ // start of a double quoted string
       			g_stringContext=YY_START;
			g_copyString=0;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 746 "pyscanner.l"
{ yyLineNr++; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 747 "pyscanner.l"
// identifiers
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 748 "pyscanner.l"
// other uninteresting stuff
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 749 "pyscanner.l"
// anything else
	YY_BREAK


case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 753 "pyscanner.l"
{
                        //fprintf(stderr,"indent %d<=%d\n",computeIndent(&pyscanYYtext[1]),g_indent);
                        if (computeIndent(&pyscanYYtext[1])<=g_indent) 
			{
			  int i;
			  for (i=pyscanYYleng-1;i>=0;i--)
			  {
			    unput(pyscanYYtext[i]);
			  }
			  endOfDef();
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
                          yyLineNr++;
      		          current->program+=pyscanYYtext;
			}
                      }
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 772 "pyscanner.l"
{
                        if (computeIndent(&pyscanYYtext[1])<=g_indent)
			{
			  int i;
			  for (i=pyscanYYleng-1;i>=0;i--)
			  {
			    unput(pyscanYYtext[i]);
			  }
			  endOfDef();
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                          BEGIN(Search);
			}
			else
			{
			  yyLineNr++;
      		          current->program+=pyscanYYtext;
			}
      		      }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
#line 790 "pyscanner.l"
{
			endOfDef();
			yyterminate();
      		      }
	YY_BREAK
case 48:
/* rule 48 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 794 "pyscanner.l"
{ // skip empty line
      		        current->program+=pyscanYYtext;
      	              }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 797 "pyscanner.l"
{ // something at indent >0
      		        current->program+=pyscanYYtext;
			g_curIndent = computeIndent(pyscanYYtext);
                        if (g_curIndent<=g_indent) 
			  // jumped out of the function
			{
			  endOfDef(1);
                          BEGIN(Search);
			}
      		      }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 807 "pyscanner.l"
{ // start of a single quoted string
      		        current->program+=pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 814 "pyscanner.l"
{ // start of a double quoted string
      		        current->program+=pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 821 "pyscanner.l"
{ // non-special stuff
      		        current->program+=pyscanYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 825 "pyscanner.l"
{ // normal comment 
      		        current->program+=pyscanYYtext;
      		      }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 828 "pyscanner.l"
{ // comment half way
      		        current->program+=pyscanYYtext;
                      }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 831 "pyscanner.l"
{ yyLineNr++; 
      		        current->program+=pyscanYYtext;
		      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 834 "pyscanner.l"
{ // any character
      		        current->program+=*pyscanYYtext;
		        g_specialBlock = FALSE; 
                      }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 839 "pyscanner.l"
{ // start of a comment block
			current->program+=pyscanYYtext;
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 845 "pyscanner.l"
{ // start of a comment block
			current->program+=pyscanYYtext;
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 59:
/* rule 59 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 851 "pyscanner.l"
{  // start of a special comment
			initSpecialBlock();
			BEGIN(SpecialComment);
                      }
	YY_BREAK


case 60:
YY_RULE_SETUP
#line 860 "pyscanner.l"
{
			      //found function name
			      if (current->type.isEmpty()) 
			      {
				  current->type = "def";
			      }
			      current->name = pyscanYYtext;
			      current->name = current->name.stripWhiteSpace();
			      newFunction();
                            }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 870 "pyscanner.l"
{ // function without arguments
			      g_specialBlock = TRUE; // expecting a docstring
			      bodyEntry = current;
                              BEGIN( FunctionBody );
			    }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 876 "pyscanner.l"
{
			       BEGIN( FunctionParams );
		            }
	YY_BREAK


case 63:
YY_RULE_SETUP
#line 882 "pyscanner.l"
{
                        }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 885 "pyscanner.l"
{ // Name of parameter
			  lineCount();
			  Argument *a = new Argument;
			  current->argList->append(a);
			  current->argList->getLast()->name = QCString(pyscanYYtext).stripWhiteSpace();
			  current->argList->getLast()->type = "";
                        }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 892 "pyscanner.l"
{ // default value
                          // TODO: this rule is too simple, need to be able to
                          // match things like =")" as well!
      			  QCString defVal=&pyscanYYtext[1];
			  g_defVal.resize(0);
			  g_braceCount=0;
			  BEGIN(FunctionParamDefVal);
      			}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 901 "pyscanner.l"
{ // end of parameter list
                        }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 904 "pyscanner.l"
{
			  g_specialBlock = TRUE; // expecting a docstring
			  bodyEntry = current;
                          BEGIN( FunctionBody );
                        }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 909 "pyscanner.l"
{ // a comment
			}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 911 "pyscanner.l"
{ // Default rule inside arguments.
                        }
	YY_BREAK


case 70:
YY_RULE_SETUP
#line 917 "pyscanner.l"
{ // internal opening brace
       			  g_braceCount++;
			  g_defVal+=*pyscanYYtext;
       			}
	YY_BREAK
case 71:
#line 922 "pyscanner.l"
case 72:
YY_RULE_SETUP
#line 922 "pyscanner.l"
{
       			  if (g_braceCount==0)  // end of default argument
			  {
			    if (current->argList->getLast())
			    {
			      current->argList->getLast()->defval=g_defVal.stripWhiteSpace();
			    }
       			    BEGIN(FunctionParams);
			  }
			  else // continue
			  {
			    g_braceCount--;
			    g_defVal+=*pyscanYYtext;
			  }
       			}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 937 "pyscanner.l"
{
			    g_defVal+=*pyscanYYtext;
       			}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 940 "pyscanner.l"
{
       			    g_defVal+=*pyscanYYtext;
			    yyLineNr++;
       			}
	YY_BREAK


case 75:
/* rule 75 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 948 "pyscanner.l"
{ // new def at indent 0
                        yyLineNr++;
			endOfDef();
			g_hideClassDocs = FALSE;
			//YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 76:
/* rule 76 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 955 "pyscanner.l"
{  // start of a special comment at indent 0
                        yyLineNr++;
			endOfDef();
			g_hideClassDocs = FALSE;
			//YY_CURRENT_BUFFER->yy_at_bol=TRUE;
                        BEGIN(Search);
                      }
	YY_BREAK
case 77:
/* rule 77 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 962 "pyscanner.l"
{ // skip empty line
      		        current->program+=pyscanYYtext;
      	              }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
#line 965 "pyscanner.l"
{
			endOfDef();
			yyterminate();
      		      }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 969 "pyscanner.l"
{ // something at indent >0
                        g_curIndent=computeIndent(pyscanYYtext);
			//fprintf(stderr,"g_curIndent=%d g_indent=%d\n",g_curIndent,g_indent);
                        if (g_curIndent<=g_indent) 
			  // jumped out of the class/method
			{
			  endOfDef(1);
			  g_indent=g_curIndent;
			  // make sure the next rule matches ^...
			  //YY_CURRENT_BUFFER->yy_at_bol=TRUE;
			  g_hideClassDocs = FALSE;
                          BEGIN(Search);
			}
			else
			{
      		          current->program+=pyscanYYtext;
			}
      		      }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 987 "pyscanner.l"
{ // start of a single quoted string
      		        current->program+=*pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( SingleQuoteString );
                      }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 994 "pyscanner.l"
{ // start of a double quoted string
      		        current->program+=*pyscanYYtext;
       			g_stringContext=YY_START;
		        g_specialBlock = FALSE; 
			g_copyString=&current->program;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1001 "pyscanner.l"
{ // non-special stuff
      		        current->program+=pyscanYYtext;
		        g_specialBlock = FALSE; 
			g_hideClassDocs = FALSE;
                      }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1006 "pyscanner.l"
{ 
      		        current->program+=*pyscanYYtext;
			yyLineNr++; 
		      }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1010 "pyscanner.l"
{ // normal comment
      		        current->program+=pyscanYYtext;
                      }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1013 "pyscanner.l"
{ // any character
		        g_specialBlock = FALSE; 
      		        current->program+=*pyscanYYtext;
                      }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1017 "pyscanner.l"
{ // start of a comment block
      		        if (!g_hideClassDocs) current->program+=pyscanYYtext;
			initTriDoubleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1023 "pyscanner.l"
{ // start of a comment block
      		        if (!g_hideClassDocs) current->program+=pyscanYYtext;
			initTriSingleQuoteBlock();
			BEGIN(TripleComment);
                      }
	YY_BREAK

case 87:
YY_RULE_SETUP
#line 1030 "pyscanner.l"
{
			  if (current->type.isEmpty()) 
			  {
			      current->type = "class";
			  }

			  current->section = Entry::CLASS_SEC;
			  current->name = pyscanYYtext;

			  // prepend scope in case of nested classes
			  if (current_root->section&Entry::SCOPE_MASK)
			  {
			    //printf("*** Prepending scope %s to class %s\n",current_root->name.data(),current->name.data());
			    current->name.prepend(current_root->name+"::");
			  }
			  
			  current->name = current->name.stripWhiteSpace();
			  current->fileName = yyFileName;        
			  docBlockContext   = YY_START;
			  docBlockInBody    = FALSE;
			  docBlockJavaStyle = FALSE;
			  docBlock.resize(0);

			  BEGIN(ClassInheritance);                 
                        }
	YY_BREAK

case 88:
YY_RULE_SETUP
#line 1057 "pyscanner.l"
{ // syntactic sugar for the list
                       }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1060 "pyscanner.l"
{ // begin of the class definition
			 g_specialBlock = TRUE; // expecting a docstring
      			 BEGIN(ClassCaptureIndent);
                       }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1065 "pyscanner.l"
{
                         current->extends->append(
					      new BaseInfo(substitute(pyscanYYtext,".","::"),Public,Normal)
					    );
                         //Has base class-do stuff
                       }
	YY_BREAK


case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1075 "pyscanner.l"
{
                                 // Blankline - ignore, keep looking for indentation.
				 lineCount();
                               }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1080 "pyscanner.l"
{ // start of a comment block
				 initTriDoubleQuoteBlock();
			 	 BEGIN(TripleComment);
                      	       }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1085 "pyscanner.l"
{ // start of a comment block
			         initTriSingleQuoteBlock();
			         BEGIN(TripleComment);
                               }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1090 "pyscanner.l"
{
      				 current->program=pyscanYYtext;
			         current->startLine = yyLineNr;
				 g_curIndent=computeIndent(pyscanYYtext);
				 bodyEntry = current;
				 //fprintf(stderr,"setting indent %d\n",g_curIndent);
				 //printf("current->program=[%s]\n",current->program.data());
				 g_hideClassDocs = TRUE;
			         BEGIN(ClassBody);
                               }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1101 "pyscanner.l"
{
				 
				 // Just pushback an empty class, and
				 // resume parsing the body.
                                 newEntry();

				 // printf("Failed to find indent - skipping!");
				 BEGIN( Search );
                               }
	YY_BREAK


case 96:
YY_RULE_SETUP
#line 1114 "pyscanner.l"
{ // the assignment operator
                        //printf("====== VariableDec at line %d\n",yyLineNr);
                      }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1117 "pyscanner.l"
{ // spaces
	              }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1119 "pyscanner.l"
{ // integer value
			current->type = "int";
			current->initializer = pyscanYYtext;
			BEGIN(VariableEnd);
		      }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1124 "pyscanner.l"
{ // floating point value
			current->type = "float";
			current->initializer = pyscanYYtext;
			BEGIN(VariableEnd);
		      }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1129 "pyscanner.l"
{ // string
			current->type = "string";
			current->initializer = pyscanYYtext;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
                        BEGIN( SingleQuoteString );
     		      }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1136 "pyscanner.l"
{ // string
			current->type = "string";
			current->initializer = pyscanYYtext;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
                        BEGIN( DoubleQuoteString );
     		      }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1143 "pyscanner.l"
{ // start of a comment block
			current->type = "string";
			current->initializer = pyscanYYtext;
			g_doubleQuote=TRUE;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1152 "pyscanner.l"
{ // start of a comment block
			current->type = "string";
			current->initializer = pyscanYYtext;
			g_doubleQuote=FALSE;
			g_copyString=&current->initializer;
       			g_stringContext=VariableEnd;
			BEGIN(TripleString);
                      }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1160 "pyscanner.l"
{ // tuple
                        if (current->mtype!=Property)
			{
			  current->type = "tuple";
			}
      		        current->initializer+=*pyscanYYtext;
                        g_atomStart='(';
			g_atomEnd=')';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1171 "pyscanner.l"
{ // list
			current->type = "list";
      		        current->initializer+=*pyscanYYtext;
                        g_atomStart='[';
			g_atomEnd=']';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1179 "pyscanner.l"
{ // dictionary
			current->type = "dictionary";
      		        current->initializer+=*pyscanYYtext;
                        g_atomStart='{';
			g_atomEnd='}';
			g_atomCount=1;
			BEGIN( VariableAtom );
                      }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1187 "pyscanner.l"
{ // comment
                        BEGIN( VariableEnd ); 
                      }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1190 "pyscanner.l"
{
      		        current->initializer+=pyscanYYtext;
	              }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1193 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                      }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 1196 "pyscanner.l"
{
     		        unput('\n');
     			BEGIN( VariableEnd );
     		      }
	YY_BREAK


case 111:
YY_RULE_SETUP
#line 1203 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                        if (g_atomStart==*pyscanYYtext)
			{
			  g_atomCount++;
			}
                      }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1210 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                        if (g_atomEnd==*pyscanYYtext)
			{
			  g_atomCount--;
			}
			if (g_atomCount==0)
			{
			  BEGIN(VariableEnd);
			}
                      }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1221 "pyscanner.l"
{
       			g_stringContext=YY_START;
			current->initializer+="\"";
			g_copyString=&current->initializer;
                        BEGIN( DoubleQuoteString );
                      }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1227 "pyscanner.l"
{
      		        current->initializer+=pyscanYYtext;
	              }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1230 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
                      }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 1233 "pyscanner.l"
{
      		        current->initializer+=*pyscanYYtext;
     			yyLineNr++;
     		      }
	YY_BREAK


case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 1241 "pyscanner.l"
{
                        yyLineNr++;
			newVariable();
                        BEGIN(Search);
                      }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1246 "pyscanner.l"
{ 
                        unput(*pyscanYYtext);
			newVariable();
                        BEGIN(Search);
      		      }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
#line 1251 "pyscanner.l"
{ yyterminate();
                        newEntry();
                      }
	YY_BREAK


case 119:
#line 1258 "pyscanner.l"
case 120:
YY_RULE_SETUP
#line 1258 "pyscanner.l"
{
			  // printf("Expected module block %d special=%d\n",g_expectModuleDocs,g_specialBlock);
			  if (g_doubleQuote==(pyscanYYtext[0]=='"')) 
			  {
			    if (g_specialBlock) // expecting a docstring
			    {
			      QCString actualDoc=docBlock;
			      if (!docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      //printf("-------> current=%p bodyEntry=%p\n",current,bodyEntry);
			      handleCommentBlock(actualDoc, FALSE);
			    }
			    else if (g_packageCommentAllowed) // expecting module docs
			    {
			      QCString actualDoc=docBlock;
			      if (!docBlockSpecial) // legacy unformatted docstring
			      {
			        actualDoc.prepend("\\verbatim ");
			        actualDoc.append("\\endverbatim ");
			      }
			      actualDoc.prepend("\\namespace "+g_moduleScope+"\\_linebr ");
			      handleCommentBlock(actualDoc, FALSE);
			    }
			    if ((docBlockContext==ClassBody && !g_hideClassDocs) ||
				docBlockContext==FunctionBody)
			    {
			      current->program+=docBlock;
			      current->program+=pyscanYYtext;
			    }
                            if (g_hideClassDocs)
                              current->startLine = yyLineNr;
			    g_hideClassDocs=FALSE;
			    BEGIN(docBlockContext);
			  }
                          else 
			  {
                            docBlock += pyscanYYtext;
                          }
			  g_packageCommentAllowed = FALSE;
                        }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1303 "pyscanner.l"
{ // leading whitespace
      			  int indent = computeIndent(pyscanYYtext);
			  if (indent>=g_curIndent)
			  { // strip g_curIndent amount of whitespace
			    int i;
			    for (i=0;i<indent-g_curIndent;i++) docBlock+=' ';
			    //fprintf(stderr,"stripping indent %d\n",g_curIndent);
			  }
			  else
			  {
			    //fprintf(stderr,"not stripping: %d<%d\n",indent,g_curIndent);
			    docBlock += pyscanYYtext;
			  }
      			}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1317 "pyscanner.l"
{
			  docBlock += pyscanYYtext;
                        }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1320 "pyscanner.l"
{
      			  yyLineNr++;
			  docBlock += pyscanYYtext;
      			}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1324 "pyscanner.l"
{
			  docBlock += pyscanYYtext;
      			}
	YY_BREAK


case 125:
YY_RULE_SETUP
#line 1330 "pyscanner.l"
{ // skip leading hashes
      			}
	YY_BREAK
case 126:
/* rule 126 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pyscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pyscanYYtext again */
YY_RULE_SETUP
#line 1332 "pyscanner.l"
{ // continuation of the comment on the next line
      			  docBlock+='\n';
			  docBrief = FALSE;
                          startCommentBlock(FALSE);
			  yyLineNr++;
      			}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1338 "pyscanner.l"
{ // any other stuff
      			  docBlock+=pyscanYYtext;
      			}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1341 "pyscanner.l"
{ // new line that ends the comment
			  handleCommentBlock(docBlock, docBrief);
      			  yyLineNr++;
			  BEGIN(docBlockContext);
      			}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1346 "pyscanner.l"
{ // anything we missed
      			  docBlock+=*pyscanYYtext;
      			}
	YY_BREAK


case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1352 "pyscanner.l"
{ // line continuation
      			         addToString(pyscanYYtext);
      				 yyLineNr++;
                               }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1356 "pyscanner.l"
{ // espaced char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1359 "pyscanner.l"
{ // tripple double quotes
      			         addToString(pyscanYYtext);
      			       }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1362 "pyscanner.l"
{ // end of the string
      			         addToString(pyscanYYtext);
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1366 "pyscanner.l"
{ // normal chars
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1369 "pyscanner.l"
{ // normal char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK


case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1375 "pyscanner.l"
{ // line continuation
      			         addToString(pyscanYYtext);
      				 yyLineNr++;
                               }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1379 "pyscanner.l"
{ // espaced char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1382 "pyscanner.l"
{ // tripple single quotes
      			         addToString(pyscanYYtext);
      			       }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1385 "pyscanner.l"
{ // end of the string
      			         addToString(pyscanYYtext);
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1389 "pyscanner.l"
{ // normal chars
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1392 "pyscanner.l"
{ // normal char
      			         addToString(pyscanYYtext);
                               }
	YY_BREAK


case 142:
#line 1399 "pyscanner.l"
case 143:
YY_RULE_SETUP
#line 1399 "pyscanner.l"
{
                          *g_copyString += pyscanYYtext;
			  if (g_doubleQuote==(pyscanYYtext[0]=='"')) 
			  {
			    BEGIN(g_stringContext);
			  }
                        }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 1408 "pyscanner.l"
{
			  lineCount();
                          *g_copyString += pyscanYYtext;
                        }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1412 "pyscanner.l"
{
      			  yyLineNr++;
                          *g_copyString += pyscanYYtext;
      			}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1416 "pyscanner.l"
{
                          *g_copyString += *pyscanYYtext;
      			}
	YY_BREAK

/* ------------ End rules -------------- */
/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
				 // printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       pyscanYYtext, YY_START, yyLineNr);

                               }
  */
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1431 "pyscanner.l"
{
				 //printf("[pyscanner] %d NEWLINE [line %d] no match\n",
				 //       YY_START, yyLineNr);

                                 lineCount();
                               }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1438 "pyscanner.l"
{
				 //printf("[pyscanner] '%s' [ state %d ]  [line %d] no match\n",
				 //       pyscanYYtext, YY_START, yyLineNr);

                               }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1445 "pyscanner.l"
ECHO;
	YY_BREAK
#line 3374 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(TryClassDocString):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pyscanYYin at a new source and called
			 * pyscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pyscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pyscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pyscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pyscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pyscanYYrestart(pyscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pyscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 434 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 434 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 433);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up pyscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pyscanYYrestart(pyscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pyscanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pyscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pyscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pyscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE );
	}

	pyscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	pyscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pyscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pyscanYYpop_buffer_state();
	 *		pyscanYYpush_buffer_state(new_buffer);
     */
	pyscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pyscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pyscanYYwrap()) processing, but the only time this flag
	 * is looked at is after pyscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pyscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pyscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pyscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pyscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pyscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pyscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pyscanYY_create_buffer()
 * 
 */
    void pyscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pyscanYYfree((void *) b->yy_ch_buf  );

	pyscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pyscanYYrestart() or at EOF.
 */
    static void pyscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pyscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pyscanYY_init_buffer was _probably_
     * called from pyscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pyscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pyscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pyscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pyscanYYensure_buffer_stack();

	/* This block is copied from pyscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pyscanYY_switch_to_buffer. */
	pyscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pyscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pyscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pyscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pyscanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)pyscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pyscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pyscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pyscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pyscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pyscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pyscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pyscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pyscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE pyscanYY_scan_string (yyconst char * yystr )
{
    
	return pyscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pyscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pyscanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pyscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pyscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pyscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pyscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pyscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pyscanYYtext[pyscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = pyscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pyscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pyscanYYget_lineno  (void)
{
        
    return pyscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *pyscanYYget_in  (void)
{
        return pyscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *pyscanYYget_out  (void)
{
        return pyscanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t pyscanYYget_leng  (void)
{
        return pyscanYYleng;
}

/** Get the current token.
 * 
 */

char *pyscanYYget_text  (void)
{
        return pyscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void pyscanYYset_lineno (int  line_number )
{
    
    pyscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see pyscanYY_switch_to_buffer
 */
void pyscanYYset_in (FILE *  in_str )
{
        pyscanYYin = in_str ;
}

void pyscanYYset_out (FILE *  out_str )
{
        pyscanYYout = out_str ;
}

int pyscanYYget_debug  (void)
{
        return pyscanYY_flex_debug;
}

void pyscanYYset_debug (int  bdebug )
{
        pyscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pyscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pyscanYYin = stdin;
    pyscanYYout = stdout;
#else
    pyscanYYin = (FILE *) 0;
    pyscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pyscanYYlex_init()
     */
    return 0;
}

/* pyscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int pyscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pyscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pyscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pyscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    pyscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pyscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pyscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *pyscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pyscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see pyscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1445 "pyscanner.l"



//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      inputString = ce->program;
      inputPosition = 0;
      pyscanYYrestart( pyscanYYin ) ;
      if (ce->section&Entry::COMPOUND_MASK)
      {
        current_root = ce ;
        BEGIN( Search );
      }
      else if (ce->parent())
      {
        current_root = ce->parent();
	//printf("Searching for member variables in %s parent=%s\n",
	//    ce->name.data(),ce->parent->name.data());
	BEGIN( SearchMemVars );
      }
      yyFileName = ce->fileName;
      yyLineNr = ce->startLine ;
      if (current) delete current;
      current = new Entry;

      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      pyscanYYlex() ;
      g_lexInit=TRUE;
      delete current; current=0;
      ce->program.resize(0);

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);

    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------


static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();

  inputString = fileBuf;
  inputPosition = 0;

  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  g_specialBlock = FALSE;


  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    //setContext();
    msg("Parsing file %s...\n",yyFileName.data());

    QFileInfo fi(fileName);
    g_moduleScope = findPackageScope(fileName);
    QString baseName=fi.baseName();
    if (baseName!="__init__") // package initializer file is not a package itself
    {
      if (!g_moduleScope.isEmpty())
      {
	g_moduleScope+="::";
      }
      g_moduleScope+=baseName;
    }

    current            = new Entry;
    current->name      = g_moduleScope;
    current->section   = Entry::NAMESPACE_SEC;
    current->type      = "namespace";
    current->fileName  = yyFileName;
    current->startLine = yyLineNr;
    current->bodyLine  = yyLineNr;

    rt->addSubEntry(current);

    current_root  = current ;
    initParser();
    current       = new Entry;

    groupEnterFile(yyFileName,yyLineNr);
    
    current->reset();
    pyscanYYrestart( pyscanYYin );
    BEGIN( Search );
    pyscanYYlex();
    g_lexInit=TRUE;

    groupLeaveFile(yyFileName,yyLineNr);

    current_root->program.resize(0);
    delete current; current=0;

    parseCompounds(current_root);

    inputFile.close();
  }
  
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  g_specialBlock = FALSE;
  g_packageCommentAllowed = FALSE;

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  pyscanYY_switch_to_buffer(pyscanYY_create_buffer(pyscanYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;

  // set new string
  inputString = text;
  inputPosition = 0;
  pyscanYYrestart( pyscanYYin );

  BEGIN( FunctionDec );

  pyscanYYlex();
  g_lexInit=TRUE;

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state

  YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
  pyscanYY_switch_to_buffer(orgState);
  pyscanYY_delete_buffer(tmpBuf);

  inputString = orgInputString; 
  inputPosition = orgInputPosition;

  //printf("**** parsePrototype end\n");
}

void pyscanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    pyscanYYlex_destroy();
  }
#endif
}

//----------------------------------------------------------------------------

void PythonLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);

  // May print the AST for debugging purposes
  // printAST(global_root);
}

bool PythonLanguageScanner::needsPreprocessing(const QCString &)
{
  return FALSE;
}

void PythonLanguageScanner::parseCode(CodeOutputInterface &codeOutIntf,
    const char *scopeName,
    const QCString &input,
    bool isExampleBlock,
    const char *exampleName,
    FileDef *fileDef,
    int startLine,
    int endLine,
    bool inlineFragment,
    MemberDef *memberDef,
    bool showLineNumbers
    )
{
  ::parsePythonCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
                    fileDef,startLine,endLine,inlineFragment,memberDef,
                    showLineNumbers);
}

void PythonLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);

}

void PythonLanguageScanner::resetCodeParserState()
{
  ::resetPythonCodeParserState();
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void pyscannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


