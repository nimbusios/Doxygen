
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pycodeYY_create_buffer
#define yy_delete_buffer pycodeYY_delete_buffer
#define yy_flex_debug pycodeYY_flex_debug
#define yy_init_buffer pycodeYY_init_buffer
#define yy_flush_buffer pycodeYY_flush_buffer
#define yy_load_buffer_state pycodeYY_load_buffer_state
#define yy_switch_to_buffer pycodeYY_switch_to_buffer
#define yyin pycodeYYin
#define yyleng pycodeYYleng
#define yylex pycodeYYlex
#define yylineno pycodeYYlineno
#define yyout pycodeYYout
#define yyrestart pycodeYYrestart
#define yytext pycodeYYtext
#define yywrap pycodeYYwrap
#define yyalloc pycodeYYalloc
#define yyrealloc pycodeYYrealloc
#define yyfree pycodeYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pycodeYYrestart(pycodeYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t pycodeYYleng;

extern FILE *pycodeYYin, *pycodeYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pycodeYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pycodeYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pycodeYYrestart()), so that the user can continue scanning by
	 * just pointing pycodeYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pycodeYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t pycodeYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pycodeYYwrap()'s to do buffer switches
 * instead of setting up a fresh pycodeYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pycodeYYrestart (FILE *input_file  );
void pycodeYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pycodeYY_create_buffer (FILE *file,int size  );
void pycodeYY_delete_buffer (YY_BUFFER_STATE b  );
void pycodeYY_flush_buffer (YY_BUFFER_STATE b  );
void pycodeYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void pycodeYYpop_buffer_state (void );

static void pycodeYYensure_buffer_stack (void );
static void pycodeYY_load_buffer_state (void );
static void pycodeYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pycodeYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pycodeYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pycodeYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pycodeYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *pycodeYYalloc (yy_size_t  );
void *pycodeYYrealloc (void *,yy_size_t  );
void pycodeYYfree (void *  );

#define yy_new_buffer pycodeYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pycodeYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pycodeYY_create_buffer(pycodeYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pycodeYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pycodeYY_create_buffer(pycodeYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pycodeYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pycodeYYin = (FILE *) 0, *pycodeYYout = (FILE *) 0;

typedef int yy_state_type;

extern int pycodeYYlineno;

int pycodeYYlineno = 1;

extern char *pycodeYYtext;
#define yytext_ptr pycodeYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pycodeYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pycodeYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 57
#define YY_END_OF_BUFFER 58
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[946] =
    {   0,
    16412,16412,   58,   56,   57,   55,   56,   57,   54,   57,
       52,   56,   57,   53,   56,   57,   51,   56,   57,   56,
       57,   56,   57,   56,   57,   31,   54,   57,   17,   30,
       56,   57,   17,   30,   56,   57,   17,   30,   56,   57,
       17,   30,   56,   57,   17,   30,   56,   57,   17,   30,
       56,   57,   17,   30,   56,   57,   17,   30,   56,   57,
       17,   30,   56,   57,   17,   30,   56,   57,   17,   30,
       56,   57,   17,   30,   56,   57,   17,   30,   56,   57,
       17,   30,   56,   57,   17,   30,   56,   57,   17,   30,
       56,   57,   17,   30,   56,   57,   17,   30,   56,   57,

       17,   30,   56,   57,   17,   30,   56,   57,   17,   30,
       56,   57,   17,   30,   56,   57,   17,   30,   56,   57,
       17,   30,   56,   57,   55,   56,   57,   10,   56,   57,
        9,   56,   57,    9,   56,   57,    9,   56,   57,    9,
       56,   57,   12,   56,   57,   11,   55,   56,   57,   12,
       52,   56,   57,   12,   53,   56,   57,   12,   51,   56,
       57,   13,   56,   57,   11,   12,   56,   57,   14,   56,
       57,   12,   56,   57,   12,   56,   57,   12,   56,   57,
       12,   56,   57,    5,   56,   57,    5,   56,   57,    5,
       56,   57,    5,   56,   57,    6,   55,   56,   57,    6,

       56,   57,    8,   56,   57,    7,   56,   57,    7,   56,
       57,    7,   56,   57,    7,   56,   57,   29,   54,   57,
       17,   56,   57,   17,   56,   57,   17,   56,   57,   17,
       56,   57,   17,   56,   57,   17,   56,   57,   17,   56,
       57,   17,   56,   57,   17,   56,   57,   17,   56,   57,
       17,   56,   57,   17,   56,   57,   17,   56,   57,   17,
       56,   57,   17,   56,   57,   17,   56,   57,   17,   56,
       57,   17,   56,   57,   17,   56,   57,   17,   56,   57,
       17,   56,   57,   17,   56,   57,   17,   56,   57,   17,
       56,   57,   25,   55,   56,   57,   24,   54,   57,   18,

       55,   56,   57,   23,   54,   57,   22,   53,   56,   57,
       21,   56,   57,   21,   56,   57,   21,   56,   57,   21,
       56,   57,   21,   56,   57,   21,   56,   57,   21,   56,
       57,   21,   56,   57,   21,   56,   57,   21,   56,   57,
       21,   56,   57,   21,   56,   57,   21,   56,   57,   21,
       56,   57,   21,   56,   57,   21,   56,   57,   21,   56,
       57,   21,   56,   57,   21,   56,   57,   21,   56,   57,
       21,   56,   57,   21,   56,   57,   55,   56,   57,16410,
       27,   54,   57, 8220,   56,   57, 8220,   53,   56,   57,
     8220,   56,   57, 8220,   56,   57, 8220,   56,   57,   36,

       37,   56,   57,   36,   37,   55,   56,   57,   37,   52,
       56,   57,   36,   37,   53,   56,   57,   35,   37,   51,
       56,   57,   36,   37,   56,   57,   36,   37,   56,   57,
       37,   56,   57,   36,   37,   56,   57,   42,   43,   56,
       57,   42,   43,   55,   56,   57,   41,   43,   52,   56,
       57,   42,   43,   53,   56,   57,   43,   51,   56,   57,
       42,   43,   56,   57,   42,   43,   56,   57,   43,   56,
       57,   42,   43,   56,   57,   46,   48,   56,   57,   46,
       48,   55,   56,   57,   46,   47,   54,   57,   46,   48,
       52,   56,   57,   46,   48,   53,   56,   57,   46,   48,

       51,   56,   57,   46,   48,   56,   57,   46,   48,   56,
       57,   48,   56,   57,   46,   48,   56,   57,   55,   53,
       52,   51,   17,   30,   17,   30,   17,   30,   17,   30,
       17,   30,   17,   30,   15,   17,   30,   17,   30,   17,
       30,   17,   30,   17,   30,   17,   30,   17,   30,   17,
       30,   17,   30,   17,   30,   17,   30,   16,   17,   30,
       17,   30,   16,   17,   30,   17,   30,   17,   30,   17,
       30,   17,   30,   17,   30,   17,   30,   17,   30,   17,
       30,   17,   30,   17,   30,   55,   10,    9,    9,   12,
       11,   55,   12,   12,   53,   12,   12,   12,   52,   12,

       51,   12,    5,    5,    6,   55,    7,    7,   17,   17,
       17,   17,   17,   17,   15,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   16,   17,   17,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   25,   55,   24,   18,   55,   22,   53,   21,   21,
       21,   21,   21,   19,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   20,   21,   21,   20,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   55,
    16410,   27, 8218,   36,   36,   55,   36,   53,   52,   36,
       33,   33,   32,   42,   42,   55,   42,   53,   51,   42,

       39,   39,   38,   46,   46,   55,   46,   46,   53,   53,
       46,   46,   50,   49,   17,   30,   17,   30,   17,   30,
       17,   30,   17,   30,   17,   30,   17,   30,   15,   17,
       30,   17,   30,   17,   30,   17,   30,   17,   30,   17,
       30,   17,   30,   17,   30,   17,   30,   17,   30,   17,
       30,   17,   30,   17,   30,   17,   30,   17,   30,   17,
       30,   12,   50,   12,   49,   17,   17,   17,   17,   17,
       17,   17,   15,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   21,
       21,   21,   21,   21,   21,   19,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   34,   50,   40,   49,   44,   50,   45,   49,   17,
       30,    3,   17,   30,   15,   17,   30,   17,   30,   17,
       30,   17,   30,   17,   30,    1,   17,   30,   17,   30,
       17,   30,   17,   30,   17,   30,   17,   30,   17,   30,
       17,   30,   17,   30,   17,   30,   17,   30,   17,    3,
       17,   15,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   17,   30,   15,   17,   30,   17,   30,

       17,   30,   17,   30,   17,   30,   17,   30,   17,   30,
       17,   30,   17,   15,   17,   17,   17,   17,   17,   17,
       17,   17,   21,   21,   21,   21,   21,   21,   21,   21,
        2,   17,   30,   17,   30,    4,   17,   17,   21,   21,
       17,   30,    4,   17,   21
    } ;

static yyconst flex_int16_t yy_accept[498] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    6,    9,   11,   14,   17,   20,   22,   24,
       26,   29,   33,   37,   41,   45,   49,   53,   57,   61,
       65,   69,   73,   77,   81,   85,   89,   93,   97,  101,
      105,  109,  113,  117,  121,  125,  128,  131,  134,  137,
      140,  143,  146,  150,  154,  158,  162,  165,  169,  172,
      175,  178,  181,  184,  187,  190,  193,  196,  200,  203,
      206,  209,  212,  215,  218,  221,  224,  227,  230,  233,

      236,  239,  242,  245,  248,  251,  254,  257,  260,  263,
      266,  269,  272,  275,  278,  281,  284,  287,  290,  293,
      297,  300,  304,  307,  311,  314,  317,  320,  323,  326,
      329,  332,  335,  338,  341,  344,  347,  350,  353,  356,
      359,  362,  365,  368,  371,  374,  377,  381,  384,  387,
      391,  394,  397,  400,  404,  409,  413,  418,  423,  427,
      431,  434,  438,  442,  447,  452,  457,  461,  465,  469,
      472,  476,  480,  485,  489,  494,  499,  504,  508,  512,
      515,  519,  520,  520,  521,  521,  522,  523,  523,  525,
      527,  529,  531,  533,  535,  538,  540,  542,  544,  546,

      548,  550,  552,  554,  556,  558,  561,  563,  566,  568,
      570,  572,  574,  576,  578,  580,  582,  584,  586,  587,
      588,  589,  590,  591,  593,  594,  596,  597,  598,  600,
      602,  603,  604,  605,  607,  608,  609,  610,  611,  612,
      613,  614,  615,  617,  618,  619,  620,  621,  622,  623,
      624,  625,  626,  627,  629,  630,  632,  633,  634,  635,
      636,  637,  638,  639,  640,  641,  642,  644,  645,  647,
      649,  650,  651,  652,  653,  654,  656,  657,  658,  659,
      660,  661,  662,  663,  664,  665,  666,  668,  669,  671,
      672,  673,  674,  675,  676,  677,  678,  679,  680,  682,

      683,  684,  685,  687,  687,  689,  690,  691,  692,  693,
      694,  695,  697,  699,  699,  700,  701,  702,  703,  704,
      705,  705,  707,  708,  710,  711,  712,  713,  714,  715,
      717,  719,  721,  723,  725,  727,  729,  732,  734,  736,
      738,  740,  742,  744,  746,  748,  750,  752,  754,  756,
      758,  760,  762,  764,  766,  767,  768,  769,  770,  771,
      772,  773,  775,  776,  777,  778,  779,  780,  781,  782,
      783,  784,  785,  786,  787,  788,  789,  790,  791,  792,
      793,  794,  795,  796,  798,  799,  800,  801,  802,  803,
      804,  805,  806,  807,  808,  809,  810,  811,  812,  814,

      814,  816,  816,  818,  820,  822,  825,  828,  830,  832,
      834,  836,  837,  839,  841,  843,  845,  847,  849,  851,
      853,  855,  857,  859,  860,  862,  864,  865,  866,  867,
      868,  869,  870,  871,  872,  873,  874,  875,  876,  877,
      878,  879,  880,  881,  882,  883,  884,  885,  886,  887,
      888,  889,  890,  891,  892,  893,  894,  896,  899,  901,
      903,  905,  907,  909,  911,  913,  913,  914,  916,  917,
      918,  919,  920,  921,  922,  923,  924,  925,  926,  927,
      928,  929,  930,  931,  932,  934,  936,  937,  938,  939,
      940,  941,  943,  944,  945,  946,  946

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    4,    4,    7,    8,
        9,    4,    4,   10,    4,   11,    4,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    4,    4,
        4,    4,    1,    1,   14,   14,   14,   14,   14,   15,
       14,   14,   14,   14,   14,   14,   14,   16,   14,   14,
       14,   17,   14,   18,   19,   14,   14,   14,   14,   14,
        4,   20,    4,    1,   21,    4,   22,   23,   24,   25,

       26,   27,   28,   29,   30,   14,   31,   32,   33,   34,
       35,   36,   14,   37,   38,   39,   40,   14,   41,   42,
       43,   14,    4,    4,    4,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[44] =
    {   0,
        1,    2,    3,    4,    5,    4,    5,    2,    2,    4,
        4,    6,    2,    7,    7,    7,    7,    7,    7,    8,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[524] =
    {   0,
        0,   39,   79,    0,  122,    0,  165,    0,  208,    0,
      251,    0,  294,    0,    6,    8,  337,    0,  380,  420,
        0,    0,    0,    0,  459,  498,  537,  576,  615,  654,
     1136, 1137, 1133, 1137, 1129,    0, 1126,    7,   11,   15,
     1137,    0, 1110, 1096,    8, 1093,   16,    0, 1092,    4,
     1102,   15,   24, 1095,   33, 1104, 1090, 1087,   13,  383,
     1097, 1085,  387, 1092, 1090,   22, 1137,    0,   20,  391,
      395,    0, 1117, 1113,   60, 1110, 1137,    0, 1137,  694,
      714,   12,   14,    0,   58,  396,  431, 1114, 1137, 1137,
        0,   65,  435,  436, 1137,    0, 1093, 1079,   70, 1076,

      470,   40, 1075,  375, 1085,  374,  354, 1078,  417, 1087,
     1073, 1070,  392,  462, 1080, 1068,  475, 1075, 1073,  416,
     1137, 1100, 1137,    0,    0, 1079,  388, 1063,  476,  377,
     1062,  399, 1072,  403,  419, 1065,  464, 1074, 1060, 1057,
      437,  501, 1056,  504, 1063, 1061,  444, 1137, 1137,    0,
      509,  515,  529,    0, 1088, 1084,  540, 1081,  519,  548,
      468,  554,    0, 1085, 1081,  543, 1078,  523,  563,  483,
      582, 1064,  517, 1063, 1077,  581, 1074,  544,  587,  526,
      621, 1078, 1074,    0, 1071, 1072, 1069,  562,    0, 1043,
     1040, 1033,  568, 1047, 1033, 1044, 1047, 1034, 1040,  560,

     1042, 1031, 1027, 1028, 1027,    0, 1025,    0, 1027, 1020,
     1020, 1027, 1026, 1016, 1022, 1010, 1022, 1025,  487, 1137,
        0,  598,    0, 1048, 1044,  631, 1041,  601, 1042, 1039,
        0,    0,  604, 1043,    0,  605,    0, 1012, 1009, 1002,
      618, 1016, 1002, 1013, 1016, 1003, 1009,  599, 1011, 1000,
      996,  997,  996,    0,  994,    0,  996,  989,  989,  996,
      995,  985,  991,  979,  991,  994,  612, 1137, 1017,    0,
        0,  986,  977,  638,  991,  977,  988,  991,  978,  984,
      612,  986,  975,  971,  972,  971,    0,  969,    0,  971,
      964,  964,  971,  970,  960,  955,  967,  970,  628, 1137,

     1137,    0,  993,  989,  642,  988,  641, 1137,  651, 1137,
        0,  990,  658,  984,  983,  659, 1137,  665, 1137,  969,
      672,  556,  983,  677,  984,  979,  665, 1137, 1137,  947,
      958,  957,  956,  959,  942,  940,  976,  950,  950,  949,
      952,  940,  949,  936,  947,  931,  934,  929,  926,  938,
      932,  931,    0,    0,  924,  935,  934,  933,  936,  919,
      917,  953,  927,  927,  926,  929,  917,  926,  913,  924,
      908,  911,  906,  903,  915,  909,  908,  901,  912,  911,
      914,  897,  895,    0,  906,  906,  905,  908,  896,  905,
      892,  903,  887,  890,  885,  882,  889,  888, 1137,  684,

     1137,  686, 1137, 1137,  893,    0,    0,  881,  886,  878,
      885,  912,  877,  880,  889,  873,  884,  869,  881,  869,
      894,  878,  878,  876,    0,    0,  864,  869,  861,  868,
      848,  834,  839,  822,  818,  799,  810,  793,  808,  779,
      779,  771,  752,  757,  739,  703,  696,  699,  708,  692,
      703,  688,  700,  686,  696,  692,  677,  711,  678,  672,
      678,  677,  669,  685,  672,    0,  664,  700,  662,  654,
      660,  658,  644,  659,  642,  630,  617,  597,  595,  570,
      558,  550,  528,  523,  470,  451,    0,  450,  420,  418,
      387,   38,    0,   29,   17, 1137,  734,  742,  750,  758,

      766,  774,  777,  779,  786,  794,  802,  805,  807,  809,
      816,  819,  825,  833,  840,  848,  856,  863,  871,  879,
      887,   19,  890
    } ;

static yyconst flex_int16_t yy_def[524] =
    {   0,
      497,  497,  496,    3,  496,    5,  496,    7,  496,    9,
      496,   11,  496,   13,    2,    2,  496,   17,  498,  498,
        2,    2,    2,    2,  499,  499,  500,  500,  501,  501,
      496,  496,  496,  496,  496,  502,  496,  496,  496,  496,
      496,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  496,  496,  504,  504,  504,
      504,  505,  496,  505,  506,  505,  496,  505,  496,  507,
      507,   81,   81,  508,  508,  508,  508,  496,  496,  496,
      509,  509,  509,  509,  496,  510,  510,  510,  510,  510,

      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  496,
      496,  496,  496,  511,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  513,  496,  496,  502,
      496,  496,  496,  514,  514,  496,  515,  496,  514,  514,
      516,  514,  517,  517,  496,  518,  496,  517,  517,  519,
      517,  520,  520,  520,  496,  521,  496,  520,  520,  520,
      520,  496,  496,  502,  496,  496,  496,  496,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  496,  496,
      504,  504,  505,  496,  505,  506,  505,   81,  505,  505,
       81,  508,  508,  496,  509,  509,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  496,  496,  496,  511,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  513,  496,

      496,  514,  514,  496,  515,  496,  514,  496,  496,  496,
      517,  517,  518,  496,  496,  517,  496,  496,  496,  520,
      520,  520,  496,  521,  521,  496,  520,  496,  496,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  505,  505,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  496,  496,

      496,  496,  496,  496,  503,  503,  503,  503,  503,  503,
      503,  496,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  522,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  512,  512,  512,  512,  512,
      512,  512,  512,  496,  503,  503,  523,  510,  510,  512,
      512,  503,  523,  510,  512,    0,  496,  496,  496,  496,

      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496
    } ;

static yyconst flex_int16_t yy_nxt[1181] =
    {   0,
      496,   33,   34,  496,   35,   36,   37,  120,  121,  120,
      121,  186,  186,  187,  187,  186,   38,  187,   39,  186,
      186,  187,  187,  219,  186,  487,  187,  188,  231,  220,
      231,  188,  193,  194,  211,  197,   38,  195,  198,   40,
       33,   34,  289,   35,   36,   37,  200,  188,  231,  212,
      231,  188,  193,  202,  256,   38,  201,   39,  203,  206,
      204,  184,  186,  208,  187,  207,  208,  184,  184,  186,
      208,  187,  184,  242,  186,   38,  187,  243,   40,   32,
       33,   41,   32,   35,   36,   37,   32,   32,   32,   32,
       32,   32,   42,   43,   44,   45,   46,   47,   32,   42,

       48,   49,   50,   51,   52,   53,   54,   42,   55,   42,
       56,   42,   57,   58,   59,   60,   61,   62,   63,   64,
       42,   65,   32,   66,   34,   32,   35,   36,   37,   67,
       32,   32,   32,   32,   32,   68,   68,   68,   69,   68,
       70,   32,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   69,   68,
       68,   71,   68,   68,   68,   72,   73,   34,   72,   74,
       75,   76,   32,   77,   78,   72,   72,   79,   80,   80,
       80,   81,   80,   82,   72,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   81,   80,   80,   83,   80,   80,   80,   32,   33,
       34,   32,   35,   36,   37,   32,   32,   32,   32,   32,
       32,   84,   84,   84,   85,   84,   86,   32,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   85,   84,   84,   87,   84,   84,
       84,   32,   88,   34,   32,   35,   36,   37,   89,   89,
       89,   32,   32,   90,   91,   91,   91,   92,   91,   93,
       32,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   92,   91,   91,
       94,   91,   91,   91,   32,   33,   95,   32,   35,   36,

       37,   32,   32,   32,   32,   32,   32,   96,   97,   98,
       99,  100,  101,   32,   96,  102,  103,  104,  105,  106,
      107,  108,   96,  109,   96,  110,   96,  111,  112,  113,
      114,  115,  116,  117,  118,   96,  119,   32,  122,  123,
       32,   35,  124,   37,   32,   32,   32,   32,   32,   32,
      125,  126,  125,  127,  128,  129,   32,  125,  130,  131,
      132,  133,  134,  135,  136,  125,  137,  125,  138,  125,
      139,  140,  141,  142,  125,  143,  144,  145,  125,  146,
       32,  147,  148,  250,   35,  150,   37,  186,  251,  187,
      252,  186,  186,  187,  187,  186,  151,  187,  152,  186,

      186,  187,  187,  193,  213,  248,  245,  222,  214,  246,
      275,  222,  233,  259,  276,  249,  151,  267,  268,  153,
       32,  147,  148,  193,   35,  150,   37,  222,  260,  289,
      278,  222,  233,  279,  281,  186,  151,  187,  152,  186,
      186,  187,  187,  254,  282,  299,  300,  233,  283,  255,
      256,  236,  236,  284,  256,  285,  151,  495,  292,  153,
      155,   34,  256,  156,  157,  158,  186,  233,  187,  309,
      310,  236,  236,  293,  186,  159,  187,  160,  161,  186,
      186,  187,  187,  261,  318,  319,  241,  262,  219,  494,
      287,  241,  274,  208,  220,  159,  288,  289,  162,  155,

       34,  289,  156,  157,  158,  186,  241,  187,  186,  492,
      187,  241,  274,  186,  159,  187,  160,  161,  322,  186,
      274,  187,  294,  306,  484,  187,  295,  186,  496,  315,
      320,  188,  320,  186,  159,  187,  321,  162,  164,   34,
      274,  165,  166,  167,  184,  188,  184,  184,  186,  184,
      187,  188,  306,  168,  187,  169,  170,  322,  306,  184,
      187,  289,  184,  321,  307,  188,  186,  186,  187,  315,
      307,  384,  186,  168,  187,  321,  171,  164,   34,  316,
      165,  166,  167,  320,  307,  184,  186,  184,  315,  338,
      307,  186,  168,  187,  169,  170,  384,  339,  316,  316,

      325,  384,  186,  327,  187,  223,  321,  223,  186,  186,
      187,  187,  168,  267,  268,  171,  173,  174,  316,  175,
      176,  177,  186,  327,  187,  186,  491,  187,  363,  299,
      300,  178,  184,  179,  180,  289,  364,  327,  184,  184,
      321,  385,  186,  184,  187,  306,  184,  187,  184,  386,
      490,  178,  400,  310,  181,  173,  174,  327,  175,  176,
      177,  184,  184,  186,  184,  315,  402,  319,  384,  186,
      178,  187,  179,  180,  496,  256,  320,  184,  320,  320,
      426,  184,  426,  184,  321,  400,  310,  402,  319,  426,
      178,  489,  256,  181,  223,  488,  325,  223,  223,  223,

      223,  484,  426,  223,  223,  208,  407,  407,  407,  486,
      208,  485,  484,  223,  223,  407,  289,  223,  229,  223,
      230,  289,  483,  223,  223,  289,  289,  482,  481,  480,
      479,  478,  477,  223,   32,   32,   32,   32,   32,   32,
       32,   32,  149,  149,  149,  149,  149,  149,  149,  149,
      154,  154,  154,  154,  154,  154,  154,  154,  163,  163,
      163,  163,  163,  163,  163,  163,  172,  172,  172,  172,
      172,  172,  172,  172,  184,  184,  384,  184,  184,  184,
      184,  184,  189,  189,  221,  221,  223,  289,  476,  223,
      223,  223,  223,  223,  226,  226,  384,  226,  226,  226,

      226,  226,  228,  256,  256,  228,  228,  228,  228,  228,
      232,  232,  235,  235,  237,  237,  270,  270,  466,  270,
      270,  270,  270,  270,  271,  271,  301,  301,  301,  475,
      301,  301,  301,  302,  302,  256,  302,  256,  302,  302,
      305,  305,  474,  305,  305,  305,  305,  305,  308,  308,
      308,  308,  308,  308,  308,  308,  311,  311,  473,  311,
      472,  311,  311,  313,  313,  471,  313,  313,  313,  313,
      313,  317,  317,  317,  317,  317,  317,  317,  317,  320,
      320,  320,  320,  470,  320,  320,  320,  324,  324,  324,
      324,  324,  324,  324,  324,  493,  493,  469,  468,  256,

      467,  426,  208,  208,  466,  465,  208,  208,  464,  463,
      462,  461,  460,  412,  459,  458,  208,  457,  407,  456,
      455,  454,  453,  452,  289,  451,  450,  449,  384,  448,
      447,  289,  289,  446,  445,  444,  443,  384,  442,  441,
      440,  439,  438,  437,  436,  256,  435,  434,  433,  426,
      432,  431,  256,  256,  412,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  418,  208,  417,
      416,  415,  407,  414,  413,  208,  208,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  496,  403,  321,  314,
      401,  312,  304,  399,  303,  398,  397,  289,  396,  395,

      394,  393,  289,  392,  391,  390,  389,  289,  388,  387,
      384,  383,  382,  381,  380,  289,  379,  378,  269,  377,
      376,  256,  375,  374,  373,  372,  371,  256,  370,  369,
      368,  367,  256,  366,  365,  362,  361,  360,  359,  358,
      256,  357,  356,  355,  234,  227,  225,  354,  353,  224,
      352,  351,  208,  350,  349,  348,  347,  346,  208,  345,
      344,  343,  342,  208,  341,  340,  337,  336,  335,  334,
      333,  208,  332,  331,  330,  185,  183,  329,  328,  182,
      326,  323,  321,  321,  314,  183,  312,  185,  304,  303,
      298,  297,  296,  289,  291,  290,  286,  280,  277,  273,

      272,  269,  266,  265,  264,  263,  256,  258,  257,  253,
      247,  244,  240,  239,  238,  234,  227,  225,  224,  218,
      217,  216,  215,  208,  210,  209,  205,  199,  196,  192,
      191,  190,  185,  183,  182,  496,   31,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496
    } ;

static yyconst flex_int16_t yy_chk[1181] =
    {   0,
        0,    1,    1,    0,    1,    1,    1,   15,   15,   16,
       16,   38,   45,   38,   45,   39,    1,   39,    1,   40,
       47,   40,   47,   66,   69,  522,   69,   39,   82,   66,
       83,   40,   47,   48,   59,   50,    1,   48,   50,    1,
        2,    2,  495,    2,    2,    2,   52,   39,   82,   59,
       83,   40,   47,   53,  494,    2,   52,    2,   53,   55,
       53,   75,   85,  492,   85,   55,   55,   75,   75,   92,
       55,   92,   75,  102,   99,    2,   99,  102,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       19,   19,   19,  107,   19,   19,   19,   60,  107,   60,
      107,   63,  127,   63,  127,   70,   19,   70,   19,   71,

       86,   71,   86,   63,   60,  106,  104,   70,   60,  104,
      130,   71,   86,  113,  130,  106,   19,  120,  120,   19,
       20,   20,   20,   63,   20,   20,   20,   70,  113,  491,
      132,   71,   86,  132,  134,   87,   20,   87,   20,   93,
       94,   93,   94,  109,  134,  147,  147,   87,  135,  109,
      109,   93,   94,  135,  109,  135,   20,  490,  141,   20,
       25,   25,  489,   25,   25,   25,  114,   87,  114,  161,
      161,   93,   94,  141,  101,   25,  101,   25,   25,  117,
      129,  117,  129,  114,  170,  170,  101,  114,  219,  488,
      137,  117,  129,  486,  219,   25,  137,  137,   25,   26,

       26,  137,   26,   26,   26,  142,  101,  142,  144,  485,
      144,  117,  129,  151,   26,  151,   26,   26,  173,  152,
      144,  152,  142,  159,  484,  159,  142,  168,  180,  168,
      180,  152,  180,  153,   26,  153,  173,   26,   27,   27,
      144,   27,   27,   27,  157,  153,  157,  166,  178,  166,
      178,  152,  160,   27,  160,   27,   27,  322,  162,  157,
      162,  483,  166,  178,  160,  153,  188,  169,  188,  169,
      162,  482,  193,   27,  193,  322,   27,   28,   28,  169,
       28,   28,   28,  176,  160,  176,  171,  176,  171,  200,
      162,  179,   28,  179,   28,   28,  481,  200,  171,  169,

      176,  480,  222,  179,  222,  228,  179,  228,  233,  236,
      233,  236,   28,  267,  267,   28,   29,   29,  171,   29,
       29,   29,  241,  179,  241,  181,  479,  181,  248,  299,
      299,   29,  226,   29,   29,  478,  248,  181,  226,  226,
      181,  281,  274,  226,  274,  307,  305,  307,  305,  281,
      477,   29,  309,  309,   29,   30,   30,  181,   30,   30,
       30,  305,  313,  316,  313,  316,  318,  318,  476,  327,
       30,  327,   30,   30,  321,  475,  321,  313,  321,  324,
      474,  324,  473,  324,  327,  400,  400,  402,  402,  472,
       30,  471,  470,   30,   80,  469,  324,   80,   80,   80,

       80,  468,  467,   80,   80,  465,  464,  463,  462,  461,
      460,  459,  458,   80,   81,  457,  456,   81,   81,   81,
       81,  455,  454,   81,   81,  453,  452,  451,  450,  449,
      448,  447,  446,   81,  497,  497,  497,  497,  497,  497,
      497,  497,  498,  498,  498,  498,  498,  498,  498,  498,
      499,  499,  499,  499,  499,  499,  499,  499,  500,  500,
      500,  500,  500,  500,  500,  500,  501,  501,  501,  501,
      501,  501,  501,  501,  502,  502,  445,  502,  502,  502,
      502,  502,  503,  503,  504,  504,  505,  444,  443,  505,
      505,  505,  505,  505,  506,  506,  442,  506,  506,  506,

      506,  506,  507,  441,  440,  507,  507,  507,  507,  507,
      508,  508,  509,  509,  510,  510,  511,  511,  439,  511,
      511,  511,  511,  511,  512,  512,  513,  513,  513,  438,
      513,  513,  513,  514,  514,  437,  514,  436,  514,  514,
      515,  515,  435,  515,  515,  515,  515,  515,  516,  516,
      516,  516,  516,  516,  516,  516,  517,  517,  434,  517,
      433,  517,  517,  518,  518,  432,  518,  518,  518,  518,
      518,  519,  519,  519,  519,  519,  519,  519,  519,  520,
      520,  520,  520,  431,  520,  520,  520,  521,  521,  521,
      521,  521,  521,  521,  521,  523,  523,  430,  429,  428,

      427,  424,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  405,  398,
      397,  396,  395,  394,  393,  392,  391,  390,  389,  388,
      387,  386,  385,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  326,  325,  323,  320,  315,
      314,  312,  306,  304,  303,  298,  297,  296,  295,  294,

      293,  292,  291,  290,  288,  286,  285,  284,  283,  282,
      280,  279,  278,  277,  276,  275,  273,  272,  269,  266,
      265,  264,  263,  262,  261,  260,  259,  258,  257,  255,
      253,  252,  251,  250,  249,  247,  246,  245,  244,  243,
      242,  240,  239,  238,  234,  230,  229,  227,  225,  224,
      218,  217,  216,  215,  214,  213,  212,  211,  210,  209,
      207,  205,  204,  203,  202,  201,  199,  198,  197,  196,
      195,  194,  192,  191,  190,  187,  186,  185,  183,  182,
      177,  175,  174,  172,  167,  165,  164,  158,  156,  155,
      146,  145,  143,  140,  139,  138,  136,  133,  131,  128,

      126,  122,  119,  118,  116,  115,  112,  111,  110,  108,
      105,  103,  100,   98,   97,   88,   76,   74,   73,   65,
       64,   62,   61,   58,   57,   56,   54,   51,   49,   46,
       44,   43,   37,   35,   33,   31,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496
    } ;

extern int pycodeYY_flex_debug;
int pycodeYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up pycodeYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pycodeYYtext;
#line 1 "pycode.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2011 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */
#line 26 "pycode.l"

#include <stdio.h>
#include <qvaluestack.h>

#include "pycode.h"
#include "message.h"

#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "outputlist.h"
#include "util.h"
#include "membername.h"
#include "searchindex.h"

#define YY_NEVER_INTERACTIVE 1

static ClassSDict    g_codeClassSDict(17);
static QCString      g_curClassName;
static QStrList      g_curClassBases;


static CodeOutputInterface * g_code;
static const char *  g_inputString;     //!< the code fragment as text
static int	     g_inputPosition;   //!< read offset during parsing 
static const char *  g_currentFontClass;
static bool          g_needsTermination;
static int           g_inputLines;      //!< number of line in the code fragment
static int	     g_yyLineNr;        //!< current line number
static FileDef *     g_sourceFileDef;
static Definition *  g_currentDefinition;
static MemberDef *   g_currentMemberDef;
static bool          g_includeCodeFragment;
static QCString      g_realScope;
static bool          g_insideBody;
static int           g_bodyCurlyCount;
static bool          g_searchingForBody;
static QCString      g_classScope;
static int           g_paramParens;
//static int           g_anchorCount;

static bool          g_exampleBlock;
static QCString      g_exampleName;
static QCString      g_exampleFile;

static QCString      g_type;
static QCString      g_name;

static bool          g_doubleStringIsDoc;
static bool          g_doubleQuote;
static bool          g_noSuiteFound;
static int           g_stringContext;

static QValueStack<uint> g_indents;  //!< Tracks indentation levels for scoping in python

static void endFontClass();
static void adjustScopesAndSuites(unsigned indentLength);


/*! Represents a stack of variable to class mappings as found in the
 *  code. Each scope is enclosed in pushScope() and popScope() calls.
 *  Variables are added by calling addVariables() and one can search
 *  for variable using findVariable().
 */
class PyVariableContext 
{
  public:
    static const ClassDef *dummyContext;    
    class Scope : public SDict<ClassDef> 
    {
      public:
	Scope() : SDict<ClassDef>(17) {}
    };
    
    PyVariableContext() 
    {
      m_scopes.setAutoDelete(TRUE);
    }

    virtual ~PyVariableContext() 
    {
    }
    
    void pushScope() 
    {
      m_scopes.append(new Scope);
    }

    void popScope() 
    {
      if (m_scopes.count()>0) 
      {
	m_scopes.remove(m_scopes.count()-1);
      }
    }

    void clear() 
    {
      m_scopes.clear();
      m_globalScope.clear();
    }

    void clearExceptGlobal() 
    {
      m_scopes.clear();
    }

    void addVariable(const QCString &type,const QCString &name);
    ClassDef *findVariable(const QCString &name);
    
  private:
    Scope        m_globalScope;
    QList<Scope> m_scopes;
};

void PyVariableContext::addVariable(const QCString &type,const QCString &name)
{
  //printf("PyVariableContext::addVariable(%s,%s)\n",type.data(),name.data());
  QCString ltype = type.simplifyWhiteSpace();
  QCString lname = name.simplifyWhiteSpace();

  Scope *scope = m_scopes.count()==0 ? &m_globalScope : m_scopes.getLast();
  ClassDef *varType;
  if (
      (varType=g_codeClassSDict[ltype]) ||  // look for class definitions inside the code block
      (varType=getResolvedClass(g_currentDefinition,g_sourceFileDef,ltype)) // look for global class definitions
     ) 
  {
    scope->append(lname,varType); // add it to a list
  }
  else 
  {
    if (m_scopes.count()>0) // for local variables add a dummy entry so the name 
                            // is hidden to avoid FALSE links to global variables with the same name
                            // TODO: make this work for namespaces as well!
    {
      scope->append(lname,dummyContext);
    }
  }
}

ClassDef *PyVariableContext::findVariable(const QCString &name)
{
  if (name.isEmpty()) return 0;
  ClassDef *result = 0;
  QListIterator<Scope> sli(m_scopes);
  Scope *scope;
  // search from inner to outer scope
  for (sli.toLast();(scope=sli.current());--sli)
  {
    result = scope->find(name);
    if (result) 
    {
      return result;
    }
  }
  // nothing found -> also try the global scope
  result=m_globalScope.find(name);
  return result;
}

static PyVariableContext g_theVarContext;
const ClassDef *PyVariableContext::dummyContext = (ClassDef*)0x8;

class PyCallContext
{
  public:
    struct Ctx
    {
      Ctx() : name(g_name), type(g_type), cd(0) {}
      QCString name;
      QCString type;
      ClassDef *cd;
    };

    PyCallContext() 
    {
      m_classList.append(new Ctx);
      m_classList.setAutoDelete(TRUE);
    }

    virtual ~PyCallContext() {}

    void setClass(ClassDef *cd)
    {
      Ctx *ctx = m_classList.getLast();
      if (ctx) 
      {
        ctx->cd=cd;
      }
    }
    void pushScope()
    {
      m_classList.append(new Ctx);
    }

    void popScope()
    {
      if (m_classList.count()>1)
      {
	Ctx *ctx = m_classList.getLast();
	if (ctx)
	{
	  g_name = ctx->name;
	  g_type = ctx->type;
	}
	m_classList.removeLast();
      }
      else
      {
      }
    }

    void clear()
    {
      m_classList.clear();
      m_classList.append(new Ctx);
    }

    ClassDef *getClass() const
    {
      Ctx *ctx = m_classList.getLast();

      if (ctx)
        return ctx->cd;
      else
        return 0;
    }

  private:
    QList<Ctx> m_classList;    
};

static PyCallContext g_theCallContext;


/*! counts the number of lines in the input */
static int countLines()
{
  const char *p=g_inputString;
  char c;
  int count=1;
  while ((c=*p)) 
  { 
    p++ ; 
    if (c=='\n') count++;  
  }
  if (p>g_inputString && *(p-1)!='\n') 
  { // last line does not end with a \n, so we add an extra
    // line and explicitly terminate the line after parsing.
    count++, 
    g_needsTermination=TRUE; 
  } 
  return count;
}

static void setCurrentDoc(const QCString &name,const QCString &base,const QCString &anchor="")
{
  if (Doxygen::searchIndex)
  {
    Doxygen::searchIndex->setCurrentDoc(name,base,anchor);
  }
}

static void addToSearchIndex(const char *text)
{
  if (Doxygen::searchIndex)
  {
    Doxygen::searchIndex->addWord(text,FALSE);
  }
}


static ClassDef *stripClassName(const char *s)
{
  int pos=0;
  QCString type = s;
  QCString className;
  QCString templSpec;
  while (extractClassNameFromType(type,pos,className,templSpec)!=-1)
  {
    QCString clName=className+templSpec;

    ClassDef *cd=0;
    if (!g_classScope.isEmpty())
    {
      cd=getResolvedClass(g_currentDefinition,g_sourceFileDef,g_classScope+"::"+clName);
    }
    if (cd==0)
    {
      cd=getResolvedClass(g_currentDefinition,g_sourceFileDef,clName);
    }
    if (cd)
    {
      return cd;
    }
  }

  return 0;
}



/*! start a new line of code, inserting a line number if g_sourceFileDef
 * is TRUE. If a definition starts at the current line, then the line
 * number is linked to the documentation of that definition.
 */
static void startCodeLine()
{
  //if (g_currentFontClass) { g_code->endFontClass(); }
  if (g_sourceFileDef)
  {
    //QCString lineNumber,lineAnchor;
    //lineNumber.sprintf("%05d",g_yyLineNr);
    //lineAnchor.sprintf("l%05d",g_yyLineNr);
   
    Definition *d   = g_sourceFileDef->getSourceDefinition(g_yyLineNr);
    //printf("startCodeLine %d d=%p\n",g_yyLineNr,d);
    //g_code->startLineNumber();
    if (!g_includeCodeFragment && d && d->isLinkableInProject())
    {
      g_currentDefinition = d;
      g_currentMemberDef = g_sourceFileDef->getSourceMember(g_yyLineNr);
      g_insideBody = FALSE;
      g_searchingForBody = TRUE;
      g_realScope = d->name().copy();
      g_classScope = d->name().copy();
      //printf("Real scope: `%s'\n",g_realScope.data());
      g_bodyCurlyCount = 0;
      QCString lineAnchor;
      lineAnchor.sprintf("l%05d",g_yyLineNr);
      if (g_currentMemberDef)
      {
        g_code->writeLineNumber(g_currentMemberDef->getReference(),
	                        g_currentMemberDef->getOutputFileBase(),
	                        g_currentMemberDef->anchor(),g_yyLineNr);
        setCurrentDoc(
                                g_currentMemberDef->qualifiedName(),
	                        g_sourceFileDef->getSourceFileBase(),
	                        lineAnchor);
      }
      else
      {
        g_code->writeLineNumber(d->getReference(),
	                        d->getOutputFileBase(),
	                        0,g_yyLineNr);
        setCurrentDoc(
                                d->qualifiedName(),
	                        g_sourceFileDef->getSourceFileBase(),
	                        lineAnchor);
      }
    }
    else
    {
      //g_code->codify(lineNumber);
      g_code->writeLineNumber(0,0,0,g_yyLineNr);
    }
    //g_code->endLineNumber();
  }
  g_code->startCodeLine(); 
  if (g_currentFontClass)
  {
    g_code->startFontClass(g_currentFontClass);
  }
}

static void codify(const char* text) 
{ 
  g_code->codify(text);
}

static void endCodeLine()
{
  endFontClass();
  g_code->endCodeLine();
}

static void nextCodeLine()
{
  const char *fc = g_currentFontClass;
  endCodeLine();
  if (g_yyLineNr<g_inputLines) 
  {
    g_currentFontClass = fc;
    startCodeLine();
  }
}


/*! writes a link to a fragment \a text that may span multiple lines, inserting
 * line numbers for each line. If \a text contains newlines, the link will be 
 * split into multiple links with the same destination, one for each line.
 */
static void writeMultiLineCodeLink(CodeOutputInterface &ol,
                  const char *ref,const char *file,
                  const char *anchor,const char *text,
                  const char *tooltip)
{
  bool done=FALSE;
  char *p=(char *)text;
  while (!done)
  {
    char *sp=p;
    char c;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
      ol.writeCodeLink(ref,file,anchor,sp,tooltip);
      nextCodeLine();
    }
    else
    {
      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
      ol.writeCodeLink(ref,file,anchor,sp,tooltip);
      done=TRUE;
    }
  }
}


static void codifyLines(char *text)
{
  //printf("codifyLines(%d,\"%s\")\n",g_yyLineNr,text);
  char *p=text,*sp=p;
  char c;
  bool done=FALSE;
  while (!done)
  {
    sp=p;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      g_code->codify(sp);
      nextCodeLine();
    }
    else
    {
      g_code->codify(sp);
      done=TRUE;
    }
  }
}

static void addDocCrossReference(MemberDef *src,MemberDef *dst)
{
  if (dst->isTypedef() || dst->isEnumerate()) return; // don't add types
  //printf("addDocCrossReference src=%s,dst=%s\n",src->name().data(),dst->name().data());
  if ((Config_getBool("REFERENCED_BY_RELATION") || Config_getBool("CALLER_GRAPH")) && 
      (src->isFunction() || src->isSlot()) 
     )
  {
    dst->addSourceReferencedBy(src);
  }
  if ((Config_getBool("REFERENCES_RELATION") || Config_getBool("CALL_GRAPH")) && 
      (src->isFunction() || src->isSlot())
     )
  {
    src->addSourceReferences(dst);
  }

}



static bool getLinkInScope(const QCString &c,  // scope
                           const QCString &m,  // member
			   const char *memberText, // exact text
			   CodeOutputInterface &ol,
			   const char *text
			  )
{
  MemberDef    *md;
  ClassDef     *cd;
  FileDef      *fd;
  NamespaceDef *nd;
  GroupDef     *gd;
  //printf("Trying `%s'::`%s'\n",c.data(),m.data());
  if (getDefs(c,m,"()",md,cd,fd,nd,gd,FALSE,g_sourceFileDef) && 
      md->isLinkable())
  {
    //printf("Found!\n");
    //Definition *d=0;
    //if (cd) d=cd; else if (nd) d=nd; else if (fd) d=fd; else d=gd;

    Definition *d = md->getOuterScope()==Doxygen::globalScope ?
	            md->getBodyDef() : md->getOuterScope();
    if (md->getGroupDef()) d = md->getGroupDef();
    if (d && d->isLinkable())
    {
      g_theCallContext.setClass(stripClassName(md->typeString()));
      //printf("g_currentDefinition=%p g_currentMemberDef=%p g_insideBody=%d\n",
      //        g_currentDefinition,g_currentMemberDef,g_insideBody);

      if (g_currentDefinition && g_currentMemberDef &&
	  md!=g_currentMemberDef && g_insideBody)
      {
	addDocCrossReference(g_currentMemberDef,md);
      }
      //printf("d->getReference()=`%s' d->getOutputBase()=`%s' name=`%s' member name=`%s'\n",d->getReference().data(),d->getOutputFileBase().data(),d->name().data(),md->name().data());
     
      writeMultiLineCodeLink(ol,md->getReference(),
	                        md->getOutputFileBase(),
	                        md->anchor(),
				text ? text : memberText,
                                md->briefDescriptionAsTooltip());
      addToSearchIndex(text ? text : memberText);
      return TRUE;
    } 
  }
  return FALSE;
}

static bool getLink(const char *className,
                    const char *memberName,
		    CodeOutputInterface &ol,
		    const char *text=0)
{
  QCString m=removeRedundantWhiteSpace(memberName);
  QCString c=className;
  if (!getLinkInScope(c,m,memberName,ol,text))
  {
    if (!g_curClassName.isEmpty())
    {
      if (!c.isEmpty()) c.prepend("::");
      c.prepend(g_curClassName);
      return getLinkInScope(c,m,memberName,ol,text);
    }
    return FALSE;
  }
  return TRUE;
}


/*
  For a given string in the source code,
  finds its class or global id and links to it.

  As of June 1, '05, this ONLY finds classes
*/
static void generateClassOrGlobalLink(CodeOutputInterface &ol,char *clName,
                                      bool /*typeOnly*/=FALSE)
{
  QCString className=clName;

  // Don't do anything for empty text
  if (className.isEmpty()) return;

  ClassDef *cd=0,*lcd=0;  /** Class def that we may find */
  MemberDef *md=0;        /** Member def that we may find */
  bool isLocal=FALSE;

  // printf("generateClassOrGlobalLink(className=%s)\n",className.data());

  if ((lcd=g_theVarContext.findVariable(className))==0) // not a local variable
  {
    Definition *d = g_currentDefinition;

    cd = getResolvedClass(d,g_sourceFileDef,className,&md);

    //printf("d=%p g_sourceFileDef=%p\n",d,g_currentDefinition);
    //printf("is found as a type %s\n",cd?cd->name().data():"<null>");

    if (cd==0 && md==0) // also see if it is variable or enum or enum value
    {
      if (getLink(g_classScope,clName,ol,clName))
      {
	return;
      }
    }
  }
  else
  {
    if (lcd!=PyVariableContext::dummyContext) 
    {
      g_theCallContext.setClass(lcd);
    }
    isLocal=TRUE;
    //fprintf(stderr,"is a local variable cd=%p!\n",cd);
  }

  if (cd && cd->isLinkable()) // is it a linkable class
  {
    writeMultiLineCodeLink(ol,cd->getReference(),cd->getOutputFileBase(),cd->anchor(),clName,cd->briefDescriptionAsTooltip());
    addToSearchIndex(className);
    if (md)
    {
      Definition *d = md->getOuterScope()==Doxygen::globalScope ?
                      md->getBodyDef() : md->getOuterScope();
      if (md->getGroupDef()) d = md->getGroupDef();
      if (d && d->isLinkable() && md->isLinkable() && g_currentMemberDef)
      {
        addDocCrossReference(g_currentMemberDef,md);
      }
    }
  }
  else // not a class, maybe a global member
  {

    /*
      This code requires a going-over in order to
      make it work for Python

    //printf("class %s not linkable! cd=%p md=%p typeOnly=%d\n",clName,cd,md,typeOnly);
    if (!isLocal && (md!=0 || (cd==0 && !typeOnly))) // not a class, see if it is a global enum/variable/typedef.
    {
      if (md==0) // not found as a typedef
      {
	md = setCallContextForVar(clName);
	//printf("setCallContextForVar(%s) md=%p g_currentDefinition=%p\n",clName,md,g_currentDefinition);
	if (md && g_currentDefinition)
	{
	  //fprintf(stderr,"%s accessible from %s? %d md->getOuterScope=%s\n",
	  //    md->name().data(),g_currentDefinition->name().data(),
	  //    isAccessibleFrom(g_currentDefinition,g_sourceFileDef,md),
	  //    md->getOuterScope()->name().data());
	}
	     
        if (md && g_currentDefinition && 
	    isAccessibleFrom(g_currentDefinition,g_sourceFileDef,md)==-1)
	{
	  md=0; // variable not accessible
	}
      }
      if (md)
      {
        //printf("is a global md=%p g_currentDefinition=%s\n",md,g_currentDefinition?g_currentDefinition->name().data():"<none>");
	if (md->isLinkable())
	{
	  writeMultiLineCodeLink(ol,md->getReference(),md->getOutputFileBase(),md->anchor(),clName,md->briefDescriptionAsTooltip());
          addToSearchIndex(clName);
	  if (g_currentMemberDef)
	  {
	    addDocCrossReference(g_currentMemberDef,md);
	  }
	  return;
	}
      }
    }

    */
    
    // nothing found, just write out the word
    codifyLines(clName);
    addToSearchIndex(clName);
  }
}

/*
   As of June 1, this function seems to work
   for file members, but scopes are not
   being correctly tracked for classes
   so it doesn't work for classes yet.

*/
static void generateFunctionLink(CodeOutputInterface &ol,char *funcName)
{
  //CodeClassDef *ccd=0;
  ClassDef *ccd=0;
  QCString locScope=g_classScope.copy();
  QCString locFunc=removeRedundantWhiteSpace(funcName);
  //fprintf(stdout,"*** locScope=%s locFunc=%s\n",locScope.data(),locFunc.data());
  int i=locFunc.findRev("::");
  if (i>0)
  {
    locScope=locFunc.left(i);
    locFunc=locFunc.right(locFunc.length()-i-2).stripWhiteSpace();
  }
  //printf("generateFunctionLink(%s) classScope=`%s'\n",locFunc.data(),locScope.data());
  if (!locScope.isEmpty() && (ccd=g_codeClassSDict[locScope]))
  {
    //printf("using classScope %s\n",g_classScope.data());
    if (ccd->baseClasses())
    {
      BaseClassListIterator bcli(*ccd->baseClasses());
      for ( ; bcli.current() ; ++bcli)
      {
	if (getLink(bcli.current()->classDef->name(),locFunc,ol,funcName)) 
	{
	  return;
	}
      }
    }
  }
  if (!getLink(locScope,locFunc,ol,funcName))
  {
    generateClassOrGlobalLink(ol,funcName);
  }
  return;
}

static bool findMemberLink(CodeOutputInterface &ol,Definition *sym,const char *symName)
{
  //printf("sym %s outerScope=%s equal=%d\n",
  //    sym->name().data(),sym->getOuterScope()->name().data(),
  //    sym->getOuterScope()==g_currentDefinition);

  if (sym->getOuterScope() &&
      sym->getOuterScope()->definitionType()==Definition::TypeClass &&
      g_currentDefinition->definitionType()==Definition::TypeClass)
  {
    ClassDef *cd = (ClassDef*)sym->getOuterScope();
    ClassDef *thisCd = (ClassDef *)g_currentDefinition;
    QCString anchor;
    if (sym->definitionType()==Definition::TypeMember)
    {
      anchor=((MemberDef *)sym)->anchor();
    }

    // TODO: find the nearest base class in case cd is a base class of
    // thisCd 
    if (cd==thisCd) 
    {
      writeMultiLineCodeLink(ol,sym->getReference(),
          sym->getOutputFileBase(),
          anchor,
          symName,
          sym->briefDescriptionAsTooltip());
      return TRUE;
    }
  }
  return FALSE;
}

static void findMemberLink(CodeOutputInterface &ol,char *symName)
{
  //printf("Member reference: %s scope=%s member=%s\n",
  //    pycodeYYtext,
  //    g_currentDefinition?g_currentDefinition->name().data():"<none>",
  //    g_currentMemberDef?g_currentMemberDef->name().data():"<none>"
  //    );
  if (g_currentDefinition)
  {
    DefinitionIntf *di = Doxygen::symbolMap->find(symName);
    if (di)
    {
      if (di->definitionType()==DefinitionIntf::TypeSymbolList) // multiple symbols
      {
	DefinitionListIterator dli(*(DefinitionList*)di);
	Definition *sym;
	for (dli.toFirst();(sym=dli.current());++dli)
	{
	  if (findMemberLink(ol,sym,symName)) return;
	}
      }
      else // single symbol
      {
	if (findMemberLink(ol,(Definition*)di,symName)) return;
      }
    }
  }
  //printf("sym %s not found\n",&pycodeYYtext[5]);
  codify(symName);
}

static void startFontClass(const char *s)
{
  endFontClass();
  g_code->startFontClass(s);
  g_currentFontClass=s;
}

static void endFontClass()
{
  if (g_currentFontClass)
  {
    g_code->endFontClass();
    g_currentFontClass=0;
  }
}

#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int c=0;
  while( c < max_size && g_inputString[g_inputPosition] )
  {
    *buf = g_inputString[g_inputPosition++] ;
    c++; buf++;
  }
  return c;
}















#line 1845 "<stdout>"

#define INITIAL 0
#define Body 1
#define FunctionDec 2
#define FunctionParams 3
#define ClassDec 4
#define ClassInheritance 5
#define Suite 6
#define SuiteCaptureIndent 7
#define SuiteStart 8
#define SuiteMaintain 9
#define SuiteContinuing 10
#define LongString 11
#define SingleQuoteString 12
#define DoubleQuoteString 13
#define TripleString 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pycodeYYlex_destroy (void );

int pycodeYYget_debug (void );

void pycodeYYset_debug (int debug_flag  );

YY_EXTRA_TYPE pycodeYYget_extra (void );

void pycodeYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *pycodeYYget_in (void );

void pycodeYYset_in  (FILE * in_str  );

FILE *pycodeYYget_out (void );

void pycodeYYset_out  (FILE * out_str  );

yy_size_t pycodeYYget_leng (void );

char *pycodeYYget_text (void );

int pycodeYYget_lineno (void );

void pycodeYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pycodeYYwrap (void );
#else
extern int pycodeYYwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( pycodeYYtext, pycodeYYleng, 1, pycodeYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pycodeYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pycodeYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pycodeYYin))==0 && ferror(pycodeYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pycodeYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pycodeYYlex (void);

#define YY_DECL int pycodeYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pycodeYYtext and pycodeYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 949 "pycode.l"


#line 2042 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)pycodeYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in pycodeYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pycodeYYin )
			pycodeYYin = stdin;

		if ( ! pycodeYYout )
			pycodeYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pycodeYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pycodeYY_create_buffer(pycodeYYin,YY_BUF_SIZE );
		}

		pycodeYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pycodeYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 497 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1137 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 952 "pycode.l"
{
				        startFontClass("keyword");
					codify(pycodeYYtext);
					endFontClass();
					BEGIN( FunctionDec );
		                    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 959 "pycode.l"
{
				        startFontClass("keyword");
					codify(pycodeYYtext);
					endFontClass();
					BEGIN( ClassDec );
		                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 965 "pycode.l"
{
				        startFontClass("keywordtype");
					codify(pycodeYYtext);
					endFontClass();
				    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 970 "pycode.l"
{
				        codify("self.");
				        findMemberLink(*g_code,&pycodeYYtext[5]);
	                            }
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 976 "pycode.l"
{

					generateClassOrGlobalLink(*g_code,pycodeYYtext);
					// codify(pycodeYYtext);
					g_curClassName = pycodeYYtext;
					g_curClassBases.clear();
					BEGIN( ClassInheritance );
		                    }
	YY_BREAK

case 6:
YY_RULE_SETUP
#line 986 "pycode.l"
{
					codify(pycodeYYtext);
                                    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 990 "pycode.l"
{
                                        // The parser
					// is assuming
					// that ALL identifiers
					// in this state
					// are base classes;
					// it doesn't check to see
					// that the first parenthesis
					// has been seen.

					// This is bad - it should
					// probably be more strict
					// about what to accept.

                                        g_curClassBases.inSort(pycodeYYtext);
					generateClassOrGlobalLink(*g_code,pycodeYYtext);
					// codify(pycodeYYtext);
                                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 1009 "pycode.l"
{
				      codify(pycodeYYtext);

				      // Assume this will
				      // be a one-line suite;
				      // found counter-example
				      // in SuiteStart.

                                      // Push a class scope

                                      ClassDef *classDefToAdd = new ClassDef("<code>",1,g_curClassName,ClassDef::Class,0,0,FALSE);
                                      g_codeClassSDict.append(g_curClassName,classDefToAdd);
                                      char *s=g_curClassBases.first();
                                      while (s) 
				      {
                                        ClassDef *baseDefToAdd;
                                        baseDefToAdd=g_codeClassSDict[s];

					// Try to find class in global
					// scope
					if (baseDefToAdd==0) 
					{
					  baseDefToAdd=getResolvedClass(g_currentDefinition,g_sourceFileDef,s);
					}

					if (baseDefToAdd && baseDefToAdd!=classDefToAdd) 
					{
				          classDefToAdd->insertBaseClass(baseDefToAdd,s,Public,Normal);
					}

                                        s=g_curClassBases.next();
			              }

				      // Reset class-parsing variables.
				      g_curClassName.resize(0);
				      g_curClassBases.clear();
				      
				      g_noSuiteFound = TRUE;
				      BEGIN( SuiteStart );
                                    }
	YY_BREAK


case 9:
YY_RULE_SETUP
#line 1053 "pycode.l"
{
                                        generateFunctionLink(*g_code,pycodeYYtext);
                                    }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 1057 "pycode.l"
{
				        codify(pycodeYYtext);
					BEGIN( FunctionParams );
		                    }
	YY_BREAK


case 11:
YY_RULE_SETUP
#line 1064 "pycode.l"
{
                                         // Parses delimiters
				         codify(pycodeYYtext);
                                    }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1069 "pycode.l"
{
				         codify(pycodeYYtext);
                                    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1073 "pycode.l"
{
                                         codify(pycodeYYtext);
                                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1077 "pycode.l"
{
				      codify(pycodeYYtext);

				      // Assume this will
				      // be a one-line suite;
				      // found counter-example
				      // in SuiteStart.
				      g_noSuiteFound = TRUE;
				      BEGIN( SuiteStart );
                                    }
	YY_BREAK


case 15:
YY_RULE_SETUP
#line 1091 "pycode.l"
{
                                 // Position-sensitive rules!
                                 // Must come AFTER keyword-triggered rules
                                 // Must come BEFORE identifier NONEMPTY-like rules
                                 //   to syntax highlight.

  		                 startFontClass("keyword");
  		                 codify(pycodeYYtext);
		                 endFontClass();
                               }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1102 "pycode.l"
{
  		                 startFontClass("keywordflow");
  		                 codify(pycodeYYtext);
		                 endFontClass();
                               }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1108 "pycode.l"
{
  		                 codify(pycodeYYtext);
			       }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 1117 "pycode.l"
{
                                         codify(pycodeYYtext);
                                       }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1120 "pycode.l"
{
                                          startFontClass("keyword");
					  codifyLines(pycodeYYtext);
		                          endFontClass();

					  // No indentation necesary
					  g_noSuiteFound = FALSE;
                                       }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1129 "pycode.l"
{
                                          startFontClass("keywordflow");
					  codifyLines(pycodeYYtext);
		                          endFontClass();

					  // No indentation necesary
					  g_noSuiteFound = FALSE;
                                       }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1137 "pycode.l"
{
                                         codify(pycodeYYtext);
				       } 
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1142 "pycode.l"
{
                                          // This eats EVERYTHING
					  // except the newline
                                          startFontClass("comment");
					  codifyLines(pycodeYYtext);
		                          endFontClass();
                                       }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 1150 "pycode.l"
{
					  codifyLines(pycodeYYtext);
					  if ( g_noSuiteFound ) 
					  {
                                            // printf("New suite to capture! [%d]\n", g_yyLineNr);
					    BEGIN ( SuiteCaptureIndent );
					  }
                                       }
	YY_BREAK


case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 1161 "pycode.l"
{
                                 // Blankline - ignore, keep looking for indentation.
				 codifyLines(pycodeYYtext);
                               }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1166 "pycode.l"
{
                                 // This state lasts momentarily,
                                 // to check the indentation
                                 // level that is about to be
                                 // used.
				 codifyLines(pycodeYYtext);
				 g_indents.push(pycodeYYleng);
                                 // printf("Captured indent of %d [line %d]\n", pycodeYYleng, g_yyLineNr);
				 BEGIN( Suite );
                               }
	YY_BREAK


case 26:
YY_RULE_SETUP
#line 1180 "pycode.l"
{
                                 // This implements poor
				 // indendation-tracking;
                                 // should be improved.
				 // (translate tabs to space, etc)
  		                 codifyLines(pycodeYYtext);
                                 adjustScopesAndSuites(pycodeYYleng);
                               }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 1189 "pycode.l"
{
                                 // If this ever succeeds,
				 // it means that this is
				 // a blank line, and
				 // can be ignored.
  		                 codifyLines(pycodeYYtext);
                               }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1197 "pycode.l"
{
                                 // Default rule; matches
				 // the empty string, assuming
				 // real text starts here.
				 // Just go straight to Body.
                                 adjustScopesAndSuites(0);
                               }
	YY_BREAK

case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 1207 "pycode.l"
{
                                 codifyLines(pycodeYYtext);
			         BEGIN( SuiteMaintain );
		               }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1211 "pycode.l"
{
  			         codify(pycodeYYtext);
                               }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 1214 "pycode.l"
{
  		                 codifyLines(pycodeYYtext);
                               }
	YY_BREAK
// Single quoted string like 'That\'s a """nice""" string!'
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 1219 "pycode.l"
{ // line continuation
  		                 codifyLines(pycodeYYtext);
                               }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1222 "pycode.l"
{ // espaced char
  		                 codify(pycodeYYtext);
                               }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1225 "pycode.l"
{ // tripple double quotes
  		                 codify(pycodeYYtext);
      			       }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1228 "pycode.l"
{ // end of the string
  		                 codify(pycodeYYtext);
				 endFontClass();
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1233 "pycode.l"
{ // normal chars
  		                 codify(pycodeYYtext);
                               }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1236 "pycode.l"
{ // normal char
  		                 codify(pycodeYYtext);
                               }
	YY_BREAK

// Double quoted string like "That's \"a '''nice'''\" string!"
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 1242 "pycode.l"
{ // line continuation
  		                 codifyLines(pycodeYYtext);
                               }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1245 "pycode.l"
{ // espaced char
  		                 codify(pycodeYYtext);
                               }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1248 "pycode.l"
{ // tripple single quotes
  		                 codify(pycodeYYtext);
      			       }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1251 "pycode.l"
{ // end of the string
  		                 codify(pycodeYYtext);
				 endFontClass();
      		                 BEGIN(g_stringContext);
                               }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1256 "pycode.l"
{ // normal chars
  		                 codify(pycodeYYtext);
                               }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 1259 "pycode.l"
{ // normal char
  		                 codify(pycodeYYtext);
                               }
	YY_BREAK


case 44:
#line 1266 "pycode.l"
case 45:
YY_RULE_SETUP
#line 1266 "pycode.l"
{
  		          codify(pycodeYYtext);
			  if (g_doubleQuote==(pycodeYYtext[0]=='"')) 
			  {
			    endFontClass();
			    BEGIN(g_stringContext);
			  }
		       }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1274 "pycode.l"
{
			 codifyLines(pycodeYYtext);
		       }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1277 "pycode.l"
{
			 codifyLines(pycodeYYtext);
                       }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1280 "pycode.l"
{
                         codify(pycodeYYtext);
                       }
	YY_BREAK

/*
<*>({NONEMPTY}|{EXPCHAR}|{BB})           { // This should go one character at a time.
  		                 codify(pycodeYYtext);
				 // printf("[pycode] '%s' [ state %d ]  [line %d] no match\n",
				 //       pycodeYYtext, YY_START, g_yyLineNr);

				 //endFontClass();
				 BEGIN(Body);					
                               }
   */
case 49:
#line 1297 "pycode.l"
case 50:
YY_RULE_SETUP
#line 1297 "pycode.l"
{
  				 startFontClass("stringliteral");
				 g_stringContext=YY_START;
				 g_doubleQuote=pycodeYYtext[pycodeYYleng-1]=='"';
  		                 codify(pycodeYYtext);
				 BEGIN(TripleString);
                               }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1304 "pycode.l"
{ // single quoted string
  				 startFontClass("stringliteral");
				 g_stringContext=YY_START;
  		                 codify(pycodeYYtext);
				 BEGIN(SingleQuoteString);
  			       }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1310 "pycode.l"
{ // double quoted string
  				 startFontClass("stringliteral");
				 g_stringContext=YY_START;
  		                 codify(pycodeYYtext);
				 BEGIN(DoubleQuoteString);
                               }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1316 "pycode.l"
{
  				 if (YY_START==SingleQuoteString || 
				     YY_START==DoubleQuoteString || 
				     YY_START==TripleString
				    )
				 {
				   REJECT;
				 }
                                 // This eats EVERYTHING
				 // except the newline
                                 startFontClass("comment");
				 codifyLines(pycodeYYtext);
		                 endFontClass();
                               }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1330 "pycode.l"
{
  		                 codifyLines(pycodeYYtext);
				 //printf("[pycode] %d NEWLINE [line %d] no match\n",
				 //       YY_START, g_yyLineNr);

				 //endFontClass();
				 BEGIN(Body);
                               }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 1339 "pycode.l"
{
  		                 codify(pycodeYYtext);
				 BEGIN(Body);					
  			       }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1343 "pycode.l"
{
  		                 codify(pycodeYYtext);
				 // printf("[pycode] '%s' [ state %d ]  [line %d] no match\n",
				 //        pycodeYYtext, YY_START, g_yyLineNr);

				 //endFontClass();
				 BEGIN(Body);					
                               }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1352 "pycode.l"
ECHO;
	YY_BREAK
#line 2753 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Body):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(Suite):
			case YY_STATE_EOF(SuiteCaptureIndent):
			case YY_STATE_EOF(SuiteStart):
			case YY_STATE_EOF(SuiteMaintain):
			case YY_STATE_EOF(SuiteContinuing):
			case YY_STATE_EOF(LongString):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pycodeYYin at a new source and called
			 * pycodeYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pycodeYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pycodeYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pycodeYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pycodeYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pycodeYYrestart(pycodeYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pycodeYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 497 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 497 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 496);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pycodeYYrestart(pycodeYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pycodeYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pycodeYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pycodeYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pycodeYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pycodeYY_create_buffer(pycodeYYin,YY_BUF_SIZE );
	}

	pycodeYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	pycodeYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pycodeYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pycodeYYpop_buffer_state();
	 *		pycodeYYpush_buffer_state(new_buffer);
     */
	pycodeYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pycodeYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pycodeYYwrap()) processing, but the only time this flag
	 * is looked at is after pycodeYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pycodeYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pycodeYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pycodeYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pycodeYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pycodeYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pycodeYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pycodeYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pycodeYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pycodeYY_create_buffer()
 * 
 */
    void pycodeYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pycodeYYfree((void *) b->yy_ch_buf  );

	pycodeYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pycodeYYrestart() or at EOF.
 */
    static void pycodeYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pycodeYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pycodeYY_init_buffer was _probably_
     * called from pycodeYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pycodeYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pycodeYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pycodeYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pycodeYYensure_buffer_stack();

	/* This block is copied from pycodeYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pycodeYY_switch_to_buffer. */
	pycodeYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pycodeYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pycodeYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pycodeYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pycodeYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)pycodeYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pycodeYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pycodeYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pycodeYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pycodeYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pycodeYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pycodeYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pycodeYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pycodeYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pycodeYY_scan_bytes() instead.
 */
YY_BUFFER_STATE pycodeYY_scan_string (yyconst char * yystr )
{
    
	return pycodeYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pycodeYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pycodeYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pycodeYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pycodeYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pycodeYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pycodeYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pycodeYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pycodeYYtext[pycodeYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = pycodeYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pycodeYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pycodeYYget_lineno  (void)
{
        
    return pycodeYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *pycodeYYget_in  (void)
{
        return pycodeYYin;
}

/** Get the output stream.
 * 
 */
FILE *pycodeYYget_out  (void)
{
        return pycodeYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t pycodeYYget_leng  (void)
{
        return pycodeYYleng;
}

/** Get the current token.
 * 
 */

char *pycodeYYget_text  (void)
{
        return pycodeYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void pycodeYYset_lineno (int  line_number )
{
    
    pycodeYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see pycodeYY_switch_to_buffer
 */
void pycodeYYset_in (FILE *  in_str )
{
        pycodeYYin = in_str ;
}

void pycodeYYset_out (FILE *  out_str )
{
        pycodeYYout = out_str ;
}

int pycodeYYget_debug  (void)
{
        return pycodeYY_flex_debug;
}

void pycodeYYset_debug (int  bdebug )
{
        pycodeYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pycodeYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pycodeYYin = stdin;
    pycodeYYout = stdout;
#else
    pycodeYYin = (FILE *) 0;
    pycodeYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pycodeYYlex_init()
     */
    return 0;
}

/* pycodeYYlex_destroy is for both reentrant and non-reentrant scanners. */
int pycodeYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pycodeYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pycodeYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	pycodeYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    pycodeYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pycodeYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pycodeYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *pycodeYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pycodeYYfree (void * ptr )
{
	free( (char *) ptr );	/* see pycodeYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1352 "pycode.l"



/*@ ----------------------------------------------------------------------------
 */

void resetPythonCodeParserState() 
{
  g_currentDefinition = 0;
  g_currentMemberDef = 0;
  g_doubleStringIsDoc = FALSE;
  g_paramParens = 0;
  g_indents.clear();
  BEGIN( Body );
}

/*!
  Examines current stack of white-space indentations;
  re-syncs the parser with the correct scope.
*/
static void adjustScopesAndSuites(unsigned indentLength) 
{
  // States to pop
  if (!g_indents.isEmpty() && indentLength < g_indents.top()) 
  {
    while (!g_indents.isEmpty() && indentLength < g_indents.top()) 
    {
      // printf("Exited scope indent of [%d]\n", g_indents.top());
      g_indents.pop(); // Pop the old suite's indentation

      g_currentMemberDef=0;
      if (g_currentDefinition) 
	g_currentDefinition=g_currentDefinition->getOuterScope();
    }
  }

  // Are there any remaining indentation levels for suites?
  if (!g_indents.isEmpty()) 
  {
    BEGIN( Suite );
  }
  else 
  {
    BEGIN( Body );
  }
}

void parsePythonCode(CodeOutputInterface &od,const char *className,
                 const QCString &s,bool exBlock, const char *exName,
		 FileDef *fd,int startLine,int endLine,bool inlineFragment,
		 MemberDef *,bool) 
{

  //printf("***parseCode()\n");
  
  //--- some code to eliminate warnings---
  className = "";
  exBlock = FALSE;
  exName = "";
  inlineFragment = "";
  //--------------------------------------
  if (s.isEmpty()) return;
  g_code = &od;
  g_inputString   = s;
  g_inputPosition = 0;
  g_currentFontClass = 0;
  g_needsTermination = FALSE;
  if (endLine!=-1)
    g_inputLines  = endLine+1;
  else
    g_inputLines  = countLines();
  
  if (startLine!=-1)
    g_yyLineNr    = startLine;
  else
    g_yyLineNr    = 1;
  
  g_exampleBlock  = exBlock; 
  g_exampleName   = exName;
  g_sourceFileDef = fd;


  // Starts line 1 on the output  
  startCodeLine();

  pycodeYYrestart( pycodeYYin );

  pycodeYYlex();

  if (!g_indents.isEmpty()) 
  {
    // printf("Exited pysourceparser in inconsistent state!\n");
  }

  if (g_needsTermination)
  {
    endCodeLine();
  }
  return;
}


#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
  void pycodeYYdummy() { yy_flex_realloc(0,0); } 
}
#elif YY_FLEX_SUBMINOR_VERSION<33
#error "You seem to be using a version of flex newer than 2.5.4. These are currently incompatible with 2.5.4, and do NOT work with doxygen! Please use version 2.5.4 or expect things to be parsed wrongly! A bug report has been submitted (#732132)."
#endif


