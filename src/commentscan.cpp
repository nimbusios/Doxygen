
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentScanYY_create_buffer
#define yy_delete_buffer commentScanYY_delete_buffer
#define yy_flex_debug commentScanYY_flex_debug
#define yy_init_buffer commentScanYY_init_buffer
#define yy_flush_buffer commentScanYY_flush_buffer
#define yy_load_buffer_state commentScanYY_load_buffer_state
#define yy_switch_to_buffer commentScanYY_switch_to_buffer
#define yyin commentScanYYin
#define yyleng commentScanYYleng
#define yylex commentScanYYlex
#define yylineno commentScanYYlineno
#define yyout commentScanYYout
#define yyrestart commentScanYYrestart
#define yytext commentScanYYtext
#define yywrap commentScanYYwrap
#define yyalloc commentScanYYalloc
#define yyrealloc commentScanYYrealloc
#define yyfree commentScanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentScanYYrestart(commentScanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t commentScanYYleng;

extern FILE *commentScanYYin, *commentScanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentScanYYrestart()), so that the user can continue scanning by
	 * just pointing commentScanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentScanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t commentScanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentScanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentScanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentScanYYrestart (FILE *input_file  );
void commentScanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentScanYY_create_buffer (FILE *file,int size  );
void commentScanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentScanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentScanYYpop_buffer_state (void );

static void commentScanYYensure_buffer_stack (void );
static void commentScanYY_load_buffer_state (void );
static void commentScanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentScanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentScanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentScanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *commentScanYYalloc (yy_size_t  );
void *commentScanYYrealloc (void *,yy_size_t  );
void commentScanYYfree (void *  );

#define yy_new_buffer commentScanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentScanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentScanYYin = (FILE *) 0, *commentScanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentScanYYlineno;

int commentScanYYlineno = 1;

extern char *commentScanYYtext;
#define yytext_ptr commentScanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentScanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentScanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 180
#define YY_END_OF_BUFFER 181
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[743] =
    {   0,
       66,   66,  110,  110,  123,  123,  133,  133,  177,  177,
      181,  180,   34,  180,   34,  180,   33,  180,   34,  180,
       34,  180,   34,  180,   32,   34,  180,   34,  180,   34,
      180,   23,   34,  180,   34,  180,   34,  180,   25,   34,
      180,   32,   34,  180,   79,  180,   78,  180,   79,  180,
       76,   79,  180,   79,  180,   79,  180,  180,   80,  180,
      100,  180,   99,  180,  100,  180,   97,  100,  180,  100,
      180,   61,  180,   61,  180,   60,  180,   61,  180,   61,
      180,   61,  180,   57,   61,  180,   61,  180,   61,  180,
       65,  180,   64,  180,   65,  180,   62,   65,  180,   65,

      180,   65,  180,   65,  180,   69,  180,   68,  180,   69,
      180,   66,   69,  180,   69,  180,   66,   69,  180,   66,
       69,  180,   69,  180,   61,  180,   60,  180,   61,  180,
       61,  180,   61,  180,   61,  180,   61,  180,   88,  180,
       87,  180,   85,   88,  180,   88,  180,   92,  180,   91,
      180,   92,  180,   92,  180,   96,  180,   95,  180,   96,
      180,   96,  180,   84,  180,   81,  180,   84,  180,   82,
       84,  180,   84,  180,   84,  180,   48,  180,   47,  180,
       48,  180,   45,   48,  180,   48,  180,   52,  180,   52,
      180,   51,  180,   52,  180,   52,  180,   52,  180,   49,

       52,  180,   52,  180,   52,  180,   56,  180,   55,  180,
       56,  180,   53,   56,  180,   56,  180,   72,  180,   70,
      180,  180,   74,  180,   75,  180,  180,  106,  180,  105,
      180,  104,  106,  180,  106,  180,  110,  113,  180,  107,
      180,  110,  113,  180,  113,  180,  113,  180,  115,  180,
      114,  180,  180,  118,  180,  118,  180,  116,  180,  118,
      180,  118,  180,  123,  127,  180,  124,  180,  127,  180,
      127,  180,  127,  180,  127,  180,  127,  180,  103,  180,
      101,  180,  103,  180,  131,  180,  129,  180,  128,  131,
      180,  131,  180,  134,  180,  133,  134,  180,  132,  180,

      134,  180,  141,  142,  180,  140,  180,  142,  180,  142,
      180,  142,  180,  152,  153,  180,  143,  180,  153,  180,
      153,  180,  153,  180,  156,  180,  154,  180,  156,  180,
      160,  180,  158,  180,  157,  160,  180,  160,  180,  163,
      166,  180,  161,  180,  164,  166,  180,  165,  166,  180,
      166,  180,  166,  180,  169,  180,  167,  180,  169,  180,
      172,  180,  171,  180,  172,  180,  170,  172,  180,  172,
      180,  175,  180,  174,  180,  175,  180,  173,  175,  180,
      175,  180,   42,   44,  180,   43,  180,   44,  180,   44,
      180,  121,  180,  120,  180,  119,  121,  180,  121,  180,

       37,   38,  180,   36,  180,   38,  180,   38,  180,  177,
      179,  180,  178,  180,  179,  180,  179,  180,  179,  180,
       31,    4,   26,   28,   26,   22,   22,   14,   22,   14,
       14,   14,   14,   14,   14,   20,   21,   16,   22,   23,
       14,   14,   14,   14,   14,   14,   14,   14,   25,   24,
       76,   76,   77,   76,   80,   97,   97,   98,   57,   57,
       59,   57,   62,   62,   63,   62,   66,   66,   66,   67,
       66,   85,   86,   89,   90,   94,   93,   94,   82,   82,
       83,   82,   45,   45,   45,   46,   49,   49,   50,   49,
       53,   53,   54,   70,   71,   74,   73,  104,  110,  107,

      110,  112,  112,  109,  114,  117,  123,  126,  125,  102,
      128,  130,  133,  132,  141,  152,  155,  157,  159,  163,
      162,  168,  170,  170,  173,  173,   42,  119,   37,  177,
      176,   22,   30,   26,   30,   30,   30,   26,   30,   30,
       27,    7,    1,    1,    2,   14,   14,   14,   14,   18,
       19,   14,   14,   14,   16,    5,   14,   14,   14,   14,
       14,   14,   14,   76,   76,   57,   62,   62,   66,   66,
       82,   82,   45,   45,   45,   45,   49,   53,  111,   39,
       40,   41,   35,  176,   30,   30,   12,    1,   15,    2,
     8198,   14,16390,   14,   14,   14,   14,   14,   14, 8198,

       14,16390,   14,   14,   14,   14,   14,   76,   62,   66,
       58,   82,   45,   45,   45,   53,  111,  136,  144,   35,
       11,   29, 8198, 8198,   14,   14,   14,   17,   14,   14,
        5, 8198,   14,   14,   14,   76,   62,   66,   82,    3,
       14,   14,   17,   14,   14,   14,   14,   14,   76,   62,
       66,   82,   70,  138,  146,   14,   14,   14,   14,   14,
       14,   14,   76,   62,   66,   82,  137,  135,  145,   14,
       14,   14,   14,   14,   14,   14,   76,   78,   99,   60,
       62,   64,   66,   68,   87,   91,   95,   81,   82,   47,
       51,   55,   72,   75,  105,  108,  115,  116,  122,  124,

      101,  129,  139,  140,  143,  154,  158,  161,  167,  171,
      174,  120,   36,  178,    9,    8,   14,   14,   14,    5,
       14,   14,  147,   10,   14,   14,   14,   14,   14,   14,
      150,   13,   14,   13,   14,  151,  148,   13,   14,  151,
      149,   31
    } ;

static yyconst flex_int16_t yy_accept[1055] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   12,
       13,   15,   17,   19,   21,   23,   25,   28,   30,   32,
       35,   37,   39,   42,   45,   47,   49,   51,   54,   56,

       58,   59,   61,   63,   65,   67,   70,   72,   74,   76,
       78,   80,   82,   84,   87,   89,   91,   93,   95,   97,
      100,  102,  104,  106,  108,  110,  112,  115,  117,  120,
      123,  125,  127,  129,  131,  133,  135,  137,  139,  141,
      143,  146,  148,  150,  152,  154,  156,  158,  160,  162,
      164,  166,  168,  170,  173,  175,  177,  179,  181,  183,
      186,  188,  190,  192,  194,  196,  198,  200,  203,  205,
      207,  209,  211,  213,  216,  218,  220,  222,  223,  225,
      227,  228,  230,  232,  235,  237,  240,  242,  245,  247,
      249,  251,  253,  254,  256,  258,  260,  262,  264,  267,

      269,  271,  273,  275,  277,  279,  281,  283,  285,  287,
      289,  292,  294,  296,  299,  301,  303,  306,  308,  310,
      312,  314,  317,  319,  321,  323,  325,  327,  329,  331,
      333,  335,  338,  340,  343,  345,  348,  351,  353,  355,
      357,  359,  361,  363,  365,  367,  370,  372,  374,  376,
      378,  381,  383,  386,  388,  390,  392,  394,  396,  399,
      401,  404,  406,  408,  410,  413,  415,  417,  419,  421,
      421,  421,  421,  421,  422,  422,  422,  423,  423,  423,
      423,  423,  424,  425,  425,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  427,  428,

      429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
      440,  441,  442,  443,  444,  445,  446,  447,  448,  449,
      449,  450,  450,  450,  451,  451,  452,  453,  453,  453,
      453,  454,  455,  455,  456,  457,  457,  458,  458,  458,
      459,  459,  459,  459,  459,  459,  460,  460,  460,  461,
      461,  462,  462,  462,  462,  463,  463,  464,  465,  465,
      465,  465,  466,  467,  467,  468,  469,  469,  469,  470,
      470,  470,  471,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  473,  473,  474,
      474,  474,  475,  475,  477,  477,  477,  478,  478,  479,

      479,  479,  480,  481,  481,  481,  481,  482,  483,  484,
      484,  484,  485,  485,  486,  486,  487,  487,  487,  487,
      487,  487,  488,  488,  488,  489,  489,  490,  490,  490,
      490,  491,  492,  492,  493,  493,  494,  494,  495,  495,
      495,  496,  496,  497,  497,  498,  498,  499,  499,  500,
      501,  502,  502,  503,  504,  504,  505,  505,  506,  506,
      506,  506,  506,  507,  507,  508,  509,  510,  510,  510,
      510,  511,  511,  512,  512,  513,  513,  514,  515,  515,
      515,  516,  516,  516,  516,  517,  517,  517,  517,  517,
      517,  517,  518,  518,  519,  519,  520,  520,  521,  521,

      522,  522,  522,  523,  523,  524,  524,  525,  525,  525,
      526,  526,  527,  527,  527,  528,  528,  528,  529,  529,
      530,  530,  530,  531,  532,  532,  533,  533,  533,  533,
      533,  534,  536,  537,  538,  540,  541,  542,  542,  542,
      542,  542,  542,  542,  543,  543,  543,  543,  543,  544,
      545,  546,  547,  548,  549,  550,  551,  552,  552,  553,
      554,  555,  556,  557,  558,  559,  560,  561,  562,  563,
      564,  565,  565,  566,  566,  566,  566,  567,  568,  568,
      569,  570,  570,  571,  571,  571,  571,  571,  571,  571,
      572,  572,  573,  574,  575,  576,  577,  577,  577,  578,

      578,  579,  579,  579,  579,  579,  579,  579,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  581,  582,  583,  583,  583,
      584,  584,  585,  585,  585,  585,  585,  585,  586,  587,
      588,  588,  588,  588,  588,  588,  588,  588,  589,  590,
      591,  594,  595,  596,  596,  597,  598,  599,  599,  600,
      603,  604,  605,  606,  607,  608,  609,  609,  609,  610,
      611,  612,  612,  612,  612,  613,  613,  614,  615,  616,
      616,  616,  617,  617,  617,  617,  617,  617,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  619,
      619,  619,  619,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  621,  621,  621,  621,
      622,  622,  622,  623,  623,  623,  623,  623,  623,  624,
      626,  627,  628,  629,  630,  631,  633,  634,  635,  636,
      637,  637,  637,  638,  639,  639,  639,  639,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,

      640,  640,  641,  641,  641,  641,  641,  642,  643,  644,
      645,  646,  647,  648,  649,  650,  650,  650,  651,  652,
      652,  652,  652,  653,  653,  653,  653,  653,  653,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  655,
      655,  655,  655,  655,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  657,  658,  659,  660,
      661,  662,  663,  664,  664,  664,  665,  666,  666,  666,
      666,  667,  667,  667,  667,  667,  667,  667,  667,  667,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  668,  669,  669,  669,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  671,  672,
      673,  674,  675,  676,  677,  679,  680,  681,  683,  685,
      686,  687,  688,  690,  691,  692,  693,  694,  695,  696,
      697,  698,  699,  700,  700,  700,  700,  700,  700,  700,
      701,  702,  703,  704,  705,  705,  705,  705,  705,  705,
      706,  707,  708,  709,  710,  711,  712,  713,  714,  715,
      715,  715,  716,  717,  718,  719,  720,  721,  722,  723,

      723,  723,  723,  723,  723,  723,  723,  723,  724,  724,
      724,  725,  726,  727,  727,  728,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  730,  730,  731,
      731,  731,  731,  731,  732,  732,  732,  734,  734,  736,
      736,  737,  738,  738,  740,  740,  741,  741,  741,  741,
      741,  742,  743,  743
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    8,    8,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   18,   18,   18,   20,    1,   21,
        1,   22,    1,   23,   24,   25,   26,   27,   28,   26,
       29,   30,   31,   26,   26,   32,   33,   26,   34,   35,
       26,   36,   26,   37,   38,   26,   26,   26,   26,   26,
       39,   40,   41,    1,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   26,   52,   53,   54,   55,
       56,   57,   26,   58,   59,   60,   61,   62,   26,   63,
       64,   26,   65,    1,   66,   67,    1,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    3,    4,    5,    1,    1,    6,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   17,
        6,   18,   19,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,    1,   21,
        1,   22,   20,   20,   20,   20,   20,   20,   20,   20,
       23,   20,   20,   20,   24,   20,   20,   20,   20,   20,
       20,   20,   20,   20,    6,   25,   26,   27
    } ;

static yyconst flex_int16_t yy_base[1259] =
    {   0,
        0,    0,    0,   67,   83,  150, 4487, 4481,  217,    0,
      285,    0,  353,  420,  487,  554,  621,    0,  689,    0,
       67,   68,   70,   73,  757,  824,  891,    0,  959,    0,
     1027,    0, 1095,    0,   99,  106, 1163,    0,  162,  165,
     1231,    0,  123,  129,  374,  393,   75,   76, 1299,    0,
      135,  139,  173,  377,  441,  442,   93,   95, 1367,    0,
      460,  502,  140,  142, 1435,    0, 1503,    0,  412,  435,
      499,  508, 1571,    0,  363,  368,  511,  566, 4483, 7500,
     7500,  527,  399, 4470, 4442, 4401,  568, 1634, 1688,  185,
     1748,  770, 4374,  846, 7500, 7500, 4386,  167,  433,  797,

     4389, 7500, 7500, 7500,    0,  101,  464, 7500,  190,  452,
      785, 1639, 4368,  583,  474,  515, 7500, 7500, 4379,  775,
      838, 4363, 1684, 7500, 7500, 4377, 1630, 1659, 1698, 7500,
     1742,  868, 1763, 1771, 1796, 4362, 1815,  607, 7500, 7500,
        0,  538, 7500, 7500, 4374,  779, 7500, 7500, 4371,  801,
     7500, 7500, 4370, 1637, 1723, 1824, 7500, 7500,    0, 1849,
     1747, 7500, 1845, 1868, 1873, 1892, 4353, 1900, 1801,  872,
     7500, 7500,    0, 4355, 1857, 7500, 4354, 1904,    0, 7500,
     1908, 7500, 7500,    0, 4327,  369, 7500, 4328, 1909, 1975,
     7500,    0, 4325, 7500,  207, 7500, 4359, 4323,    0, 7500,

     7500, 4347, 4351, 4315,   72, 7500, 7500, 1919, 7500, 7500,
        0, 1923, 7500,  533, 7500, 4319,    0, 7500, 7500,  337,
      348,    0, 7500, 7500,  545, 1666, 7500, 7500, 1931, 7500,
     7500,    0, 1939,    0, 7500, 7500, 7500, 7500, 1949, 7500,
     7500, 1953, 7500, 7500,    0,  369, 4318, 7500, 7500,    0,
      391, 4316,    0, 7500, 4304, 4303, 7500, 7500,    0, 4305,
        0, 7500, 4330, 4302,    0, 7500, 7500, 4274,  144, 1805,
     2035, 2095, 1834, 1961, 4297, 4331, 7500,    0, 4317, 4313,
        0, 7500, 7500, 2162, 4312,  446, 4318,  354,  565, 1630,
      833, 1630, 1966,   77, 1650, 4285, 4264, 7500,  320, 2229,

     4254, 4258, 4271, 4261,  803,  474, 4257, 7500, 7500,    0,
     1990, 1658, 1967, 1985, 1987, 2009, 2014, 2030, 2026, 2036,
     7500,  542,  612, 7500, 4306, 7500, 2020, 1702, 2045,  806,
     7500, 2052, 4309, 7500,  458, 4302,  464, 4290,  877, 7500,
     4256, 2091, 2120, 4288, 2128, 2188, 2110, 2216, 2194, 1728,
     7500, 4253, 2147, 2237,    0, 4293, 7500, 2195, 2070, 2227,
     1819, 7500, 2237, 4292, 4271, 2239, 2169, 2246, 7500, 4279,
     1878, 7500, 2258, 2268, 2297, 4240, 2305, 2324, 2328, 2343,
     2351,    0, 2371, 2375, 2390, 1776,    0, 2045, 7500, 4203,
     4248, 7500, 2086, 7500, 4196, 4241, 7500, 2136, 7500, 4189,

     4209, 7500, 2265, 2272, 2299, 2152, 7500, 2349, 2402, 2410,
        0, 2414, 4192, 2422, 2162, 7500, 4158, 2433, 2441, 4187,
     2460, 2468, 2487, 2495, 2514, 2221, 7500, 4152, 2519, 2533,
        0, 4188, 4194, 4186, 2333, 7500, 4148, 4184, 4149, 2355,
     7500, 4145,    0, 2380, 7500, 4144,    0, 4143, 1790, 7500,
     4155, 4152, 7500, 4183, 2395, 7500, 4133,    0, 4132, 1885,
     4174, 4172, 7500, 4125,    0, 7500, 7500, 4120, 4120, 2449,
     7500, 4119,    0, 2453, 7500, 4118, 2472, 7500, 4128, 4116,
        0,   74, 4120, 4114,    0, 4111, 4111, 4112,  806, 4100,
     2476, 7500, 4099,    0, 2480, 7500, 4097,    0, 2500, 7500,

     4096, 2504, 7500, 4094,  517, 4137,  585, 4125, 4091,  800,
     4134, 1658, 4122, 4087,    0, 4125, 1661,    0, 4080,    0,
      175, 4076,    0,    0, 4074, 4078, 4070, 4100,    0, 4103,
     7500, 7500, 4092, 2562, 4062, 4068, 7500, 4063, 4030, 4010,
     1977, 1692, 2076, 7500, 1795, 1854, 3991, 3979,  544, 1965,
        0, 1933, 2024, 1943, 2508, 7500, 7500,    0, 2069, 2541,
     2016,    0,    0, 2546, 2550, 2524, 2548, 2555, 2591, 2602,
     2592, 2599, 2601,    0, 3981, 3980,    0, 2606, 2618, 2627,
     2634, 2643, 2653, 4019, 2539, 2643, 3978, 3977, 3976, 2660,
     2665, 2670, 2693, 2713, 2721, 2733, 3975, 3974,    0,    0,

     4008, 3967, 3955, 3963, 3961, 3958,    0,    0, 3947, 3946,
     3945, 3949, 3943, 3939, 3929, 3928, 3918, 3926, 3912, 3913,
     3917, 1955, 3903, 3913, 3911, 3903, 3899, 3897, 3896, 3893,
        0, 3892,    0, 3887, 7500, 7500, 7500, 3860, 3291, 2104,
     3256,    0, 3254, 1707, 3253, 3294,    0, 2732, 2211, 7500,
     3241, 3238, 3268, 2243, 1802, 3245, 3232, 2318, 7500,    0,
     2755, 2608, 2554, 3218, 2631, 2822, 2659, 3241, 2824, 2879,
     2863, 2823, 2864, 2870, 2666, 2815, 3225, 3219, 2821, 2895,
     7500, 3215, 3199, 3198, 2911,    0, 2840, 2934, 2953, 3186,
     3180, 3202, 3162, 3155, 3150, 3145, 3143,    0, 3139, 3127,

     3107, 2914, 3106, 3100, 3099, 3098, 3100, 3095, 7500, 3089,
     3086, 3081, 7500, 3070, 3072, 3048, 3048, 3048, 3044, 3043,
     3034, 3019, 3018, 3014, 3013, 2556, 3009, 2968, 2959, 7500,
     2980, 2967, 7500, 2942, 2925, 1872, 2912, 2922,    0, 2587,
     2687, 2851, 2898, 2920, 2979, 3026, 3010, 3015, 3011, 2971,
     2914, 2902, 3036, 3055, 2901, 2895, 2894, 3064, 2990, 2893,
     2887, 2876, 2861, 2861, 2860, 2824, 2820, 2815, 2810, 2796,
     2792, 2786, 2797, 1718, 2774, 2707, 2696, 2697, 2680, 2673,
     2672, 2658, 2660, 2643, 2654,  552, 2639, 2645, 2637, 1785,
     2637, 2632, 2625, 2615, 2610, 2608, 2593, 2578, 2577, 2573,

     2564, 2590, 2542, 2555, 2539, 2522, 2828, 2845, 7500, 2849,
     3019, 3056, 3077, 3083, 3070, 2523, 2521, 3089, 3096, 2503,
     2501, 2496, 3104, 3147, 3155, 2495, 2489, 2488, 7500, 2487,
     2481, 2476, 2470, 2457, 2451, 2448, 2433, 2433, 2426, 2413,
     2422, 2418, 2402, 2406, 2404, 2403, 2395, 2385, 7500, 2380,
        0,    0, 2365, 7500, 2348, 2726, 2345, 2345, 2351, 2346,
     2344, 2342, 2326, 2324, 2318, 2307, 2306, 2305, 2299, 2298,
     2297, 2272, 2264, 2259, 2240, 2834, 2927, 2928, 3020, 3095,
     3123, 3129, 3161, 2245, 2239, 3163, 3168, 2235, 2233, 2229,
     3175, 2218, 2206, 2202, 2200, 2191, 2175, 2164, 2159, 2149,

     2159,    0, 2152, 2153, 2138, 2132, 2137, 2124, 2101, 2100,
     2095, 2089,    0, 7500, 7500, 2088, 2098, 7500, 2091, 2072,
     2066, 2062, 2062, 2050, 2041, 2039, 2022, 2009, 1997, 1987,
     1981, 1975, 1964, 1953, 1930, 1963, 1953, 3137, 2911, 3000,
     3184, 3191, 3197, 3166, 3194, 7500, 7500, 3196, 3222, 7500,
     7500, 7500, 3212, 7500, 7500, 7500, 7500, 7500, 7500, 7500,
     7500, 7500, 7500, 1906, 1890, 1892, 1888, 1896, 1882, 7500,
     7500, 7500, 7500, 7500, 1871, 1858, 2727, 1863, 1844, 7500,
     7500, 7500, 7500, 7500, 7500, 7500, 7500, 7500, 7500, 1864,
     1863, 7500, 7500, 3125, 3202, 3220,  843, 3225, 3238, 1802,

     1800, 1780, 1756, 1737, 1732, 1705, 1687, 7500, 1673, 1667,
     7500, 3243, 3244,  730, 3245, 3254, 1654, 1618, 1603, 1594,
     1605, 1581,  813, 2744,  795,  759, 3256,  767, 3261,  712,
      462,  408,  353, 7500, 2984,  148, 2995,  558, 3262,   83,
     2996, 7500,   56, 3001, 1946, 3002,   26, 1883, 3117,  532,
     7500, 3266, 7500, 3314, 3341, 3368, 3395, 3422, 3449, 3476,
     3503, 3530, 3557, 3584, 3611, 3638, 3665, 3692, 3719, 3746,
     3773, 3800, 3827, 3854, 3881, 3908, 3929, 3946, 3962, 3981,
     3997, 4016, 4042, 4059, 4086, 4094, 4108, 4134, 4160, 4186,
     4213, 4230, 4257, 4274, 4300, 4326, 4352, 4367, 4394, 4421,

     4448, 4465, 4473, 4499, 4525, 4551, 4577, 4585, 4599, 4614,
     4641, 4656, 4683, 4710, 4725, 4752, 4779, 4794, 4821, 4848,
     4863, 4890, 4898, 4912, 4920, 4934, 4961, 4976, 5003, 5030,
     5052, 5078, 5086, 5098, 5115, 5127, 5151, 5159, 3253, 5175,
     5198, 5222, 5239, 5256, 5283, 5297, 5318, 5344, 5370, 5396,
     5408, 5435, 5452, 5469, 5496, 5513, 5530, 5556, 5582, 5608,
     5635, 5661, 5676, 5703, 5730, 5757, 5774, 5791, 5817, 5825,
     5851, 5877, 5903, 5929, 5941, 5955, 5976, 5991, 6018, 6033,
     6060, 6087, 6108, 6123, 6150, 6177, 6192, 6219, 6246, 6261,
     6288, 6302, 6323, 6337, 6358, 6385, 6400, 6427, 6454, 3259,

     6466, 6493, 6508, 6522, 6546, 6573, 6599, 3276, 6622, 6646,
     3288, 3917, 6672, 6686, 6703, 6711, 6723, 6740, 6757, 6774,
     6791, 6818, 6844, 6861, 6878, 6904, 6930, 6956, 6968, 6976,
     6990, 6998, 7010, 7037, 7045, 7053, 3922, 7080, 7095, 7111,
     7135, 3969, 7161, 7185, 7193, 7216, 7230, 7247, 7264, 7272,
     7287, 7311, 7337, 7364, 7391, 7418, 7445, 7472
    } ;

static yyconst flex_int16_t yy_def[1259] =
    {   0,
     1054, 1054, 1053,    3, 1055, 1055, 1056, 1056, 1053,    9,
     1053,   11, 1057, 1057, 1058, 1058, 1053,   17, 1053,   19,
     1059, 1059, 1060, 1060, 1061, 1061, 1053,   27, 1053,   29,
     1053,   31, 1053,   33, 1062, 1062, 1053,   37, 1063, 1063,
     1053,   41, 1064, 1064, 1065, 1065, 1066, 1066, 1053,   49,
     1067, 1067, 1068, 1068, 1069, 1069, 1070, 1070, 1053,   59,
     1071, 1071, 1072, 1072, 1053,   65, 1053,   67, 1073, 1073,
     1073, 1073, 1053,   73, 1074, 1074, 1075, 1075, 1053, 1053,
     1053, 1053, 1053, 1076, 1077, 1078, 1079, 1053, 1080, 1081,
     1082, 1053, 1078, 1079, 1053, 1053, 1083, 1084, 1084, 1084,

     1085, 1053, 1053, 1053, 1086, 1087, 1053, 1053, 1053, 1053,
     1088, 1088, 1053, 1089, 1053, 1090, 1053, 1053, 1091, 1092,
     1092, 1053, 1092, 1053, 1053, 1093, 1094, 1094, 1094, 1053,
     1094, 1053, 1053, 1095, 1095, 1053, 1096, 1097, 1053, 1053,
     1098, 1053, 1053, 1053, 1099, 1053, 1053, 1053, 1100, 1053,
     1053, 1053, 1101, 1102, 1102, 1102, 1053, 1053, 1103, 1104,
     1053, 1053, 1053, 1053, 1105, 1105, 1053, 1106, 1053, 1107,
     1053, 1053, 1108, 1109, 1053, 1053, 1110, 1053, 1111, 1053,
     1053, 1053, 1053, 1112, 1053, 1113, 1053, 1114, 1053, 1053,
     1053, 1115, 1053, 1053, 1053, 1053, 1116, 1053, 1117, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1118, 1053, 1053, 1053, 1053, 1053, 1119, 1053, 1053, 1053,
     1053, 1120, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1121, 1053, 1122, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1123, 1124, 1053, 1053, 1053, 1125,
     1126, 1053, 1127, 1053, 1053, 1053, 1053, 1053, 1128, 1053,
     1129, 1053, 1053, 1053, 1130, 1053, 1053, 1053, 1053, 1053,
     1131, 1131, 1053, 1053, 1053, 1132, 1053, 1133, 1134, 1135,
     1136, 1053, 1053, 1137, 1135, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1138, 1131,

     1138,  300,  300,  300,  300,  300,  300, 1053, 1053, 1139,
     1140, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1053,
     1053, 1053, 1053, 1053, 1142, 1053, 1143, 1144, 1143, 1053,
     1053, 1143, 1145, 1053, 1146, 1147, 1146, 1053, 1053, 1053,
     1053, 1053, 1148, 1053, 1148, 1149, 1150, 1148, 1149, 1053,
     1053, 1053, 1150, 1150, 1151, 1152, 1053, 1153, 1154, 1153,
     1053, 1053, 1153, 1155, 1053, 1156, 1157, 1156, 1053, 1155,
     1053, 1053, 1156, 1053, 1158, 1053, 1158, 1159, 1160, 1158,
     1053, 1161, 1159, 1160, 1160, 1162, 1163, 1053, 1053, 1053,
     1164, 1053, 1053, 1053, 1053, 1165, 1053, 1053, 1053, 1053,

     1166, 1053, 1167, 1168, 1167, 1053, 1053, 1167, 1169, 1053,
     1170, 1169, 1053, 1171, 1053, 1053, 1053, 1053, 1172, 1053,
     1172, 1173, 1174, 1172, 1173, 1053, 1053, 1053, 1174, 1174,
     1175, 1176, 1177, 1176, 1053, 1053, 1053, 1178, 1053, 1053,
     1053, 1053, 1179, 1053, 1053, 1053, 1180, 1053, 1181, 1053,
     1182, 1053, 1053, 1183, 1053, 1053, 1053, 1184, 1053, 1053,
     1185, 1185, 1053, 1053, 1186, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1187, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1188, 1053, 1053, 1053, 1189, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1190, 1053, 1053, 1053, 1191, 1053, 1053,

     1053, 1053, 1053, 1053, 1192, 1193, 1192, 1053, 1053, 1194,
     1195, 1194, 1053, 1053, 1196, 1053, 1053, 1197, 1053, 1198,
     1053, 1053, 1199, 1200, 1053, 1053, 1053, 1201, 1202, 1203,
     1053, 1053, 1204, 1205, 1204, 1203, 1053, 1053, 1053, 1053,
     1053, 1053, 1206, 1053, 1053, 1053, 1053, 1053, 1207, 1207,
     1208, 1053, 1209, 1209, 1209, 1053, 1053, 1210, 1209, 1209,
     1209, 1211, 1212, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1214, 1214, 1215, 1216, 1053, 1053, 1217, 1218, 1218, 1219,
     1220, 1220, 1221, 1222, 1053, 1223, 1053, 1053, 1053, 1224,
     1224, 1225, 1226, 1227, 1228, 1228, 1053, 1053, 1229, 1230,

     1231, 1053, 1053, 1053, 1053, 1053, 1232, 1233, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1234, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1235, 1053, 1236, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1237, 1053, 1053, 1053, 1238, 1239, 1240, 1053, 1053,
     1053, 1053, 1241, 1241, 1053, 1053, 1053, 1053, 1053, 1242,
     1053, 1243, 1243, 1244, 1243, 1243, 1243, 1245, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1247, 1053, 1053, 1248, 1249,
     1053, 1053, 1053, 1053, 1225, 1250, 1226, 1226, 1227, 1053,
     1053, 1231, 1053, 1053, 1053, 1053, 1053, 1233, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1251, 1240, 1053, 1053, 1053, 1053, 1053, 1053, 1252, 1252,
     1243, 1243, 1053, 1243, 1246, 1245, 1246, 1246, 1246, 1247,
     1053, 1053, 1248, 1249, 1053, 1053, 1053, 1225, 1253, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1254, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1251, 1053, 1053, 1053, 1053, 1243, 1243, 1053, 1243,
     1246, 1246, 1246, 1246, 1247, 1053, 1053, 1248, 1249, 1053,
     1053, 1053, 1225, 1253, 1253, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1255, 1256, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1243, 1243, 1243, 1246, 1246,
     1246, 1246, 1247, 1053, 1053, 1248, 1249, 1053, 1053, 1053,
     1225, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1257, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1258, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1243, 1243, 1243,
     1246, 1246, 1246, 1246, 1247, 1053, 1053, 1248, 1249, 1053,
     1053, 1053, 1225, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1243, 1243, 1053, 1245, 1246, 1246, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1243, 1243, 1245, 1246, 1246, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1243, 1245, 1246, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1243, 1245, 1246, 1053,
     1053, 1053, 1053, 1053, 1245, 1053, 1053, 1245, 1053, 1245,
     1053, 1245,    0, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053
    } ;

static yyconst flex_int16_t yy_nxt[7569] =
    {   0,
       81,   82,   83,   81,   82,   81,   84,   81,   85,   81,
       81,   81,   86,   81,   86,   87,   81,   86,   86,   81,
       88,   81,   89,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   81,   91,
       81,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   81,   81,   81,   81,   92,  144,
      144,   92,  148,  145,  145,  148,  149,  207,  207,  149,
     1049,   93,   94,   95,   95,   96,   95,   95,   95,   97,
       95,   95,   95,   95,   95,  228,   95,  228,   95,   99,

      546,  180,   99,   95,   95,   95,  146,  146,  180,  150,
       80, 1047,  150,  469,  208,  208,  336,   80,  468,  546,
      338,   95,  100,   95,  195,  196,  617,  195,  618,  197,
      195,  196,  229,  195,  229,  197,  214,  215,  181,  214,
      214,  215,  241,  214,  241,  181,  902,   95,   95,   95,
       95,   95,   96,   95,   95,   95,   97,   95,   95,   95,
       95,   95,  198,   95,  187,   95,   99,  187,  198,   99,
       95,   95,   95,  188,  216,  218,  188,  219,  216,  242,
      639,  242,  328,  329,  189,  525,  329,  189,   95,  100,
       95,  342,  342,  342,  342,  220,  640,  280, 1043,  280,

      280,  190,  280,  280,  190,  343,  329,  281,  460,  344,
      524,  460,  221,  461,   95,   95,   95,  103,  103,  104,
      103,  103,  103,  103,  103,  105,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  103,  107,  103,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  103,  103,  103,  106,  108,  109,  110,  109,  109,
      108,  108,  108,  111,  108,  108,  108,  108,  108,  108,

      112,  108,  108,  108,  113,  108,  108,  108,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  108,  115,  108,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  108,
      108,  116,  114,  117,  117,  118,  117,  117,  117,  119,
      117,  117,  117,  117,  117,  262,  117,  550,  117,  121,
      262,  450,  121,  122,  117,  117,  200,  263,  201,  218,
      451,  219,  263,  482,  506,  202,  551,  483,  508,  484,
      203,  117,  123,  117,  482,  200,  204,  201,  483,  220,

      273,  274,  264,  273,  202, 1041,  511,  264,  452,  203,
      513,  539,  540,  205,  254,  204,  221,  117,  117,  117,
      117,  117,  118,  117,  117,  117,  119,  117,  117,  117,
      117,  117,  205,  117,  255,  117,  121,  254,  275,  121,
      122,  117,  117,  223,  223,  224,  224,  537, 1053,  329,
      537,  255,  329,  342,  342,  342,  342,  255,  117,  123,
      117,  902,  235,  225,  225,  339,  340,  343,  339,  236,
      237,  344,  329,  336,  255,  350,  351,  338,  350,  336,
      226,  226,  238,  338,  117,  117,  117,  124,  124,  125,
      124,  124,  124,  126,  124,  124,  124,  124,  124,  239,

      124,  254,  124,  128,  235,  341,  128,  129,  130,  124,
      254,  236,  237,  266, 1040,  352,  353,  353,  353,  353,
      559,  256,  267,  354,  238,  124,  131,  124,  270,  560,
      256,  270,  506,  268,  477,  478,  508,  477,  256,  388,
      389,  239,  388,  323,  324,  658,  323,  256,  658,  271,
      269,  124,  124,  124,  124,  124,  125,  124,  124,  124,
      126,  124,  124,  124,  124,  124,  272,  124,  266,  124,
      128,  563,  479,  128,  129,  130,  124,  267,  282,  390,
      280,  283,  280,  284,  342,  342,  342,  342,  268, 1052,
      281,  486,  124,  131,  124,  487,  541,  563,  343,  854,

      506,  488,  344,  489,  508,  269,  855,  286,  384,  384,
      384,  384, 1045,  323,  324,  385,  323,  541,  124,  124,
      124,  108,  132,  133,  132,  132,  108,  108,  108,  134,
      108,  108,  108,  108,  108,  108,  135,  108,  108,  108,
      136,  108,  108,  108,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  108,
      115,  108,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  108,  108,  138,  137,  139,
      139,  140,  139,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  139,  142,  139,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  139,  139,  139,  141,  151,  151,  152,
      151,  151,  151,  153,  151,  151,  151,  151,  151,  563,
      151,  320,  151,  155,  320,  902,  155,  151,  151,  151,
      393,  394, 1028,  393,  321,  322,  342,  342,  342,  342,
      359,  360,  271,  345,  360,  151,  156,  151,  330,  331,

      343,  330,  398,  399,  344,  398,  563,  330,  331,  272,
      330,  556, 1053,  329,  360,  511,  329, 1038, 1036,  513,
      395,  151,  151,  151,  151,  151,  152,  151,  151,  151,
      153,  151,  151,  151,  151,  151,  329,  151,  332,  151,
      155,  557,  400,  155,  151,  151,  151,  323,  324, 1035,
      323,  347,  624, 1053,  360, 1033,  282,  360,  280,  283,
      280,  284,  151,  156,  151,  542,  625,  558,  281,  374,
      374,  374,  374,  429,  429,  429,  429,  360,  339,  340,
      430,  339, 1053,  375, 1014,  286,  542,  376,  151,  151,
      151,  157,  157,  158,  157,  157,  157,  157,  157,  159,

      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  157,
      161,  157,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  157,  157,  157,  160,  162,
      163,  164,  163,  163,  162,  162,  162,  165,  162,  162,
      162,  162,  162,  162,  166,  162,  162,  162,  167,  162,
      162,  162,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  162,  169,  162,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  162,  162,  170,  168,  171,  171,  172,
      171,  171,  171,  171,  171,  173,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  171,  175,  171,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  171,  171,  171,  174,   80,   80,  176,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,   80,  178,   80,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,   80,
       80,   80,  177,  182,  182,  183,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,

      184,  182,  185,  182,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  182,  182,  182,
      184,   80,   80,  191,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,   80,
      193,   80,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,   80,   80,   80,  192,  209,

      209,  210,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  209,  212,  209,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  209,  209,  209,  211,  230,  230,  231,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  230,  233,  230,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  230,  230,  230,  232,  243,  243,  244,  243,  243,
      243,  243,  243,  245,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  243,  247,  243,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  243,

      243,  243,  246,  248,  248,  249,  248,  248,  248,  248,
      248,  250,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  248,  252,  248,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  248,  248,  248,
      251,  257,  257,  258,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  259,  259,  259,  259,  259,  259,

      259,  259,  259,  259,  259,  259,  259,  259,  259,  257,
      260,  257,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  257,  257,  257,  259,  287,
      348,  348,  348,  348,  902,  367,  368,  345,  541,  368,
      288,  369,  404,  405,  343, 1032,  405,  902,  344,  552,
      289,  541,  552,  290,  291,  541,  902,  292,  293,  368,
      294,  295, 1031,  511, 1053,  368,  405,  513,  368,  289,
     1053,  541,  541,  290,  291,  361,  362,  541,  361,  292,
      293,  296,  297,  294,  295,  298,  298,  563,  368, 1053,

      360,  636,  541,  360,  370,  347, 1030,  490,  298,  298,
      299, 1026,  486, 1053,  368,  659,  487,  368,  572,  369,
      541,  572,  488,  360,  489,  363,  637,  301, 1025,  350,
      351,  302,  350,  303,  304,  305, 1024,  368, 1053,  405,
      541,  572,  405,  371,  372,  659,  371,  306,  415,  416,
      307,  415,  308,  309,  310,  298,  298, 1053,  368, 1023,
      840,  368,  405, 1053,  374,  374,  374,  374,  298,  298,
      301,  659,  374,  374,  374,  374,  841,  585,  375,  377,
      585,  368,  376,  373, 1022,  382,  375,  299,  417,  313,
      376,  314,  450,  315,  316,  317, 1021,  380,  380,  380,

      380,  451,  426,  427,  377,  426,  270,  318, 1020,  270,
      319,  375,  308,  309,  310,  376,  381,  374,  374,  381,
      361,  362,  541,  361,  382,  406,  407,  271,  406,  452,
      375,  859, 1019,  736,  376,  273,  274,  379,  273, 1053,
      405,  541,  428,  405,  272,  860,  418,  418,  418,  418,
      410,  410,  410,  410,  736, 1018, 1017,  411,  435,  436,
      419,  435,  379,  405,  420,  408,  412,  412,  413,  418,
      418,  418,  418,  275,  418,  418,  418,  418,  655,  371,
      372,  421,  371,  419,  992, 1011,  460,  420,  419,  460,
     1010,  461,  420,  424,  424,  424,  424,  655,  437,  541,

      421,  418,  418,  418,  418,  440,  441,  419,  440,  444,
      445,  420,  444, 1009, 1007,  419,  453,  453,  541,  420,
      470,  471,  563,  470,  474,  475, 1050,  474, 1006,  453,
      453,  454,  491,  492,  552,  491, 1005,  552, 1004,  423,
      495,  496, 1003,  495,  552,  442, 1002,  552,  453,  446,
      499,  500, 1001,  499,  502,  503,  713,  502,  423,  713,
      472, 1000,  273,  274,  476,  273,  658,  543,  552,  658,
      543,  552,  493,  659,  993,  453,  455,  456,  543,  455,
      497,  543,  453,  453,  992,  563,  552,  544,  552,  552,
      501,  552, 1048,  991,  504,  453,  453,  453,  544,  662,

      275,  545,  280,  659,  280,  280,  563,  280,  280,  714,
      552,  990,  281,  552,  454,  552,  457,  552,  552,  564,
      552,  274,  556,  545,  563,  552,  563,  552,  552,  659,
      552,  552,  989,  566,  552,  328,  329,  320,  988,  329,
      320,  453,  298,  298,  987,  565,  388,  389,  563,  388,
      321,  322,  557,  563,  986,  298,  298,  526,  271,  329,
     1053,  329,  667,  567,  329,  563,  985,  328,  329,  563,
      552,  329,  661,  552,  298,  272,  568,  654,  558,  984,
      654,  304,  305,  570,  329,  569,  579,  393,  394,  579,
      393,  329,  342,  342,  342,  342,  983,  544,  982,  308,

      309,  310,  298,  298,  573,  726,  343,  981,  726,  579,
      344,  353,  353,  353,  353,  298,  298,  298,  354,  980,
      979,  348,  348,  348,  348,  978,  977,  665,  345, 1053,
     1053, 1053, 1053,  976,  526,  343, 1053,  398,  399,  344,
      398,  304,  305, 1053,  975,  974,  478, 1053,  353,  353,
      353,  353,  972,  406,  407,  354,  406,  971,  970,  308,
      309,  310,  531,  415,  416,  531,  415,  531,  531,  531,
      531,  531,  532,  531,  533,  531,  533,  534,  531,  969,
      968,  531,  531,  531,  536,  582,  347,  967,  582,  342,
      342,  342,  342,  966, 1053,  342,  342,  342,  342,  965,

      531,  531,  531,  343,  964,  902,  962,  344,  582,  343,
      359,  360,  733,  344,  360,  733,  961,  348,  348,  348,
      348,  960,  426,  427,  345,  426,  531,  531,  531,  531,
      552,  343,  959,  552,  360,  344, 1053, 1053, 1053, 1053,
     1053, 1053, 1053,  360,  654, 1053,  360,  654,  958, 1053,
     1053, 1053,  359,  360,  367,  368,  360,  957,  368,  956,
      369, 1053,  368,  955,  544,  368,  360, 1053, 1053,  374,
      374,  374,  374,  367,  368,  954,  360,  368,  368,  369,
      404,  405,  347,  375,  405,  368,  952,  376,  591,  580,
      951,  591,  950, 1053, 1053, 1053,  947,  368,  380,  380,

      380,  380,  946,  937,  405,  377, 1053, 1053, 1053, 1053,
      583,  591,  375, 1053, 1053,  405,  376,  936,  405,  658,
     1053,  935,  658,  934, 1053,  381,  374,  374,  381,  384,
      384,  384,  384,  382,  435,  436,  385,  435,  405,  375,
      933,  932,  931,  376,  380,  380,  380,  380,  930,  929,
      928,  377,  381,  374,  374,  381,  440,  441,  375,  440,
      382,  927,  376,  379,  404,  405,  375,  926,  405,  925,
      376, 1053,  381,  374,  374,  381,  384,  384,  384,  384,
      382,  444,  445,  385,  444,  924,  375,  923,  405,  922,
      376, 1053, 1053, 1053, 1053,  921,  455,  456, 1053,  455,

      920,  592,  919,  410,  410,  410,  410,  917,  916,  379,
      411,  410,  410,  410,  410,  410,  410,  410,  410,  412,
      412,  413,  411,  410,  410,  410,  410,  913,  912,  413,
      411,  412,  412,  413,  418,  418,  418,  418,  911,  595,
      595,  413,  424,  424,  424,  424,  910,  909,  419,  421,
      470,  471,  420,  470,  474,  475,  419,  474,  908,  907,
      420, 1053, 1053, 1053, 1053,  906,  902,  905, 1053,  418,
      418,  418,  418,  477,  478, 1053,  477,  491,  492, 1053,
      491,  495,  496,  419,  495,  904,  903,  420,  429,  429,
      429,  429,  902,  901,  900,  430,  424,  424,  424,  424,

      899,  499,  500,  421,  499,  502,  503,  423,  502,  552,
      419,  479,  552,  898,  420,  418,  418,  418,  418,  897,
      429,  429,  429,  429,  896,  552, 1053,  430,  552,  419,
      895,  894,  893,  420, 1053, 1053, 1053, 1053,  892,  890,
      585, 1053,  552,  585,  889,  552,  888,  552,  382,  552,
      552,  552,  552,  663,  552,  552,  552,  726,  552,  552,
      726,  423,  531,  563,  885,  531,  884,  531,  531,  531,
      531,  531,  532,  531,  533,  531,  533,  648,  531,  875,
      671,  531,  531,  531,  536,  563,  666,  563,  740,  563,
      874,  740,  552,  672,  563,  552,  669,  873,  670,  872,

      531,  649,  531,  552,  742,  647,  552,  328,  572,  552,
      871,  572,  552,  673, 1053,  572,  328,  329,  572,  870,
      329,  359,  579,  869,  868,  579,  531,  531,  531,  531,
      563,  572,  552, 1053,  579,  552,  674,  579,  572,  867,
      329,  563,  359,  360,  585,  579,  360,  585,  675,  367,
      582,  676,  382,  582,  866,  369,  865,  579, 1053,  582,
      552,  864,  582,  552, 1053,  741,  360,  552,  367,  368,
      552,  863,  368,  582,  369,  404,  591,  679,  862,  591,
     1053,  591,  582,  861,  591,  404,  405,  858,  552,  405,
      661,  552,  368,  857,  410,  410,  410,  410,  856,  591,

      853,  686,  852,  680,  591,  563,  744,  851,  850,  405,
      687,  687,  413,  749,  689,  689,  689,  689,  848,  847,
      685,  411,  410,  410,  410,  410,  846,  918, 1008,  411,
      918, 1008,  413,  807,  410,  410,  410,  410,  595,  595,
      413,  411,  282,  845,  280, 1034,  280,  732, 1034,  844,
      595,  595,  413,  843,  281,  739,  740,  739,  739,  740,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  739,  739,  739,  300,  300,  300,  300,

      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  739,
      739,  739,  739,  552,  552,  552,  552,  552,  552,  552,
      328,  329,  552,  842,  329,  552,  359,  360,  552,  839,
      360,  410,  410,  410,  410,  838,  552,  837,  686,  552,
      552,  836,  552,  552,  329,  552,  835,  687,  687,  413,
      360,  834,  563,  563,  552,  552,  833,  552,  552,  750,
      832,  552,  876,  748,  552,  753,  938,  661,  745,  739,
      740,  739,  739,  740,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  563,  563,  877,  808,  831,  830,  878,  563,
      367,  368,  552,  829,  368,  552,  369,  739,  746,  739,
      747,  552,  828,  670,  552,  670,  404,  405,  552,  552,
      405,  552,  552,  827,  368,  410,  410,  410,  410,  826,
      822,  821,  686,  739,  739,  739,  739,  820,  817,  754,
      405,  687,  687,  413,  689,  689,  689,  689,  770,  771,
      816,  411,  809,  772,  806,  758,  773,  774,  995,  805,
      810,  775,  413,  939,  940,  776,  777,  282,  804,  280,
      552,  280,  732,  552,  803, 1042,  328,  329, 1042,  281,
      329,  410,  410,  410,  410,  647, 1044, 1046,  686, 1044,

     1046,  552, 1044, 1046,  552, 1044, 1046,  824,  824,  413,
      329,  552,  552,  801,  552,  552,  552,  815,  563,  552,
      552,  552,  800,  552,  552,  811,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  563,
      563,  359,  360,  661,  563,  360,  812,  552,  563,  563,
      552,  814,  879,  799,  739,  739,  739,  798,  797,  813,
      367,  368,  796,  795,  368,  360,  369,  941,  552,  404,
      405,  552,  818,  405,  552,  328,  329,  552,  794,  329,
      739,  739,  739,  739,  368,  563,  552,  793,  792,  552,

      880,  819,  791,  405,  359,  360,  790,  789,  360,  329,
      823,  367,  368,  883,  788,  368,  563,  369, 1051,  404,
      405, 1051,  563,  405,  552,  787,  552,  552,  360,  552,
      552,  786,  886,  552,  563,  368,  881,  942,  552,  887,
      785,  552,  882,  405,  784,  783,  782,  891,  410,  410,
      410,  410,  781,  780,  779,  686,  410,  410,  410,  410,
      778,  769,  563,  686,  824,  824,  413,  552,  563,  943,
      552, 1012,  824,  824,  413,  944,  328,  329,  359,  360,
      329,  768,  360,  367,  368,  996,  274,  368,  996,  369,
      404,  405,  552,  767,  405,  552,  994,  766,  552,  765,

      329,  552,  360,  552,  764,  563,  552,  368,  763,  328,
      329,  359,  360,  329,  405,  360,  762,  433,  945,  670,
      948,  996,  274,  997,  996,  949,  552,  404,  405,  552,
      563,  405,  953,  329,  761,  360,  563,  367,  368,  552,
      760,  368,  552,  369,  552,  552,  552,  552,  552,  552,
      998,  405,  757,  756,  999,  552, 1013,  552,  552,  275,
      552,  368,  552, 1044,  563,  552, 1044,  273,  274,  755,
      273, 1015,  562,  752,  562,  562,  562,  563,  642,  751,
      563,  642,  642,  743,  563,  738, 1027,  737,  661,  544,
      670,  735, 1016,  563,  734,  660, 1029,  660,  660,  660,

      563,  563,  730,  729,  728,  997,  727,  562, 1037,  562,
      562,  562,  640, 1039,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,

      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,

      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,  265,  265,  276,  276,
      725,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  279,  668,  724,  668,  668,
      668,  642,  723,  722,  642,  642,  721,  720,  279,  719,
      279,  279,  279,  718,  717,  279,  280,  716,  280,  280,
      715,  280,  712,  711,  280,  280,  710,  280,  280,  280,
      285,  708,  285,  285,  285,  285,  707,  285,  706,  705,
      285,  285,  285,  285,  285,  285,  300,  300,  660,  704,
      660,  660,  660,  703,  702,  701,  700,  699,  300,  300,

      300,  300,  300,  300,  300,  300,  300,  311,  697,  311,
      311,  696,  311,  695,  694,  311,  311,  693,  311,  311,
      311,  312,  312,  433,  691,  690,  684,  683,  682,  681,
      678,  677,  657,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  325,  325,  656,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  327,
      652,  327,  327,  327,  327,  327,  651,  650,  327,  327,
      327,  327,  327, 1053,  281,  327,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  335,  281,  335,  335,  335,  647,  529,
      335,  337,  645,  337,  337,  644,  643,  337,  641,  337,
      337,  337,  638,  635,  337,  346,  346,  346,  346,  634,
      346,  511,  633,  632,  506,  631,  630,  346,  629,  628,
      346,  627,  626,  346,  623,  346,  346,  346,  622,  346,
      346,  349,  349,  349,  349,  621,  620,  619,  616,  480,
      615,  614,  613,  349,  612,  349,  349,  611,  463,  349,
      463,  349,  349,  349,  610,  609,  349,  355,  355,  355,
      355,  607,  355,  457,  452,  606,  605,  604,  603,  439,

      602,  433,  600,  433,  598,  355,  419,  355,  355,  355,
      597,  594,  355,  356,  356,  402,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      358,  589,  358,  358,  358,  358,  358,  397,  588,  358,
      358,  358,  358,  358,  392,  587,  358,  364,  364,  375,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  366,  365,  366,  366,  366,  366,
      366,  366,  369,  366,  366,  366,  366,  366,  365,  357,

      366,  378,  378,  378,  378,  576,  378,  343,  575,  336,
      574,  334,  326,  378,  561,  555,  378,  554,  553,  378,
      551,  378,  378,  378,  548,  378,  378,  383,  383,  383,
      383,  547,  538,  383,  281,  281,  529,  277,  527,  383,
      524,  383,  383,  522,  521,  383,  519,  383,  383,  383,
      517,  516,  383,  386,  386,  386,  386,  514,  386,  509,
      480,  468,  467,  466,  464,  463,  459,  452,  448,  439,
      433,  386,  419,  386,  386,  386,  402,  397,  386,  387,
      392,  375,  387,  365,  357,  357,  387,  343,  387,  387,
      387,  334,  326,  387,  391,  391,  281,  391,  391,  391,

      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  396,  396,  281,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  401,  401,
      278,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  403,  277,  403,  403,  403,
      403,  403, 1053,  102,  403,  403,  403,  403,  403,  102,
     1053,  403,  409, 1053,  409,  409,  409, 1053, 1053,  409,

      414,  414,  414,  414, 1053,  414, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053,  414,  414, 1053, 1053,  414, 1053,
      414,  414,  414, 1053, 1053,  414,  422,  422,  422,  422,
     1053,  422, 1053, 1053, 1053, 1053, 1053, 1053,  422, 1053,
     1053,  422, 1053, 1053,  422, 1053,  422,  422,  422, 1053,
      422,  422,  425,  425,  425,  425, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053,  425, 1053,  425,  425, 1053, 1053,
      425, 1053,  425,  425,  425, 1053, 1053,  425,  431,  431,
      431,  431, 1053,  431, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053,  431, 1053,  431,  431,

      431, 1053, 1053,  431,  432, 1053,  432,  432,  432, 1053,
     1053,  432,  434, 1053,  434, 1053, 1053, 1053,  434, 1053,
      434,  434,  434, 1053, 1053,  434,  438,  438, 1053,  438,
     1053, 1053, 1053,  438, 1053,  438,  438,  438, 1053, 1053,
      438,  443,  443, 1053,  443,  443,  443,  443,  443,  443,
     1053,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443, 1053,  443,  443,  443,  443,  443,  443,  447, 1053,
     1053,  447, 1053, 1053, 1053,  447, 1053,  447,  447,  447,
     1053, 1053,  447,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449, 1053,  449,  449,  449,  449,  449,  449,  449,  449,
      451,  451, 1053,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451, 1053,  451,
      451,  451,  451,  451,  451,  451,  451,  458, 1053, 1053,
      458, 1053, 1053, 1053,  458, 1053,  458,  458,  458, 1053,
     1053,  458,  462,  462, 1053,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  465,
      465, 1053,  465, 1053,  465,  465,  465,  465, 1053,  465,
      465,  465,  465, 1053,  465,  465,  465, 1053,  465, 1053,

      465,  465,  465,  465,  465,  465,  473, 1053, 1053,  473,
     1053, 1053, 1053,  473, 1053,  473,  473,  473, 1053, 1053,
      473,  481,  481, 1053,  481, 1053,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481, 1053,
      481, 1053,  481,  481,  481,  481,  481,  481,  485,  485,
     1053,  485, 1053,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485, 1053,  485, 1053,  485,
      485,  485,  485,  485,  485,  494, 1053, 1053,  494, 1053,
     1053, 1053,  494, 1053,  494,  494,  494, 1053, 1053,  494,
      498,  498, 1053,  498,  498,  498,  498, 1053, 1053,  498,

      498,  498,  498,  498,  498,  498,  498,  498, 1053,  498,
     1053,  498,  498,  498,  498,  498,  498,  505, 1053,  505,
      505,  505, 1053, 1053,  505,  507, 1053,  507,  507, 1053,
     1053,  507, 1053,  507,  507,  507, 1053, 1053,  507,  510,
     1053,  510,  510,  510, 1053, 1053,  510,  512, 1053,  512,
      512, 1053, 1053,  512, 1053,  512,  512,  512, 1053, 1053,
      512,  515,  515, 1053,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515, 1053,
      515, 1053,  515,  515,  515,  515,  515,  515,  518, 1053,
     1053,  518, 1053, 1053, 1053,  518, 1053,  518,  518,  518,

     1053, 1053,  518,  520,  520, 1053,  520,  520,  520,  520,
      520,  520,  520,  520,  520, 1053,  520,  520,  520,  520,
      520,  520,  520, 1053,  520,  520,  520,  520,  520,  520,
      523,  523, 1053,  523,  523,  523,  523,  523,  523, 1053,
      523,  523,  523,  523,  523,  523,  523,  523, 1053,  523,
     1053,  523,  523,  523,  523,  523,  523,  300,  300, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  276,  276,
     1053,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  276,  276,  276,  279, 1053,  279,  279,  279,
     1053, 1053,  279,  528,  528, 1053, 1053,  528, 1053,  528,
      528,  528, 1053, 1053,  528,  280, 1053,  280,  280, 1053,
      280, 1053, 1053,  280,  280, 1053,  280,  280,  280,  530,
     1053, 1053,  530, 1053, 1053, 1053,  530, 1053,  530,  530,
      530,  535, 1053, 1053,  535, 1053,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  549, 1053,
      549,  549,  549, 1053,  549,  311, 1053,  311,  311, 1053,
      311, 1053, 1053,  311,  311, 1053,  311,  311,  311,  312,

     1053, 1053,  312, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053,  312,  312,  312,
      312,  312,  325,  325, 1053,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  327,
     1053,  327,  327,  327,  327,  327, 1053, 1053,  327,  327,
      327,  327,  327, 1053, 1053,  327,  571, 1053,  571, 1053,
      571,  571,  571, 1053, 1053,  571,  571,  571,  571,  571,
     1053, 1053,  571,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      337, 1053,  337,  337, 1053, 1053,  337, 1053,  337,  337,
      337, 1053, 1053,  337,  335, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053,  335, 1053,  335,
      335,  335, 1053, 1053,  335,  346,  346,  346,  346, 1053,
      346, 1053, 1053, 1053, 1053, 1053, 1053,  346, 1053, 1053,
      346, 1053, 1053,  346, 1053,  346,  346,  346, 1053,  346,
      346,  349,  349,  349,  349, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053,  349, 1053,  349,  349, 1053, 1053,  349,
     1053,  349,  349,  349, 1053, 1053,  349,  355,  355,  355,

      355, 1053,  355, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053,  355, 1053,  355,  355,  355,
     1053, 1053,  355,  577, 1053, 1053, 1053,  577, 1053,  577,
      577,  577, 1053, 1053,  577,  356,  356, 1053,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  358, 1053,  358,  358,  358,  358,  358, 1053,
     1053,  358,  358,  358,  358,  358, 1053, 1053,  358,  578,
     1053,  578, 1053,  578,  578,  578, 1053, 1053,  578,  578,
      578,  578,  578, 1053, 1053,  578,  364,  364, 1053,  364,

      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  366, 1053,  366,  366,  366,  366,  366,
      366, 1053,  366,  366,  366,  366,  366, 1053, 1053,  366,
      581, 1053,  581, 1053,  581,  581,  581, 1053, 1053,  581,
      581,  581,  581,  581, 1053, 1053,  581,  378,  378,  378,
      378, 1053,  378, 1053, 1053, 1053, 1053, 1053, 1053,  378,
     1053, 1053,  378, 1053, 1053,  378, 1053,  378,  378,  378,
     1053,  378,  378,  383,  383,  383,  383, 1053, 1053,  383,
     1053, 1053, 1053, 1053, 1053,  383, 1053,  383,  383, 1053,

     1053,  383, 1053,  383,  383,  383, 1053, 1053,  383,  386,
      386,  386,  386, 1053,  386, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053,  386, 1053,  386,
      386,  386, 1053, 1053,  386,  584,  584,  584,  584,  584,
      584,  584,  584, 1053,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  586, 1053, 1053,  586, 1053, 1053,  586, 1053,
     1053, 1053, 1053, 1053, 1053, 1053,  586, 1053, 1053, 1053,
      586, 1053,  586,  586,  586, 1053, 1053,  586,  387, 1053,
     1053,  387, 1053, 1053, 1053,  387, 1053,  387,  387,  387,

     1053, 1053,  387,  391,  391, 1053,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      396,  396, 1053,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  401,  401, 1053,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  403, 1053,  403,  403,  403,  403,
      403, 1053, 1053,  403,  403,  403,  403,  403, 1053, 1053,

      403,  590, 1053,  590, 1053,  590,  590,  590, 1053, 1053,
      590,  590,  590,  590,  590, 1053, 1053,  590,  414,  414,
      414,  414, 1053,  414, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053,  414,  414, 1053, 1053,  414, 1053,  414,  414,
      414, 1053, 1053,  414,  593, 1053,  593,  593,  593, 1053,
     1053,  593,  596,  596,  596,  596, 1053,  596, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053,  596,  596, 1053, 1053,
      596, 1053,  596,  596,  596, 1053, 1053,  596,  422,  422,
      422,  422, 1053,  422, 1053, 1053, 1053, 1053, 1053, 1053,
      422, 1053, 1053,  422, 1053, 1053,  422, 1053,  422,  422,

      422, 1053,  422,  422,  425,  425,  425,  425, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053,  425, 1053,  425,  425,
     1053, 1053,  425, 1053,  425,  425,  425, 1053, 1053,  425,
      431,  431,  431,  431, 1053,  431, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,  431, 1053,
      431,  431,  431, 1053, 1053,  431,  599, 1053, 1053, 1053,
      599, 1053,  599,  599,  599, 1053, 1053,  599,  434, 1053,
      434, 1053, 1053, 1053,  434, 1053,  434,  434,  434, 1053,
     1053,  434,  601, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053,  601, 1053,  601,  601,  601,

     1053, 1053,  601,  438,  438, 1053,  438, 1053, 1053, 1053,
      438, 1053,  438,  438,  438, 1053, 1053,  438,  443,  443,
     1053,  443,  443,  443,  443,  443,  443, 1053,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443, 1053,  443,
      443,  443,  443,  443,  443,  447, 1053, 1053,  447, 1053,
     1053, 1053,  447, 1053,  447,  447,  447, 1053, 1053,  447,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449, 1053,  449,
      449,  449,  449,  449,  449,  449,  449,  451,  451, 1053,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451, 1053,  451,  451,  451,  451,
      451,  451,  451,  451,  608, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053,  608, 1053,  608,
      608,  608, 1053, 1053,  608,  458, 1053, 1053,  458, 1053,
     1053, 1053,  458, 1053,  458,  458,  458, 1053, 1053,  458,
      462,  462, 1053,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  465,  465, 1053,
      465, 1053,  465,  465,  465,  465, 1053,  465,  465,  465,
      465, 1053,  465,  465,  465, 1053,  465, 1053,  465,  465,

      465,  465,  465,  465,  473, 1053, 1053,  473, 1053, 1053,
     1053,  473, 1053,  473,  473,  473, 1053, 1053,  473,  481,
      481, 1053,  481, 1053,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481, 1053,  481, 1053,
      481,  481,  481,  481,  481,  481,  485,  485, 1053,  485,
     1053,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485, 1053,  485, 1053,  485,  485,  485,
      485,  485,  485,  494, 1053, 1053,  494, 1053, 1053, 1053,
      494, 1053,  494,  494,  494, 1053, 1053,  494,  498,  498,
     1053,  498,  498,  498,  498, 1053, 1053,  498,  498,  498,

      498,  498,  498,  498,  498,  498, 1053,  498, 1053,  498,
      498,  498,  498,  498,  498,  507, 1053,  507,  507, 1053,
     1053,  507, 1053,  507,  507,  507, 1053, 1053,  507,  505,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053,  505, 1053,  505,  505,  505, 1053, 1053,  505,
      512, 1053,  512,  512, 1053, 1053,  512, 1053,  512,  512,
      512, 1053, 1053,  512,  510, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053,  510, 1053,  510,
      510,  510, 1053, 1053,  510,  515,  515, 1053,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,

      515,  515,  515, 1053,  515, 1053,  515,  515,  515,  515,
      515,  515,  518, 1053, 1053,  518, 1053, 1053, 1053,  518,
     1053,  518,  518,  518, 1053, 1053,  518,  520,  520, 1053,
      520,  520,  520,  520,  520,  520,  520,  520,  520, 1053,
      520,  520,  520,  520,  520,  520,  520, 1053,  520,  520,
      520,  520,  520,  520,  523,  523, 1053,  523,  523,  523,
      523,  523,  523, 1053,  523,  523,  523,  523,  523,  523,
      523,  523, 1053,  523, 1053,  523,  523,  523,  523,  523,
      523,  528,  528, 1053, 1053,  528, 1053,  528,  528,  528,
     1053, 1053,  528,  646,  646, 1053,  646,  646,  646, 1053,

      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      530,  530, 1053,  530, 1053, 1053, 1053,  530, 1053,  530,
      530,  530,  280, 1053,  280,  280, 1053,  280, 1053, 1053,
      280,  280, 1053,  280,  280,  280,  535, 1053, 1053,  535,
     1053,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  653,  653, 1053,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,

      549, 1053, 1053,  549, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,  549, 1053,
      549,  549,  549,  300, 1053, 1053,  300, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053,  300, 1053,  300,  300,  300,  664,  664, 1053,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
     1053,  664,  664,  312, 1053, 1053,  312, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053,  312,  312,  312,  312,  312,  571, 1053,  571,  571,

      571,  571,  571, 1053, 1053,  571,  571,  571,  571,  571,
     1053, 1053,  571,  327, 1053,  327,  327,  327,  327,  327,
     1053, 1053,  327,  327,  327,  327,  327, 1053, 1053,  327,
      335, 1053,  335,  335,  335, 1053, 1053,  335,  577, 1053,
     1053, 1053,  577, 1053,  577,  577,  577, 1053, 1053,  577,
      578, 1053,  578,  578,  578,  578,  578, 1053, 1053,  578,
      578,  578,  578,  578, 1053, 1053,  578,  358, 1053,  358,
      358,  358,  358,  358, 1053, 1053,  358,  358,  358,  358,
      358, 1053, 1053,  358,  581, 1053,  581,  581,  581,  581,
      581,  581, 1053,  581,  581,  581,  581,  581, 1053, 1053,

      581,  366, 1053,  366,  366,  366,  366,  366,  366, 1053,
      366,  366,  366,  366,  366, 1053, 1053,  366,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  586, 1053, 1053,  586, 1053,
     1053,  586, 1053, 1053, 1053, 1053, 1053, 1053, 1053,  586,
     1053, 1053, 1053,  586, 1053,  586,  586,  586, 1053, 1053,
      586,  590, 1053,  590,  590,  590,  590,  590, 1053, 1053,
      590,  590,  590,  590,  590, 1053, 1053,  590,  403, 1053,
      403,  403,  403,  403,  403, 1053, 1053,  403,  403,  403,

      403,  403, 1053, 1053,  403,  688,  688,  688,  688, 1053,
      688, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,  688,
      688, 1053, 1053,  688, 1053,  688,  688,  688, 1053, 1053,
      688,  593,  593,  593,  593, 1053,  593, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053,  593, 1053, 1053,  593,
     1053,  593,  593,  593, 1053, 1053,  593,  596,  596,  596,
      596, 1053,  596, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053,  596,  596, 1053, 1053,  596, 1053,  596,  596,  596,
     1053, 1053,  596,  599, 1053, 1053, 1053,  599, 1053,  599,
      599,  599, 1053, 1053,  599,  601, 1053,  601,  601,  601,

     1053, 1053,  601,  692, 1053,  692, 1053, 1053, 1053,  692,
     1053,  692,  692,  692, 1053, 1053,  692,  608, 1053,  608,
      608,  608, 1053, 1053,  608,  698, 1053, 1053, 1053,  698,
     1053,  698,  698,  698, 1053, 1053,  698,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709, 1053,  709,  709,  709, 1053,  709, 1053, 1053,
      709,  709,  709,  709,  505, 1053,  505,  505,  505, 1053,
     1053,  505,  510, 1053,  510,  510,  510, 1053, 1053,  510,
      646,  646, 1053,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,

      646,  646,  646,  646,  646,  646,  646,  731, 1053, 1053,
      731, 1053, 1053, 1053,  731, 1053,  731,  731,  731,  285,
     1053,  285, 1053,  285,  285, 1053,  285, 1053, 1053,  285,
      285, 1053,  285,  285,  285,  653,  653, 1053,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  300, 1053, 1053,  300, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
      300, 1053,  300,  300,  300,  664,  664, 1053,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,

      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  668,  668,  668,  668,  668,  312, 1053, 1053,
      312, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053,  312,  312,  312,  312,  312,
      327, 1053,  327,  327,  327,  327,  327, 1053, 1053,  327,
      327,  327,  327,  327, 1053, 1053,  327,  358, 1053,  358,
      358,  358,  358,  358, 1053, 1053,  358,  358,  358,  358,
      358, 1053, 1053,  358,  366, 1053,  366,  366,  366,  366,
      366,  366, 1053,  366,  366,  366,  366,  366, 1053, 1053,
      366,  759, 1053,  759,  759,  759, 1053, 1053,  759,  802,

      802, 1053,  802, 1053, 1053, 1053,  802, 1053,  802,  802,
      802,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
     1053,  739, 1053, 1053, 1053,  739,  739,  739,  825,  825,
      825,  825, 1053,  825, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053,  825,  825, 1053, 1053,  825, 1053,  825,  825,
      825, 1053, 1053,  825,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849, 1053,
      849,  849,  849, 1053,  849, 1053,  849, 1053,  849,  849,
      849,  914,  914,  914,  914,  914,  914,  914,  914,  914,

      914,  914,  914,  914,  914,  914, 1053,  914,  914,  914,
     1053,  914, 1053, 1053, 1053,  914,  914,  914,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915, 1053,  915,  915,  915, 1053,  915, 1053,
     1053, 1053,  915,  915,  915,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
     1053,  963,  963,  963, 1053,  963, 1053, 1053, 1053,  963,
      963,  963,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973, 1053,  973,  973,
      973, 1053,  973, 1053, 1053, 1053,  973,  973,  973,   79,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053
    } ;

static yyconst flex_int16_t yy_chk[7569] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,   21,
       22,    4,   23,   21,   22,   24,   23,   47,   48,   24,
     1047,    4,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   57,    5,   58,    5,    5,

      294,   35,    5,    5,    5,    5,   21,   22,   36,   23,
       35, 1043,   24,  205,   47,   48,  106,   36,  205,  294,
      106,    5,    5,    5,   43,   43,  482,   43,  482,   43,
       44,   44,   57,   44,   58,   44,   51,   51,   35,   51,
       52,   52,   63,   52,   64,   36, 1040,    5,    5,    5,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,   43,    6,   39,    6,    6,   40,   44,    6,
        6,    6,    6,   39,   51,   53,   40,   53,   52,   63,
      521,   64,   98,   98,   39,  269,   98,   40,    6,    6,
        6,  109,  109,  109,  109,   53,  521,   90, 1036,   90,

       90,   39,   90,   90,   40,  109,   98,   90,  195,  109,
      269,  195,   53,  195,    6,    6,    6,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   75,   13,  299,   13,   13,
       76,  186,   13,   13,   13,   13,   45,   75,   45,   54,
      186,   54,   76,  220,  246,   45,  299,  220,  246,  221,
       45,   13,   13,   13,  221,   46,   45,   46,  221,   54,

       83,   83,   75,   83,   46, 1033,  251,   76,  186,   46,
      251,  288,  288,   45,   69,   46,   54,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   46,   14,   69,   14,   14,   70,   83,   14,
       14,   14,   14,   55,   56,   55,   56,  286,   99,   99,
      286,   69,   99,  110,  110,  110,  110,   70,   14,   14,
       14, 1032,   61,   55,   56,  107,  107,  110,  107,   61,
       61,  110,   99,  335,   70,  115,  115,  335,  115,  337,
       55,   56,   61,  337,   14,   14,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   61,

       15,   71,   15,   15,   62,  107,   15,   15,   15,   15,
       72,   62,   62,   77, 1031,  115,  116,  116,  116,  116,
      306,   71,   77,  116,   62,   15,   15,   15,   82,  306,
       72,   82,  505,   77,  214,  214,  505,  214,   71,  142,
      142,   62,  142,  322,  322,  549,  322,   72,  549,   82,
       77,   15,   15,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   82,   16,   78,   16,
       16, 1050,  214,   16,   16,   16,   16,   78,   87,  142,
       87,   87,   87,   87,  114,  114,  114,  114,   78, 1050,
       87,  225,   16,   16,   16,  225,  289, 1038,  114,  786,

      507,  225,  114,  225,  507,   78,  786,   87,  138,  138,
      138,  138, 1038,  323,  323,  138,  323,  289,   16,   16,
       16,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25, 1014,
       25,   92,   25,   25,   92, 1030,   25,   25,   25,   25,
      146,  146, 1014,  146,   92,   92,  111,  111,  111,  111,
      120,  120,   92,  111,  120,   25,   25,   25,  100,  100,

      111,  100,  150,  150,  111,  150, 1028,  330,  330,   92,
      330,  305,  100,  100,  120,  510,  100, 1028, 1026,  510,
      146,   25,   25,   25,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  100,   26,  100,   26,
       26,  305,  150,   26,   26,   26,   26,   94,   94, 1025,
       94,  111,  489,  121,  121, 1023,   94,  121,   94,   94,
       94,   94,   26,   26,   26,  291,  489,  305,   94,  132,
      132,  132,  132,  170,  170,  170,  170,  121,  339,  339,
      170,  339,  997,  132,  997,   94,  291,  132,   26,   26,
       26,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   88,
      112,  112,  112,  112, 1022,  127,  127,  112,  290,  127,
       88,  127,  154,  154,  112, 1021,  154, 1020,  112,  312,
       88,  292,  312,   88,   88,  290, 1019,   88,   88,  127,
       88,   88, 1018,  512,  128,  128,  154,  512,  128,   88,
      128,  295,  292,   88,   88,  123,  123,  290,  123,   88,
       88,   88,   88,   88,   88,   89,   89,  312,  128,  123,

      123,  517,  295,  123,  129,  112, 1017,  226,   89,   89,
       89, 1010,  226,  129,  129,  644,  226,  129,  328,  129,
      542,  328,  226,  123,  226,  123,  517,   89, 1009,  350,
      350,   89,  350,   89,   89,   89, 1007,  129,  155,  155,
      542,  328,  155,  131,  131,  644,  131,   89,  161,  161,
       89,  161,   89,   89,   89,   91,   91,  131,  131, 1006,
      774,  131,  155,  131,  133,  133,  133,  133,   91,   91,
       91,  644,  134,  134,  134,  134,  774,  386,  133,  134,
      386,  131,  133,  131, 1005,  386,  134,   91,  161,   91,
      134,   91,  449,   91,   91,   91, 1004,  135,  135,  135,

      135,  449,  169,  169,  135,  169,  270,   91, 1003,  270,
       91,  135,   91,   91,   91,  135,  137,  137,  137,  137,
      361,  361,  545,  361,  137,  156,  156,  270,  156,  449,
      137,  790, 1002,  655,  137,  273,  273,  134,  273,  156,
      156,  545,  169,  156,  270,  790,  163,  163,  163,  163,
      160,  160,  160,  160,  655, 1001, 1000,  160,  175,  175,
      163,  175,  135,  156,  163,  156,  160,  160,  160,  164,
      164,  164,  164,  273,  165,  165,  165,  165,  546,  371,
      371,  165,  371,  164,  991,  990,  460,  164,  165,  460,
      979,  460,  165,  166,  166,  166,  166,  546,  175,  736,

      166,  168,  168,  168,  168,  178,  178,  166,  178,  181,
      181,  166,  181,  978,  976,  168,  189,  189,  736,  168,
      208,  208, 1048,  208,  212,  212, 1048,  212,  975,  189,
      189,  189,  229,  229,  552,  229,  969,  552,  968,  165,
      233,  233,  967,  233,  554,  178,  966,  554,  189,  181,
      239,  239,  965,  239,  242,  242,  622,  242,  166,  622,
      208,  964,  274,  274,  212,  274,  550,  293,  313,  550,
      293,  313,  229,  550,  937,  189,  190,  190,  541,  190,
      233,  541,  190,  190,  936, 1045,  314,  293,  315,  314,
      239,  315, 1045,  935,  242,  190,  190,  190,  541,  554,

      274,  293,  311,  550,  311,  311,  313,  311,  311,  622,
      316,  934,  311,  316,  190,  317,  190,  561,  317,  313,
      561,  933,  317,  293,  314,  553,  315,  319,  553,  550,
      319,  318,  932,  315,  318,  327,  327,  320,  931,  327,
      320,  190,  271,  271,  930,  314,  388,  388,  316,  388,
      320,  320,  317,  317,  929,  271,  271,  271,  320,  327,
      329,  329,  561,  316,  329,  319,  928,  332,  332,  318,
      559,  332,  553,  559,  271,  320,  318,  543,  317,  927,
      543,  271,  271,  319,  329,  318,  359,  393,  393,  359,
      393,  332,  342,  342,  342,  342,  926,  543,  925,  271,

      271,  271,  272,  272,  332,  640,  342,  924,  640,  359,
      342,  347,  347,  347,  347,  272,  272,  272,  347,  923,
      922,  343,  343,  343,  343,  921,  920,  559,  343,  345,
      345,  345,  345,  919,  272,  343,  345,  398,  398,  343,
      398,  272,  272,  345,  917,  916,  912,  345,  353,  353,
      353,  353,  911,  406,  406,  353,  406,  910,  909,  272,
      272,  272,  284,  415,  415,  284,  415,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  908,
      907,  284,  284,  284,  284,  367,  343,  906,  367,  346,
      346,  346,  346,  905,  345,  349,  349,  349,  349,  904,

      284,  284,  284,  346,  903,  901,  900,  346,  367,  349,
      358,  358,  649,  349,  358,  649,  899,  348,  348,  348,
      348,  898,  426,  426,  348,  426,  284,  284,  284,  284,
      300,  348,  897,  300,  358,  348,  300,  300,  354,  354,
      354,  354,  360,  360,  654,  354,  360,  654,  896,  300,
      300,  300,  363,  363,  366,  366,  363,  895,  366,  894,
      366,  368,  368,  893,  654,  368,  360,  368,  300,  374,
      374,  374,  374,  373,  373,  892,  363,  373,  366,  373,
      403,  403,  348,  374,  403,  368,  890,  374,  404,  363,
      889,  404,  888,  300,  300,  300,  885,  373,  375,  375,

      375,  375,  884,  875,  403,  375,  377,  377,  377,  377,
      373,  404,  375,  377,  405,  405,  375,  874,  405,  658,
      377,  873,  658,  872,  377,  378,  378,  378,  378,  379,
      379,  379,  379,  378,  435,  435,  379,  435,  405,  378,
      871,  870,  869,  378,  380,  380,  380,  380,  868,  867,
      866,  380,  381,  381,  381,  381,  440,  440,  380,  440,
      381,  865,  380,  375,  408,  408,  381,  864,  408,  863,
      381,  377,  383,  383,  383,  383,  384,  384,  384,  384,
      383,  444,  444,  384,  444,  862,  383,  861,  408,  860,
      383,  385,  385,  385,  385,  859,  455,  455,  385,  455,

      858,  408,  857,  409,  409,  409,  409,  855,  853,  380,
      409,  410,  410,  410,  410,  412,  412,  412,  412,  409,
      409,  409,  412,  414,  414,  414,  414,  850,  848,  410,
      414,  412,  412,  412,  418,  418,  418,  418,  847,  414,
      414,  414,  419,  419,  419,  419,  846,  845,  418,  419,
      470,  470,  418,  470,  474,  474,  419,  474,  844,  843,
      419,  421,  421,  421,  421,  842,  841,  840,  421,  422,
      422,  422,  422,  477,  477,  421,  477,  491,  491,  421,
      491,  495,  495,  422,  495,  839,  838,  422,  423,  423,
      423,  423,  837,  836,  835,  423,  424,  424,  424,  424,

      834,  499,  499,  424,  499,  502,  502,  419,  502,  555,
      424,  477,  555,  833,  424,  425,  425,  425,  425,  832,
      429,  429,  429,  429,  831,  566,  421,  429,  566,  425,
      830,  828,  827,  425,  430,  430,  430,  430,  826,  822,
      585,  430,  560,  585,  821,  560,  820,  564,  585,  567,
      564,  565,  567,  555,  565,  663,  568,  726,  663,  568,
      726,  424,  534,  566,  817,  534,  816,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  806,
      566,  534,  534,  534,  534,  564,  560,  567,  740,  565,
      805,  740,  569,  567,  568,  569,  564,  804,  565,  803,

      534,  534,  534,  570,  663,  802,  570,  571,  571,  662,
      801,  571,  662,  568,  572,  572,  573,  573,  572,  800,
      573,  578,  578,  799,  798,  578,  534,  534,  534,  534,
      569,  571,  665,  579,  579,  665,  569,  579,  572,  797,
      573,  570,  580,  580,  586,  578,  580,  586,  570,  581,
      581,  573,  586,  581,  796,  581,  795,  579,  582,  582,
      667,  794,  582,  667,  582,  662,  580,  675,  583,  583,
      675,  793,  583,  581,  583,  590,  590,  580,  792,  590,
      591,  591,  582,  791,  591,  592,  592,  789,  741,  592,
      665,  741,  583,  788,  593,  593,  593,  593,  787,  590,

      785,  593,  784,  583,  591,  675,  667,  783,  782,  592,
      593,  593,  593,  675,  594,  594,  594,  594,  781,  780,
      592,  594,  595,  595,  595,  595,  779,  856,  977,  595,
      856,  977,  594,  741,  596,  596,  596,  596,  595,  595,
      595,  596,  648,  778,  648, 1024,  648,  648, 1024,  777,
      596,  596,  596,  776,  648,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,

      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  666,  672,  669,  666,  672,  669,  807,
      676,  676,  807,  775,  676,  876,  679,  679,  876,  773,
      679,  687,  687,  687,  687,  772,  808,  771,  687,  808,
      810,  770,  742,  810,  676,  742,  769,  687,  687,  687,
      679,  768,  672,  669,  671,  673,  767,  671,  673,  676,
      766,  674,  807,  672,  674,  679,  876,  666,  669,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,

      670,  670,  671,  673,  808,  742,  765,  764,  810,  674,
      680,  680,  939,  763,  680,  939,  680,  670,  670,  670,
      671,  744,  762,  673,  744,  674,  685,  685,  877,  878,
      685,  877,  878,  761,  680,  688,  688,  688,  688,  760,
      757,  756,  688,  670,  670,  670,  670,  755,  752,  680,
      685,  688,  688,  688,  689,  689,  689,  689,  702,  702,
      751,  689,  743,  702,  738,  685,  702,  702,  939,  737,
      744,  702,  689,  877,  878,  702,  702,  732,  735,  732,
      745,  732,  732,  745,  734, 1035,  750,  750, 1035,  732,
      750,  759,  759,  759,  759,  731, 1037, 1041,  759, 1037,

     1041,  940, 1044, 1046,  940, 1044, 1046,  759,  759,  759,
      750,  747,  749,  729,  747,  749,  748,  750,  745,  748,
      811,  879,  728,  811,  879,  745,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  747,
      749,  753,  753,  940,  748,  753,  747,  812,  811,  879,
      812,  749,  811,  727,  746,  746,  746,  725,  724,  748,
      754,  754,  723,  722,  754,  753,  754,  879,  813,  758,
      758,  813,  753,  758,  814,  815,  815,  814,  721,  815,
      746,  746,  746,  746,  754,  812,  880,  720,  719,  880,

      812,  754,  718,  758,  818,  818,  717,  716,  818,  815,
      758,  819,  819,  815,  715,  819,  813,  819, 1049,  823,
      823, 1049,  814,  823,  881,  714,  994,  881,  818,  994,
      882,  712,  818,  882,  880,  819,  813,  880,  938,  819,
      711,  938,  814,  823,  710,  708,  707,  823,  824,  824,
      824,  824,  706,  705,  704,  824,  825,  825,  825,  825,
      703,  701,  881,  825,  824,  824,  824,  944,  882,  881,
      944,  994,  825,  825,  825,  882,  883,  883,  886,  886,
      883,  700,  886,  887,  887,  941,  941,  887,  941,  887,
      891,  891,  942,  699,  891,  942,  938,  697,  943,  696,

      883,  943,  886,  995,  695,  944,  995,  887,  694,  945,
      945,  948,  948,  945,  891,  948,  693,  692,  883,  944,
      886,  996,  996,  941,  996,  887,  998,  953,  953,  998,
      942,  953,  891,  945,  691,  948,  943,  949,  949,  999,
      690,  949,  999,  949, 1012, 1013, 1015, 1012, 1013, 1015,
      942,  953,  684,  683,  943, 1016,  995, 1027, 1016,  996,
     1027,  949, 1029, 1039,  998, 1029, 1039, 1052, 1052,  682,
     1052,  998, 1139,  678, 1139, 1139, 1139,  999, 1200,  677,
      668, 1200, 1200,  664, 1015,  657, 1013,  656, 1012,  653,
     1015,  652,  999, 1016,  651, 1208, 1016, 1208, 1208, 1208,

     1029, 1039,  646,  645,  643, 1052,  641, 1211, 1027, 1211,
     1211, 1211,  639, 1029, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1057, 1057, 1057, 1057, 1057,

     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,

     1060, 1060, 1060, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,

     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1070, 1070, 1070, 1070,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,
     1070, 1070, 1070, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,

     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1076, 1076,
      638, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1077, 1212,  634, 1212, 1212,
     1212, 1237,  632,  630, 1237, 1237,  629,  628, 1077,  627,
     1077, 1077, 1077,  626,  625, 1077, 1078,  624, 1078, 1078,
      623, 1078,  621,  620, 1078, 1078,  619, 1078, 1078, 1078,
     1079,  618, 1079, 1079, 1079, 1079,  617, 1079,  616,  615,
     1079, 1079, 1079, 1079, 1079, 1079, 1080, 1080, 1242,  614,
     1242, 1242, 1242,  613,  612,  611,  610,  609, 1080, 1080,

     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1081,  606, 1081,
     1081,  605, 1081,  604,  603, 1081, 1081,  602, 1081, 1081,
     1081, 1082, 1082,  601,  598,  597,  589,  588,  587,  584,
      576,  575,  548, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1083, 1083,  547, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1084,
      540, 1084, 1084, 1084, 1084, 1084,  539,  538, 1084, 1084,
     1084, 1084, 1084,  536,  535, 1084, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,

     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1086,  533, 1086, 1086, 1086,  530,  528,
     1086, 1087,  527, 1087, 1087,  526,  525, 1087,  522, 1087,
     1087, 1087,  519,  516, 1087, 1088, 1088, 1088, 1088,  514,
     1088,  513,  511,  509,  508,  506,  504, 1088,  501,  497,
     1088,  493,  490, 1088,  488, 1088, 1088, 1088,  487, 1088,
     1088, 1089, 1089, 1089, 1089,  486,  484,  483,  480,  479,
      476,  472,  469, 1089,  468, 1089, 1089,  464,  462, 1089,
      461, 1089, 1089, 1089,  459,  457, 1089, 1090, 1090, 1090,
     1090,  454, 1090,  452,  451,  448,  446,  442,  439,  438,

      437,  434,  433,  432,  428, 1090,  420, 1090, 1090, 1090,
      417,  413, 1090, 1091, 1091,  401, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
     1092,  400, 1092, 1092, 1092, 1092, 1092,  396,  395, 1092,
     1092, 1092, 1092, 1092,  391,  390, 1092, 1093, 1093,  376,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1094,  370, 1094, 1094, 1094, 1094,
     1094, 1094,  365, 1094, 1094, 1094, 1094, 1094,  364,  356,

     1094, 1095, 1095, 1095, 1095,  352, 1095,  344,  341,  338,
      336,  333,  325, 1095,  307,  304, 1095,  303,  302, 1095,
      301, 1095, 1095, 1095,  297, 1095, 1095, 1096, 1096, 1096,
     1096,  296,  287, 1096,  285,  280,  279,  276,  275, 1096,
      268, 1096, 1096,  264,  263, 1096,  260, 1096, 1096, 1096,
      256,  255, 1096, 1097, 1097, 1097, 1097,  252, 1097,  247,
      216,  204,  203,  202,  198,  197,  193,  188,  185,  177,
      174, 1097,  167, 1097, 1097, 1097,  153,  149, 1097, 1098,
      145,  136, 1098,  126,  122,  119, 1098,  113, 1098, 1098,
     1098,  101,   97, 1098, 1099, 1099,   93, 1099, 1099, 1099,

     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1100, 1100,   86, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1101, 1101,
       85, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1102,   84, 1102, 1102, 1102,
     1102, 1102,   79,    8, 1102, 1102, 1102, 1102, 1102,    7,
        0, 1102, 1103,    0, 1103, 1103, 1103,    0,    0, 1103,

     1104, 1104, 1104, 1104,    0, 1104,    0,    0,    0,    0,
        0,    0,    0,    0, 1104, 1104,    0,    0, 1104,    0,
     1104, 1104, 1104,    0,    0, 1104, 1105, 1105, 1105, 1105,
        0, 1105,    0,    0,    0,    0,    0,    0, 1105,    0,
        0, 1105,    0,    0, 1105,    0, 1105, 1105, 1105,    0,
     1105, 1105, 1106, 1106, 1106, 1106,    0,    0,    0,    0,
        0,    0,    0,    0, 1106,    0, 1106, 1106,    0,    0,
     1106,    0, 1106, 1106, 1106,    0,    0, 1106, 1107, 1107,
     1107, 1107,    0, 1107,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1107,    0, 1107, 1107,

     1107,    0,    0, 1107, 1108,    0, 1108, 1108, 1108,    0,
        0, 1108, 1109,    0, 1109,    0,    0,    0, 1109,    0,
     1109, 1109, 1109,    0,    0, 1109, 1110, 1110,    0, 1110,
        0,    0,    0, 1110,    0, 1110, 1110, 1110,    0,    0,
     1110, 1111, 1111,    0, 1111, 1111, 1111, 1111, 1111, 1111,
        0, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111,    0, 1111, 1111, 1111, 1111, 1111, 1111, 1112,    0,
        0, 1112,    0,    0,    0, 1112,    0, 1112, 1112, 1112,
        0,    0, 1112, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,

     1113,    0, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1114, 1114,    0, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,    0, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1115,    0,    0,
     1115,    0,    0,    0, 1115,    0, 1115, 1115, 1115,    0,
        0, 1115, 1116, 1116,    0, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1117,
     1117,    0, 1117,    0, 1117, 1117, 1117, 1117,    0, 1117,
     1117, 1117, 1117,    0, 1117, 1117, 1117,    0, 1117,    0,

     1117, 1117, 1117, 1117, 1117, 1117, 1118,    0,    0, 1118,
        0,    0,    0, 1118,    0, 1118, 1118, 1118,    0,    0,
     1118, 1119, 1119,    0, 1119,    0, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,    0,
     1119,    0, 1119, 1119, 1119, 1119, 1119, 1119, 1120, 1120,
        0, 1120,    0, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120,    0, 1120,    0, 1120,
     1120, 1120, 1120, 1120, 1120, 1121,    0,    0, 1121,    0,
        0,    0, 1121,    0, 1121, 1121, 1121,    0,    0, 1121,
     1122, 1122,    0, 1122, 1122, 1122, 1122,    0,    0, 1122,

     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,    0, 1122,
        0, 1122, 1122, 1122, 1122, 1122, 1122, 1123,    0, 1123,
     1123, 1123,    0,    0, 1123, 1124,    0, 1124, 1124,    0,
        0, 1124,    0, 1124, 1124, 1124,    0,    0, 1124, 1125,
        0, 1125, 1125, 1125,    0,    0, 1125, 1126,    0, 1126,
     1126,    0,    0, 1126,    0, 1126, 1126, 1126,    0,    0,
     1126, 1127, 1127,    0, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,    0,
     1127,    0, 1127, 1127, 1127, 1127, 1127, 1127, 1128,    0,
        0, 1128,    0,    0,    0, 1128,    0, 1128, 1128, 1128,

        0,    0, 1128, 1129, 1129,    0, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129,    0, 1129, 1129, 1129, 1129,
     1129, 1129, 1129,    0, 1129, 1129, 1129, 1129, 1129, 1129,
     1130, 1130,    0, 1130, 1130, 1130, 1130, 1130, 1130,    0,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,    0, 1130,
        0, 1130, 1130, 1130, 1130, 1130, 1130, 1131, 1131,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1132, 1132,
        0, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,

     1132, 1132, 1132, 1132, 1132, 1133,    0, 1133, 1133, 1133,
        0,    0, 1133, 1134, 1134,    0,    0, 1134,    0, 1134,
     1134, 1134,    0,    0, 1134, 1135,    0, 1135, 1135,    0,
     1135,    0,    0, 1135, 1135,    0, 1135, 1135, 1135, 1136,
        0,    0, 1136,    0,    0,    0, 1136,    0, 1136, 1136,
     1136, 1137,    0,    0, 1137,    0, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1138,    0,
     1138, 1138, 1138,    0, 1138, 1140,    0, 1140, 1140,    0,
     1140,    0,    0, 1140, 1140,    0, 1140, 1140, 1140, 1141,

        0,    0, 1141,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1141, 1141, 1141,
     1141, 1141, 1142, 1142,    0, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1143,
        0, 1143, 1143, 1143, 1143, 1143,    0,    0, 1143, 1143,
     1143, 1143, 1143,    0,    0, 1143, 1144,    0, 1144,    0,
     1144, 1144, 1144,    0,    0, 1144, 1144, 1144, 1144, 1144,
        0,    0, 1144, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,

     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1146,    0, 1146, 1146,    0,    0, 1146,    0, 1146, 1146,
     1146,    0,    0, 1146, 1147,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1147,    0, 1147,
     1147, 1147,    0,    0, 1147, 1148, 1148, 1148, 1148,    0,
     1148,    0,    0,    0,    0,    0,    0, 1148,    0,    0,
     1148,    0,    0, 1148,    0, 1148, 1148, 1148,    0, 1148,
     1148, 1149, 1149, 1149, 1149,    0,    0,    0,    0,    0,
        0,    0,    0, 1149,    0, 1149, 1149,    0,    0, 1149,
        0, 1149, 1149, 1149,    0,    0, 1149, 1150, 1150, 1150,

     1150,    0, 1150,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1150,    0, 1150, 1150, 1150,
        0,    0, 1150, 1151,    0,    0,    0, 1151,    0, 1151,
     1151, 1151,    0,    0, 1151, 1152, 1152,    0, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1153,    0, 1153, 1153, 1153, 1153, 1153,    0,
        0, 1153, 1153, 1153, 1153, 1153,    0,    0, 1153, 1154,
        0, 1154,    0, 1154, 1154, 1154,    0,    0, 1154, 1154,
     1154, 1154, 1154,    0,    0, 1154, 1155, 1155,    0, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1156,    0, 1156, 1156, 1156, 1156, 1156,
     1156,    0, 1156, 1156, 1156, 1156, 1156,    0,    0, 1156,
     1157,    0, 1157,    0, 1157, 1157, 1157,    0,    0, 1157,
     1157, 1157, 1157, 1157,    0,    0, 1157, 1158, 1158, 1158,
     1158,    0, 1158,    0,    0,    0,    0,    0,    0, 1158,
        0,    0, 1158,    0,    0, 1158,    0, 1158, 1158, 1158,
        0, 1158, 1158, 1159, 1159, 1159, 1159,    0,    0, 1159,
        0,    0,    0,    0,    0, 1159,    0, 1159, 1159,    0,

        0, 1159,    0, 1159, 1159, 1159,    0,    0, 1159, 1160,
     1160, 1160, 1160,    0, 1160,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1160,    0, 1160,
     1160, 1160,    0,    0, 1160, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161,    0, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1162,    0,    0, 1162,    0,    0, 1162,    0,
        0,    0,    0,    0,    0,    0, 1162,    0,    0,    0,
     1162,    0, 1162, 1162, 1162,    0,    0, 1162, 1163,    0,
        0, 1163,    0,    0,    0, 1163,    0, 1163, 1163, 1163,

        0,    0, 1163, 1164, 1164,    0, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1165, 1165,    0, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1166, 1166,    0,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1167,    0, 1167, 1167, 1167, 1167,
     1167,    0,    0, 1167, 1167, 1167, 1167, 1167,    0,    0,

     1167, 1168,    0, 1168,    0, 1168, 1168, 1168,    0,    0,
     1168, 1168, 1168, 1168, 1168,    0,    0, 1168, 1169, 1169,
     1169, 1169,    0, 1169,    0,    0,    0,    0,    0,    0,
        0,    0, 1169, 1169,    0,    0, 1169,    0, 1169, 1169,
     1169,    0,    0, 1169, 1170,    0, 1170, 1170, 1170,    0,
        0, 1170, 1171, 1171, 1171, 1171,    0, 1171,    0,    0,
        0,    0,    0,    0,    0,    0, 1171, 1171,    0,    0,
     1171,    0, 1171, 1171, 1171,    0,    0, 1171, 1172, 1172,
     1172, 1172,    0, 1172,    0,    0,    0,    0,    0,    0,
     1172,    0,    0, 1172,    0,    0, 1172,    0, 1172, 1172,

     1172,    0, 1172, 1172, 1173, 1173, 1173, 1173,    0,    0,
        0,    0,    0,    0,    0,    0, 1173,    0, 1173, 1173,
        0,    0, 1173,    0, 1173, 1173, 1173,    0,    0, 1173,
     1174, 1174, 1174, 1174,    0, 1174,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1174,    0,
     1174, 1174, 1174,    0,    0, 1174, 1175,    0,    0,    0,
     1175,    0, 1175, 1175, 1175,    0,    0, 1175, 1176,    0,
     1176,    0,    0,    0, 1176,    0, 1176, 1176, 1176,    0,
        0, 1176, 1177,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1177,    0, 1177, 1177, 1177,

        0,    0, 1177, 1178, 1178,    0, 1178,    0,    0,    0,
     1178,    0, 1178, 1178, 1178,    0,    0, 1178, 1179, 1179,
        0, 1179, 1179, 1179, 1179, 1179, 1179,    0, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,    0, 1179,
     1179, 1179, 1179, 1179, 1179, 1180,    0,    0, 1180,    0,
        0,    0, 1180,    0, 1180, 1180, 1180,    0,    0, 1180,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,    0, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1182, 1182,    0,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,

     1182, 1182, 1182, 1182, 1182,    0, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1183,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1183,    0, 1183,
     1183, 1183,    0,    0, 1183, 1184,    0,    0, 1184,    0,
        0,    0, 1184,    0, 1184, 1184, 1184,    0,    0, 1184,
     1185, 1185,    0, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1186, 1186,    0,
     1186,    0, 1186, 1186, 1186, 1186,    0, 1186, 1186, 1186,
     1186,    0, 1186, 1186, 1186,    0, 1186,    0, 1186, 1186,

     1186, 1186, 1186, 1186, 1187,    0,    0, 1187,    0,    0,
        0, 1187,    0, 1187, 1187, 1187,    0,    0, 1187, 1188,
     1188,    0, 1188,    0, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188,    0, 1188,    0,
     1188, 1188, 1188, 1188, 1188, 1188, 1189, 1189,    0, 1189,
        0, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189,    0, 1189,    0, 1189, 1189, 1189,
     1189, 1189, 1189, 1190,    0,    0, 1190,    0,    0,    0,
     1190,    0, 1190, 1190, 1190,    0,    0, 1190, 1191, 1191,
        0, 1191, 1191, 1191, 1191,    0,    0, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191,    0, 1191,    0, 1191,
     1191, 1191, 1191, 1191, 1191, 1192,    0, 1192, 1192,    0,
        0, 1192,    0, 1192, 1192, 1192,    0,    0, 1192, 1193,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1193,    0, 1193, 1193, 1193,    0,    0, 1193,
     1194,    0, 1194, 1194,    0,    0, 1194,    0, 1194, 1194,
     1194,    0,    0, 1194, 1195,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1195,    0, 1195,
     1195, 1195,    0,    0, 1195, 1196, 1196,    0, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196,    0, 1196,    0, 1196, 1196, 1196, 1196,
     1196, 1196, 1197,    0,    0, 1197,    0,    0,    0, 1197,
        0, 1197, 1197, 1197,    0,    0, 1197, 1198, 1198,    0,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,    0,
     1198, 1198, 1198, 1198, 1198, 1198, 1198,    0, 1198, 1198,
     1198, 1198, 1198, 1198, 1199, 1199,    0, 1199, 1199, 1199,
     1199, 1199, 1199,    0, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199,    0, 1199,    0, 1199, 1199, 1199, 1199, 1199,
     1199, 1201, 1201,    0,    0, 1201,    0, 1201, 1201, 1201,
        0,    0, 1201, 1202, 1202,    0, 1202, 1202, 1202,    0,

     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1203, 1203,    0, 1203,    0,    0,    0, 1203,    0, 1203,
     1203, 1203, 1204,    0, 1204, 1204,    0, 1204,    0,    0,
     1204, 1204,    0, 1204, 1204, 1204, 1205,    0,    0, 1205,
        0, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1206, 1206,    0, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

     1207,    0,    0, 1207,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1207,    0,
     1207, 1207, 1207, 1209,    0,    0, 1209,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1209,    0, 1209, 1209, 1209, 1210, 1210,    0, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
        0, 1210, 1210, 1213,    0,    0, 1213,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1213, 1213, 1213, 1213, 1213, 1214,    0, 1214, 1214,

     1214, 1214, 1214,    0,    0, 1214, 1214, 1214, 1214, 1214,
        0,    0, 1214, 1215,    0, 1215, 1215, 1215, 1215, 1215,
        0,    0, 1215, 1215, 1215, 1215, 1215,    0,    0, 1215,
     1216,    0, 1216, 1216, 1216,    0,    0, 1216, 1217,    0,
        0,    0, 1217,    0, 1217, 1217, 1217,    0,    0, 1217,
     1218,    0, 1218, 1218, 1218, 1218, 1218,    0,    0, 1218,
     1218, 1218, 1218, 1218,    0,    0, 1218, 1219,    0, 1219,
     1219, 1219, 1219, 1219,    0,    0, 1219, 1219, 1219, 1219,
     1219,    0,    0, 1219, 1220,    0, 1220, 1220, 1220, 1220,
     1220, 1220,    0, 1220, 1220, 1220, 1220, 1220,    0,    0,

     1220, 1221,    0, 1221, 1221, 1221, 1221, 1221, 1221,    0,
     1221, 1221, 1221, 1221, 1221,    0,    0, 1221, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1223,    0,    0, 1223,    0,
        0, 1223,    0,    0,    0,    0,    0,    0,    0, 1223,
        0,    0,    0, 1223,    0, 1223, 1223, 1223,    0,    0,
     1223, 1224,    0, 1224, 1224, 1224, 1224, 1224,    0,    0,
     1224, 1224, 1224, 1224, 1224,    0,    0, 1224, 1225,    0,
     1225, 1225, 1225, 1225, 1225,    0,    0, 1225, 1225, 1225,

     1225, 1225,    0,    0, 1225, 1226, 1226, 1226, 1226,    0,
     1226,    0,    0,    0,    0,    0,    0,    0,    0, 1226,
     1226,    0,    0, 1226,    0, 1226, 1226, 1226,    0,    0,
     1226, 1227, 1227, 1227, 1227,    0, 1227,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1227,    0,    0, 1227,
        0, 1227, 1227, 1227,    0,    0, 1227, 1228, 1228, 1228,
     1228,    0, 1228,    0,    0,    0,    0,    0,    0,    0,
        0, 1228, 1228,    0,    0, 1228,    0, 1228, 1228, 1228,
        0,    0, 1228, 1229,    0,    0,    0, 1229,    0, 1229,
     1229, 1229,    0,    0, 1229, 1230,    0, 1230, 1230, 1230,

        0,    0, 1230, 1231,    0, 1231,    0,    0,    0, 1231,
        0, 1231, 1231, 1231,    0,    0, 1231, 1232,    0, 1232,
     1232, 1232,    0,    0, 1232, 1233,    0,    0,    0, 1233,
        0, 1233, 1233, 1233,    0,    0, 1233, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234,    0, 1234, 1234, 1234,    0, 1234,    0,    0,
     1234, 1234, 1234, 1234, 1235,    0, 1235, 1235, 1235,    0,
        0, 1235, 1236,    0, 1236, 1236, 1236,    0,    0, 1236,
     1238, 1238,    0, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,

     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1239,    0,    0,
     1239,    0,    0,    0, 1239,    0, 1239, 1239, 1239, 1240,
        0, 1240,    0, 1240, 1240,    0, 1240,    0,    0, 1240,
     1240,    0, 1240, 1240, 1240, 1241, 1241,    0, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1243,    0,    0, 1243,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1243,    0, 1243, 1243, 1243, 1244, 1244,    0, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,

     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1245, 1245, 1245, 1245, 1245, 1246,    0,    0,
     1246,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1246, 1246, 1246, 1246, 1246,
     1247,    0, 1247, 1247, 1247, 1247, 1247,    0,    0, 1247,
     1247, 1247, 1247, 1247,    0,    0, 1247, 1248,    0, 1248,
     1248, 1248, 1248, 1248,    0,    0, 1248, 1248, 1248, 1248,
     1248,    0,    0, 1248, 1249,    0, 1249, 1249, 1249, 1249,
     1249, 1249,    0, 1249, 1249, 1249, 1249, 1249,    0,    0,
     1249, 1250,    0, 1250, 1250, 1250,    0,    0, 1250, 1251,

     1251,    0, 1251,    0,    0,    0, 1251,    0, 1251, 1251,
     1251, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
        0, 1252,    0,    0,    0, 1252, 1252, 1252, 1253, 1253,
     1253, 1253,    0, 1253,    0,    0,    0,    0,    0,    0,
        0,    0, 1253, 1253,    0,    0, 1253,    0, 1253, 1253,
     1253,    0,    0, 1253, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,    0,
     1254, 1254, 1254,    0, 1254,    0, 1254,    0, 1254, 1254,
     1254, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,

     1255, 1255, 1255, 1255, 1255, 1255,    0, 1255, 1255, 1255,
        0, 1255,    0,    0,    0, 1255, 1255, 1255, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256,    0, 1256, 1256, 1256,    0, 1256,    0,
        0,    0, 1256, 1256, 1256, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
        0, 1257, 1257, 1257,    0, 1257,    0,    0,    0, 1257,
     1257, 1257, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258,    0, 1258, 1258,
     1258,    0, 1258,    0,    0,    0, 1258, 1258, 1258, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053
    } ;

extern int commentScanYY_flex_debug;
int commentScanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentScanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2011 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 17 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         0,                       TRUE  },
  { "copybrief",       0,                       FALSE },
  { "copydetails",     0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       FALSE },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       FALSE },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  printf("Error: DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e,const char *fileName);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         sectionLabel;
static QCString		sectionTitle;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;
static int              g_sectionLevel;

static int              g_commentCount;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
}

//-----------------------------------------------------------------------------

static QCString getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:       return "\\class";
    case Entry::STRUCTDOC_SEC:      return "\\struct";
    case Entry::UNIONDOC_SEC:       return "\\union";
    case Entry::EXCEPTIONDOC_SEC:   return "\\exception";
    case Entry::NAMESPACEDOC_SEC:   return "\\namespace";
    case Entry::PROTOCOLDOC_SEC:    return "\\protocol";
    case Entry::CATEGORYDOC_SEC:    return "\\category";
    case Entry::ENUMDOC_SEC:        return "\\enum";
    case Entry::PAGEDOC_SEC:        return "\\page";
    case Entry::VARIABLEDOC_SEC:    return "\\var";
    case Entry::MEMBERDOC_SEC:      return "\\fn";
    case Entry::OVERLOADDOC_SEC:    return "\\overload";
    case Entry::FILEDOC_SEC:        return "\\file";
    case Entry::DEFINEDOC_SEC:      return "\\def";
    case Entry::GROUPDOC_SEC:       return "\\defgroup";
    case Entry::MAINPAGEDOC_SEC:    return "\\mainpage";
    case Entry::PACKAGEDOC_SEC:     return "\\package";
    case Entry::DIRDOC_SEC:         return "\\dir";
    case Entry::EXAMPLE_SEC:        return "\\example";
    case Entry::MEMBERGRP_SEC:      return "\\name";
    default: return "";
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (!getDocSectionName(current->section).isEmpty())
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentScanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (strcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    item->text += outputXRef;
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    item->text = outputXRef;
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si=new SectionInfo(listName,anchorLabel,
	                            sectionTitle,SectionInfo::Anchor);
    Doxygen::sectionDict.insert(anchorLabel,si);
    docEntry->anchors->append(si);
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict[fText])==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList.append(f);
    Doxygen::formulaDict.insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict.insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="\\_fakenl"; // add fake newlines to
                                                          // keep the warnings 
                                                          // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static void addSection()
{
  sectionTitle+=commentScanYYtext;
  sectionTitle=sectionTitle.stripWhiteSpace();
  //printf("Adding new section file=%s label=%s title=%s\n",yyFileName,sectionLabel.data(),sectionTitle.data()); 
  SectionInfo *si = new SectionInfo(yyFileName,sectionLabel,sectionTitle,SectionInfo::Anchor);
  current->anchors->append(si);
  Doxygen::sectionDict.insert(commentScanYYtext,si);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string upto and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
	inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentScanYYtext);
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */






































#line 3443 "<stdout>"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentScanYYlex_destroy (void );

int commentScanYYget_debug (void );

void commentScanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentScanYYget_extra (void );

void commentScanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentScanYYget_in (void );

void commentScanYYset_in  (FILE * in_str  );

FILE *commentScanYYget_out (void );

void commentScanYYset_out  (FILE * out_str  );

yy_size_t commentScanYYget_leng (void );

char *commentScanYYget_text (void );

int commentScanYYget_lineno (void );

void commentScanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentScanYYwrap (void );
#else
extern int commentScanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( commentScanYYtext, commentScanYYleng, 1, commentScanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentScanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentScanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentScanYYin))==0 && ferror(commentScanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentScanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentScanYYlex (void);

#define YY_DECL int commentScanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentScanYYtext and commentScanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentScanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentScanYYtext[commentScanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 865 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail adress (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 3686 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentScanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentScanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentScanYYin )
			commentScanYYin = stdin;

		if ( ! commentScanYYout )
			commentScanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentScanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
		}

		commentScanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentScanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1054 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7500 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 884 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 887 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 890 "commentscan.l"
{ // mail adress
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 893 "commentscan.l"
{ // quoted text
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 896 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 899 "commentscan.l"
{ // xref command 
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
/*
<Comment>{DETAILEDCMD}/[^a-z_A-Z]*	{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
   */
case 7:
YY_RULE_SETUP
#line 916 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 921 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
  					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 924 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 927 "commentscan.l"
{ // end of a brief or detailed description
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 929 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 933 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 936 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: found \\endinternal without matching \\internal"
                                              );
  					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 941 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentScanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  if (cmdPtr) // special action is required
					  {
					    if (cmdPtr->endsBrief)
					    { 
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
					      inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
#else
					      inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf;
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentScanYYtext);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentScanYYtext);
					  }
  					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 983 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 986 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentScanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 994 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentScanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1006 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1011 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1016 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1020 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
				          inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + strlen(commentScanYYtext);
#else
				          inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf + strlen(commentScanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1033 "commentscan.l"
{ // escaped character
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1036 "commentscan.l"
{ // normal word
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1039 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentScanYYtext); 
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1042 "commentscan.l"
{ // start of autolist
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
  				          addOutput(commentScanYYtext); 
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1050 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1053 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentScanYYtext[0]);
  					  addOutput(commentScanYYtext[2]);
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1057 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1060 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 30:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1063 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 1066 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    setOutput(OutputDoc);
  					    addOutput("\n\n");
					  }
					  else if (inContext!=OutputBrief)
					  {
  					    addOutput("\n\n");
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1085 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentScanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 1093 "commentscan.l"
{ // newline
  					  addOutput(*commentScanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1097 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 35:
YY_RULE_SETUP
#line 1104 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 1105 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1108 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1110 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 39:
YY_RULE_SETUP
#line 1115 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1120 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1125 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1131 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentScanYYtext; 
 					} 
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 1134 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentScanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1139 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentScanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1145 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1149 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1153 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1161 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1166 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 1170 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1174 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1183 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 53:
YY_RULE_SETUP
#line 1188 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1192 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1196 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1205 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1210 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1219 "commentscan.l"
{
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1223 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1227 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 1236 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1239 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentScanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1243 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 1247 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1252 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1255 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentScanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1259 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 1263 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1267 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 70:
YY_RULE_SETUP
#line 1272 "commentscan.l"
{ // group name
  					  current->name = commentScanYYtext;
					  //lastDefGroup.groupname = commentScanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 1284 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1288 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1297 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1301 "commentscan.l"
{ // title (stored in type)
					  current->type += commentScanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 1305 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "warning: missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 76:
YY_RULE_SETUP
#line 1322 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1326 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1329 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\page."
                                              );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1338 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1340 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentScanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1349 "commentscan.l"
{ // no file name specfied
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1354 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1358 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1361 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 85:
YY_RULE_SETUP
#line 1366 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentScanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1371 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1375 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "warning: Missing first argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1384 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1387 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentScanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1391 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1395 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing second argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1404 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1407 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentScanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1412 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1416 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing third argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1425 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 97:
YY_RULE_SETUP
#line 1431 "commentscan.l"
{ // argument
  					  current->relates = commentScanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentScanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 1439 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1443 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1451 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1457 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 1462 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1466 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 104:
YY_RULE_SETUP
#line 1472 "commentscan.l"
{ // first argyment
  					  sectionLabel=commentScanYYtext;
                                          addOutput(commentScanYYtext);
					  sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 1478 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\section command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1486 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1493 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 108:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1498 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1503 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1507 "commentscan.l"
{ // any character without special meaning
  					  sectionTitle+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1511 "commentscan.l"
{ // unescape escaped command
  					  sectionTitle+=&commentScanYYtext[1];
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1515 "commentscan.l"
{ // unescape escaped character
  					  sectionTitle+=commentScanYYtext[1];
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1519 "commentscan.l"
{ // anything else
  					  sectionTitle+=commentScanYYtext;
					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 114:
YY_RULE_SETUP
#line 1526 "commentscan.l"
{ // first argument
                                          addOutput(commentScanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentScanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1533 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\subpage command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 1541 "commentscan.l"
{ // no title, end command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1545 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1549 "commentscan.l"
{ // no title, end of command
  					  unput(*commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 119:
YY_RULE_SETUP
#line 1556 "commentscan.l"
{ // found argument
                                          SectionInfo  *si = new SectionInfo(yyFileName,commentScanYYtext,0,SectionInfo::Anchor);
                                          Doxygen::sectionDict.insert(commentScanYYtext,si);
  					  current->anchors->append(si);
					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 1563 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\anchor command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1571 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 122:
/* rule 122 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1581 "commentscan.l"
{ // possible ends
  					  addOutput(commentScanYYtext);
					  if (&commentScanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1588 "commentscan.l"
{ // some word
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1591 "commentscan.l"
{ // new line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1595 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1599 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentScanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "warning: found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1608 "commentscan.l"
{
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1611 "commentscan.l"
{
                                          warn(yyFileName,yyLineNr,
	                                    "warning: reached end of comment while inside a @%s block; check for missing @end%s tag!",
	                                    blockName.data(),blockName.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 128:
YY_RULE_SETUP
#line 1621 "commentscan.l"
{ // parameter of if/ifnot guard
                                          bool sectionEnabled = Config_getList("ENABLED_SECTIONS").find(commentScanYYtext)!=-1;
					  bool parentEnabled = TRUE;
					  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
					  if (parentEnabled)
					  {
					    if (
						(sectionEnabled && guardType==Guard_If) ||  
						(!sectionEnabled && guardType==Guard_IfNot)
					       ) // section is visible
					    {
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					    else // section is invisible
					    {
					      if (guardType!=Guard_Skip)
					      {
					      	guards.push(new GuardedSection(FALSE,TRUE));
					      }
					      BEGIN( SkipGuardedSection );
					    }
					  }
					  else // invisible because of parent
					  {
					    guards.push(new GuardedSection(FALSE,FALSE));
					    BEGIN( SkipGuardedSection );
					  }
  					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1651 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1657 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1661 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1664 "commentscan.l"
{
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1667 "commentscan.l"
{
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1670 "commentscan.l"
{
  					  unput(*commentScanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1677 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 136:
/* rule 136 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1681 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1685 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @endif without matching start command");
					  }
					  else
					  {
					    delete guards.pop();
					    BEGIN( GuardParamEnd );
					  }
  					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1697 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 139:
/* rule 139 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1714 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1729 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1733 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1735 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1741 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 144:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1745 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 145:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1748 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 146:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1751 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 147:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1759 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 148:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1766 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 149:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1773 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 150:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1780 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1787 "commentscan.l"
{
					  BEGIN(Comment);
					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1790 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1792 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 1798 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 1803 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1808 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentScanYYtext;
					  current->name+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 157:
YY_RULE_SETUP
#line 1815 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentScanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 1821 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "warning: Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 1832 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1836 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 1842 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentScanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1851 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1855 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentScanYYtext;
  					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1858 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1862 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1866 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 1874 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 1888 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1892 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 170:
YY_RULE_SETUP
#line 1898 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 1904 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\inherit command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1912 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 173:
YY_RULE_SETUP
#line 1921 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 1927 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\extends or \\implements command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1935 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 176:
YY_RULE_SETUP
#line 1940 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentScanYYtext[2];
				     if (langId.isEmpty() ||
					 stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1948 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 1950 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentScanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1953 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1957 "commentscan.l"
ECHO;
	YY_BREAK
#line 5654 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentScanYYin at a new source and called
			 * commentScanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentScanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentScanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentScanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentScanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentScanYYrestart(commentScanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentScanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1054 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1054 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1053);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentScanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentScanYYrestart(commentScanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentScanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentScanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentScanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentScanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
	}

	commentScanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentScanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentScanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentScanYYpop_buffer_state();
	 *		commentScanYYpush_buffer_state(new_buffer);
     */
	commentScanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentScanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentScanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentScanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentScanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentScanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentScanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentScanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentScanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentScanYY_create_buffer()
 * 
 */
    void commentScanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentScanYYfree((void *) b->yy_ch_buf  );

	commentScanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentScanYYrestart() or at EOF.
 */
    static void commentScanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentScanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentScanYY_init_buffer was _probably_
     * called from commentScanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentScanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentScanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentScanYYensure_buffer_stack();

	/* This block is copied from commentScanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentScanYY_switch_to_buffer. */
	commentScanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentScanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentScanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentScanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentScanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentScanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentScanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentScanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentScanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char * yystr )
{
    
	return commentScanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentScanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentScanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentScanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentScanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentScanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentScanYYtext[commentScanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentScanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentScanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentScanYYget_lineno  (void)
{
        
    return commentScanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentScanYYget_in  (void)
{
        return commentScanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentScanYYget_out  (void)
{
        return commentScanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t commentScanYYget_leng  (void)
{
        return commentScanYYleng;
}

/** Get the current token.
 * 
 */

char *commentScanYYget_text  (void)
{
        return commentScanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentScanYYset_lineno (int  line_number )
{
    
    commentScanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentScanYY_switch_to_buffer
 */
void commentScanYYset_in (FILE *  in_str )
{
        commentScanYYin = in_str ;
}

void commentScanYYset_out (FILE *  out_str )
{
        commentScanYYout = out_str ;
}

int commentScanYYget_debug  (void)
{
        return commentScanYY_flex_debug;
}

void commentScanYYset_debug (int  bdebug )
{
        commentScanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentScanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentScanYYin = stdin;
    commentScanYYout = stdout;
#else
    commentScanYYin = (FILE *) 0;
    commentScanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentScanYYlex_init()
     */
    return 0;
}

/* commentScanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentScanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentScanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentScanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentScanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentScanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentScanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentScanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentScanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentScanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentScanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1957 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) 
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) 
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput(" @refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput(" @"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\subpage command in a comment block that is not marked as a page!");
  }
  addOutput(" @"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput(" @"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput(" @"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput(" @addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool("INTERNAL_DOCS"))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput("\\internal "); 
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"warning: End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;

  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[%s]\n",fileName.data(),lineNr,comment.data()
              );
  
  commentScanYYrestart( commentScanYYin );
  BEGIN( Comment );
  commentScanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[%s]\ndocs=[%s]\ninbody=[%s]\n===========\n",
	       current->brief.data(),current->doc.data(),current->inbodyDocs.data()
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry,fileName);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d\n",position,parseMore);


  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"warning: end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"warning: try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	stricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d %s\n",g_memberGroupId,g_memberGroupHeader.data());
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e,const char *fileName)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}


#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentScanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


