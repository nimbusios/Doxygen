
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer scanYY_create_buffer
#define yy_delete_buffer scanYY_delete_buffer
#define yy_flex_debug scanYY_flex_debug
#define yy_init_buffer scanYY_init_buffer
#define yy_flush_buffer scanYY_flush_buffer
#define yy_load_buffer_state scanYY_load_buffer_state
#define yy_switch_to_buffer scanYY_switch_to_buffer
#define yyin scanYYin
#define yyleng scanYYleng
#define yylex scanYYlex
#define yylineno scanYYlineno
#define yyout scanYYout
#define yyrestart scanYYrestart
#define yytext scanYYtext
#define yywrap scanYYwrap
#define yyalloc scanYYalloc
#define yyrealloc scanYYrealloc
#define yyfree scanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE scanYYrestart(scanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t scanYYleng;

extern FILE *scanYYin, *scanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up scanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via scanYYrestart()), so that the user can continue scanning by
	 * just pointing scanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when scanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t scanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow scanYYwrap()'s to do buffer switches
 * instead of setting up a fresh scanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void scanYYrestart (FILE *input_file  );
void scanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE scanYY_create_buffer (FILE *file,int size  );
void scanYY_delete_buffer (YY_BUFFER_STATE b  );
void scanYY_flush_buffer (YY_BUFFER_STATE b  );
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void scanYYpop_buffer_state (void );

static void scanYYensure_buffer_stack (void );
static void scanYY_load_buffer_state (void );
static void scanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER scanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE scanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE scanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE scanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *scanYYalloc (yy_size_t  );
void *scanYYrealloc (void *,yy_size_t  );
void scanYYfree (void *  );

#define yy_new_buffer scanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define scanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *scanYYin = (FILE *) 0, *scanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int scanYYlineno;

int scanYYlineno = 1;

extern char *scanYYtext;
#define yytext_ptr scanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up scanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	scanYYleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 633
#define YY_END_OF_BUFFER 634
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[4346] =
    {   0,
       39,   39,  320,  320,  320,  320,  320,  320,  317,  317,
       51,   51,   57,   57,  376,  376,  376,  376,  634,  628,
      633,  623,  633,  624,  627,  628,  633,  625,  628,  633,
      626,  628,  633,  628,  633,  628,  633,  199,  628,  633,
      205,  628,  633,  205,  628,  633,  200,  623,  633,  204,
      205,  624,  627,  628,  633,  205,  625,  628,  633,  205,
      626,  628,  633,  205,  628,  633,  205,  628,  633,  628,
      633,  623,  633,  628,  633,  628,  633,  628,  633,  628,
      633,  483,  628,  633,  484,  628,  633,  494,  495,  628,
      633,16877,  521,  628,  633,  628,  633,  628,  633,  623,

      633,  628,  633,  628,  633,  628,  633,  515,  628,  633,
      500,  628,  633,  520,  628,  633,  497,  628,  633,  628,
      633,  514,  628,  633,  533,  628,  633,  628,  633,  499,
      628,  633,  499,  628,  633,  499,  628,  633,  511,  628,
      633,  510,  623,  633,  511,  624,  627,  628,  633,  503,
      511,  625,  628,  633,  511,  628,  633,  511,  626,  628,
      633,  511,  628,  633,  506,  511,  628,  633,  505,  511,
      628,  633,  507,  511,  628,  633,  511,  628,  633,  509,
      511,  628,  633,  509,  511,  628,  633,  504,  511,  628,
      633,  628,  633,  628,  633,  513,  628,  633,  512,  628,

      633,  490,  628,  633,  490,  624,  627,  628,  633,  490,
      625,  628,  633,  490,  626,  628,  633,  152,  490,  628,
      633,  153,  490,  628,  633,  490,  628,  633,  489,  490,
      628,  633,  488,  490,  628,  633,   40,  628,  633,   39,
       40,  628,  633,   38,  623,  633,   40,  624,  627,  628,
      633,   40,  625,  628,  633,   40,  628,  633,   40,  626,
      628,  633,   40,  628,  633,   37,   40,  628,  633,   34,
       40,  628,  633,   35,   40,  628,  633,   36,   40,  628,
      633,   42,  628,  633,   42,  624,  627,  628,  633,   42,
      625,  628,  633,   42,  626,  628,  633,   42,  628,  633,

       41,   42,  628,  633,  427,  628,  633,  426,  623,  633,
      427,  624,  627,  628,  633,  427,  625,  628,  633,  427,
      628,  633,  427,  626,  628,  633,  427,  628,  633,  424,
      427,  628,  633,  425,  427,  628,  633,  628,  633,  623,
      633,  628,  633,  628,  633,  550,  628,  633,  628,  633,
      534,  628,  633,  550,  628,  633,  528,  529,  530,  628,
      633,  628,  633,  551,  628,  633,  527,  628,  633,  526,
      527,  628,  633,  526,  623,  633,  527,  624,  627,  628,
      633,  527,  625,  628,  633,  527,  626,  628,  633,  527,
      628,  633,  527,  628,  633,  527,  628,  633,    9,  624,

      627,  628,  633,    7,  626,  628,  633,    2,  628,  633,
       10,  628,  633,   10,  628,  633,    1,  628,  633,  284,
      628,  633,  284,  624,  627,  628,  633,  284,  625,  628,
      633,  284,  626,  628,  633,   11,  284,  628,  633,  284,
      628,  633,   11,  284,  628,  633,   61,  628,  633,   61,
      623,  633,   61,  628,  633,  628,  633,  189,  625,  628,
      633,  628,  633,  207,  628,  633,  208,  628,  633,  372,
      628,  633,   47,  628,  633,  285,  628,  633,  175,  628,
      633,  628,  633,  628,  633,  283,  628,  633,  285,  628,
      633,  307,  628,  633,  214,  628,  633,  628,  633,  628,

      633,  172,  628,  633,  172,  628,  633,  286,  628,  633,
      207,  628,  633,  172,  628,  633,  172,  628,  633,  172,
      628,  633,  172,  628,  633,  172,  628,  633,  172,  628,
      633,  172,  628,  633,  172,  628,  633,  172,  628,  633,
      172,  628,  633,  172,  628,  633,  172,  628,  633,  172,
      628,  633,  172,  628,  633,  172,  628,  633,  172,  628,
      633,  172,  628,  633,  172,  628,  633,  569,  628,  633,
       15,   17,  628,  633,   16,  623,  633,   15,   17,  624,
      627,  628,  633,   15,   17,  625,  628,  633,   15,   17,
      626,  628,  633,   15,   17,  628,  633,   17,  628,  633,

      628,  633,  623,  633,  628,  633,  628,  633,  628,  633,
      172,  628,  633,  628,  633,  623,  633,  628,  633,  189,
      625,  628,  633,  628,  633,  313,  628,  633,  318,  628,
      633,  628,  633,  315,  628,  633,  314,  628,  633,  312,
      628,  633,  319,  628,  633,  628,  633,  422,  625,  628,
      633,  453,  628,  633,  455,  628,  633,  454,  628,  633,
      455,  628,  633,  440,  628,  633,  421,  440,  628,  633,
      421,  623,  633,  440,  624,  627,  628,  633,  422,  440,
      625,  628,  633,  440,  626,  628,  633,  410,  440,  628,
      633,  411,  440,  628,  633,  420,  440,  628,  633,  440,

      628,  633,  448,  628,  633,  448,  624,  627,  628,  633,
      448,  625,  628,  633,  448,  626,  628,  633,  446,  448,
      628,  633,  447,  448,  628,  633,  448,  628,  633,  452,
      628,  633,  451,  623,  633,  452,  624,  627,  628,  633,
      452,  625,  628,  633,  452,  626,  628,  633,  452,  628,
      633,  450,  452,  628,  633,  449,  452,  628,  633,  421,
      440,  628,  633,  421,  623,  633,  440,  628,  633,  412,
      440,  628,  633,  440,  628,  633,  423,  440,  628,  633,
      435,  440,  628,  633,  435,  440,  628,  633,  435,  440,
      628,  633,  435,  440,  628,  633,  435,  440,  628,  633,

      435,  440,  628,  633,  435,  440,  628,  633,  435,  440,
      628,  633,  435,  440,  628,  633,  123,  628,  633,  123,
      623,  633,  123,  624,  627,  628,  633,  123,  625,  628,
      633,  123,  626,  628,  633,  125,  628,  633,  123,  628,
      633,  122,  123,  628,  633,  123,  628,  633,  302,  628,
      633,  302,  624,  627,  628,  633,  302,  625,  628,  633,
      302,  626,  628,  633,  302,  628,  633,  301,  302,  628,
      633,  299,  302,  628,  633,  320,  344,  628,  633,  320,
      342,  344,  628,  633,  342,  623,  633,  342,  344,  628,
      633,  324,  344,  624,  627,  628,  633,  322,  344,  625,

      628,  633,  327,  344,  626,  628,  633,  344,  628,  633,
      344,  628,  633,  329,  344,  628,  633,  331,  344,  628,
      633,  331,  344,  628,  633,  344,  628,  633,  330,  344,
      628,  633,  628,  633,  141,  628,  633,  139,  628,  633,
      139,  628,  633,  628,  633,  623,  633,  628,  633,  628,
      633,  628,  633,  140,  628,  633,  465,  476,  628,  633,
      465,  476,  628,  633,  464,  623,  633,  462,  476,  624,
      627,  628,  633,  472,  476,  625,  628,  633,  475,  476,
      626,  628,  633,  476,  628,  633,  476,  628,  633,  476,
      628,  633,  457,  476,  628,  633,  458,  476,  628,  633,

      465,  476,  628,  633,  463,  472,  476,  625,  628,  633,
      466,  623,  633,  476,  624,  627,  628,  633,  476,  628,
      633,  476,  628,  633,  461,  628,  633,  482,  628,  633,
      481,  623,  633,  478,  482,  624,  627,  628,  633,  482,
      625,  628,  633,  482,  626,  628,  633,  482,  628,  633,
      482,  628,  633,  482,  628,  633,  482,  624,  627,  628,
      633,  479,  482,  626,  628,  633,  470,  476,  624,  627,
      628,  633,  472,  476,  625,  628,  633,  476,  628,  633,
      471,  476,  628,  633,  456,  476,  628,  633,  195,  628,
      633,  197,  623,  633,  195,  628,  633,  195,  624,  627,

      628,  633,  195,  625,  628,  633,  195,  626,  628,  633,
      195,  628,  633,  195,  628,  633,  622,  628,  633,  622,
      628,  633,  622,  624,  627,  628,  633,  622,  625,  628,
      633,  622,  626,  628,  633,  628,  633,  622,  628,  633,
      628,  633,  621,  623,  633,  624,  627,  628,  633,  625,
      628,  633,  626,  628,  633,  628,  633,  628,  633,    5,
      628,  633,    6,  628,  633,    3,  628,  633,    4,  628,
      633,  311,  628,  633,  310,  311,  628,  633,  310,  623,
      633,  311,  624,  627,  628,  633,  311,  625,  628,  633,
      311,  626,  628,  633,  311,  628,  633,  309,  311,  628,

      633,  308,  311,  628,  633,  545,  628,  633,  546,  628,
      633,  549,  624,  627,  628,  633,  547,  628,  633,  548,
      628,  633,  306,  628,  633,  305,  624,  627,  628,  633,
      306,  625,  628,  633,  306,  626,  628,  633,  306,  628,
      633,  303,  628,  633,  304,  628,  633,  317,  628,  633,
      316,  623,  633,  317,  624,  627,  628,  633,  317,  625,
      628,  633,  317,  626,  628,  633,  317,  628,  633,  628,
      633,  335,  628,  633,  334,  628,  633,  334,  628,  633,
      334,  628,  633,  184,  628,  633,  182,  623,  633,  184,
      624,  627,  628,  633,  184,  625,  628,  633,  184,  626,

      628,  633,  184,  628,  633,  183,  184,  628,  633,  187,
      628,  633,  187,  628,  633,  186,  623,  633,  187,  624,
      627,  628,  633,  187,  625,  628,  633,  187,  626,  628,
      633,  187,  628,  633,  187,  628,  633,  561,  563,  628,
      633,  556,  563,  628,  633,  556,  623,  633,  561,  563,
      624,  627,  628,  633,  561,  563,  625,  628,  633,  561,
      563,  626,  628,  633,  563,  628,  633,  563,  628,  633,
      563,  628,  633,  561,  563,  628,  633,  628,  633,   77,
      628,  633,   76,  628,  633,   78,  628,  633,  628,  633,
      628,  633,  628,  633,  131,  628,  633,  628,  633,  623,

      633,  628,  633,  134,  628,  633,  133,  628,  633,  577,
      628,  633,  578,  623,  633,  577,  624,  627,  628,  633,
      577,  625,  628,  633,  577,  626,  628,  633,  577,  628,
      633,  577,  628,  633,  577,  628,  633,  577,  628,  633,
      577,  628,  633,  570,  577,  628,  633,  571,  577,  628,
      633,  486,  628,  633,  193,  628,  633,  194,  623,  633,
      193,  624,  627,  628,  633,  193,  625,  628,  633,  193,
      626,  628,  633,  193,  628,  633,  628,  633,  628,  633,
      202,  628,  633,  202,  624,  627,  628,  633,  202,  625,
      628,  633,  202,  626,  628,  633,  202,  628,  633,  201,

      202,  628,  633,  439,  628,  633,  439,  628,  633,  439,
      624,  627,  628,  633,  439,  625,  628,  633,  439,  628,
      633,  439,  626,  628,  633,  436,  439,  628,  633,  439,
      628,  633,  436,  439,  628,  633,  437,  439,  628,  633,
      438,  439,  628,  633,  228,  232,  628,  633,  231,  623,
      633,  230,  232,  624,  627,  628,  633,  228,  232,  625,
      628,  633,  228,  232,  626,  628,  633,  228,  232,  628,
      633,  628,  633,   48,  628,  633,   50,  628,  633,   59,
      628,  633,   49,  628,  633,   60,  628,  633,   51,  628,
      633,   51,  623,  633,   51,  624,  627,  628,  633,   51,

      625,  628,  633,   51,  626,  628,  633,   52,  628,  633,
       51,  628,  633,  628,  633,   56,  628,  633,  628,  633,
       53,  628,  633,   54,  628,  633,   57,  628,  633,   57,
      623,  633,   57,  624,  627,  628,  633,   57,  625,  628,
      633,   57,  626,  628,  633,   58,  628,  633,   57,  628,
      633,  487,  628,  633,   73,  628,  633,  628,  633,  628,
      633,  628,  633,  628,  633,  628,  633,  628,  633,  628,
      633,   75,  628,  633,  161,  628,  633,  628,  633,  158,
      628,  633,  162,  628,  633,  162,  628,  633,  162,  628,
      633,  628,  633,  163,  628,  633,  159,  628,  633,  628,

      633,  628,  633,  628,  633,  628,  633,  628,  633,  169,
      628,  633,  628,  633,  170,  628,  633,  234,  628,  633,
      234,  628,  633,  226,  623,  633,  218,  234,  624,  627,
      628,  633,  234,  625,  628,  633,  224,  234,  626,  628,
      633,  215,  222,  234,  628,  633,  223,  234,  628,  633,
      217,  234,  628,  633,  234,  628,  633,  234,  628,  633,
      217,  234,  628,  633,  222,  234,  628,  633,  223,  234,
      628,  633,  234,  628,  633,  234,  628,  633,  222,  234,
      628,  633,  216,  222,  234,  628,  633,  628,  633,  623,
      633,  628,  633,  628,  633,  628,  633,  188,  628,  633,

      628,  633,  623,  633,  628,  633,  628,  633,  337,  628,
      633,  338,  628,  633,  628,  633,  338,  628,  633,  339,
      628,  633,  336,  628,  633,  340,  628,  633,  341,  628,
      633,  154,  628,  633,  154,  624,  627,  628,  633,  154,
      625,  628,  633,  154,  626,  628,  633,  152,  154,  628,
      633,  153,  154,  628,  633,  154,  628,  633,  146,  154,
      628,  633,  148,  154,  628,  633,16534,  348,  628,  633,
      348,  628,  633,  623,  633,  348,  628,  633,  348,  624,
      627,  628,  633,  348,  625,  628,  633,  348,  628,  633,
      348,  626,  628,  633,  348,  628,  633,  348,  628,  633,

      347,  348,  628,  633,  352,  628,  633,  350,  623,  633,
      352,  624,  627,  628,  633,  352,  625,  628,  633,  352,
      626,  628,  633,  351,  352,  628,  633,  352,  628,  633,
      356,  628,  633,  358,  628,  633,  628,  633,  373,  409,
      628,  633,  376,  409,  628,  633,  376,  408,  623,  633,
      377,  409,  624,  627,  628,  633,  409,  625,  628,  633,
      407,  409,  626,  628,  633,  378,  409,  628,  633,  379,
      409,  628,  633,  409,  628,  633,  409,  628,  633,  397,
      409,  628,  633,  398,  409,  628,  633,  181,  628,  633,
      180,  623,  633,  181,  624,  627,  628,  633,  181,  625,

      628,  633,  181,  626,  628,  633,  181,  628,  633,  179,
      181,  628,  633,  628,  633,  128,  628,  633,  628,  633,
      130,  628,  633,  129,  628,  633,  240,  628,  633,  239,
      623,  633,  236,  240,  624,  627,  628,  633,  240,  625,
      628,  633,  240,  626,  628,  633,  240,  628,  633,  240,
      628,  633,  240,  628,  633,  240,  624,  627,  628,  633,
      237,  240,  626,  628,  633,  246,  628,  633,  245,  623,
      633,  242,  246,  624,  627,  628,  633,  246,  625,  628,
      633,  246,  626,  628,  633,  246,  628,  633,  246,  628,
      633,  246,  628,  633,  246,  624,  627,  628,  633,  243,

      246,  626,  628,  633,  253,  254,  628,  633,  250,  623,
      633,  247,  254,  624,  627,  628,  633,  253,  254,  625,
      628,  633,  251,  254,  626,  628,  633,  248,  254,  628,
      633,  249,  254,  628,  633,  253,  254,  628,  633,  268,
      271,  628,  633,  270,  623,  633,  263,  271,  624,  627,
      628,  633,  268,  271,  625,  628,  633,  264,  271,  626,
      628,  633,  269,  271,  628,  633,  265,  271,  628,  633,
      266,  271,  628,  633,  261,  262,  628,  633,  258,  623,
      633,  255,  262,  624,  627,  628,  633,  261,  262,  625,
      628,  633,  259,  262,  626,  628,  633,  256,  262,  628,

      633,  257,  262,  628,  633,  262,  628,  633,  279,  282,
      628,  633,  281,  623,  633,  274,  282,  624,  627,  628,
      633,  279,  282,  625,  628,  633,  275,  282,  626,  628,
      633,  280,  282,  628,  633,  276,  282,  628,  633,  277,
      282,  628,  633,  279,  282,  625,  628,  633,  555,  628,
      633,  555,  628,  633,  554,  623,  633,  555,  624,  627,
      628,  633,  555,  625,  628,  633,  555,  626,  628,  633,
      552,  555,  628,  633,  553,  555,  628,  633,  555,  628,
      633,  544,  628,  633,  537,  544,  628,  633,  537,  623,
      633,  544,  624,  627,  628,  633,  544,  625,  628,  633,

      544,  626,  628,  633,  542,  544,  628,  633,  543,  544,
      628,  633,  544,  628,  633,  535,  544,  628,  633,  536,
      544,  628,  633,  544,  628,  633,  433,  628,  633,  434,
      623,  633,  429,  433,  624,  627,  628,  633,  433,  625,
      628,  633,  433,  628,  633,  430,  433,  626,  628,  633,
      433,  628,  633,  428,  433,  628,  633,  432,  433,  628,
      633,  359,  440,  628,  633,  360,  440,  628,  633,  364,
      628,  633,  364,  624,  627,  628,  633,  364,  625,  628,
      633,  364,  626,  628,  633,  364,  628,  633,  364,  628,
      633,  369,  628,  633,  368,  369,  628,  633,  368,  623,

      633,  369,  624,  627,  628,  633,  369,  625,  628,  633,
      369,  626,  628,  633,  365,  369,  628,  633,  366,  369,
      628,  633,  367,  369,  628,  633,  369,  628,  633,  300,
      302,  628,  633,  374,  409,  628,  633,  408,  623,  633,
      404,  409,  624,  627,  628,  633,  374,  409,  625,  628,
      633,  409,  626,  628,  633,  374,  409,  628,  633,  409,
      628,  633,  409,  624,  627,  628,  633,  405,  409,  626,
      628,  633,  375,  409,  628,  633,  375,  409,  625,  628,
      633,  399,  409,  628,  633,  400,  409,  628,  633,  409,
      628,  633,  401,  409,  628,  633,  402,  409,  628,  633,

      386,  395,  628,  633,  394,  623,  633,  386,  395,  624,
      627,  628,  633,  386,  395,  625,  628,  633,  386,  395,
      626,  628,  633,  395,  628,  633,  386,  395,  628,  633,
      395,  628,  633,  386,  395,  628,  633,  395,  628,  633,
    16769,  392,  393,  628,  633,  388,  623,  633,  392,  393,
      624,  627,  628,  633,  392,  393,  625,  628,  633,  392,
      393,  626,  628,  633,  392,  393,  628,  633,  393,  628,
      633,  395,  628,  633,  395,  624,  627,  628,  633,  395,
      625,  628,  633,  395,  626,  628,  633,  395,  628,  633,
      395,  628,  633,  290,  628,  633,  290,  624,  627,  628,

      633,  290,  625,  628,  633,  290,  626,  628,  633,  290,
      628,  633,  287,  290,  628,  633,  290,  628,  633,  298,
      628,  633,  298,  628,  633,  623,  633,  298,  624,  627,
      628,  633,  298,  625,  628,  633,  298,  628,  633,  298,
      626,  628,  633,  298,  628,  633,  297,  298,  628,  633,
      294,  298,  628,  633,  298,  628,  633,  628,  633,  623,
      633,  628,  633,  291,  628,  633,  618,  628,  633,  618,
      624,  627,  628,  633,  618,  625,  628,  633,  618,  626,
      628,  633,  604,  618,  628,  633,  618,  628,  633,  618,
      628,  633,  609,  628,  633,  609,  628,  633,  623,  633,

      609,  628,  633,  609,  624,  627,  628,  633,  609,  625,
      628,  633,  609,  628,  633,  609,  626,  628,  633,  607,
      609,  628,  633,  608,  609,  628,  633,  609,  628,  633,
      609,  628,  633,  606,  609,  628,  633,  617,  628,  633,
      617,  628,  633,  617,  624,  627,  628,  633,  617,  625,
      628,  633,  617,  626,  628,  633,  617,  628,  633,  617,
      628,  633,  617,  628,  633,  617,  628,  633,  617,  628,
      633,  610,  617,  628,  633,  616,  628,  633,  616,  624,
      627,  628,  633,  616,  625,  628,  633,  616,  626,  628,
      633,  615,  616,  628,  633,  616,  628,  633,  619,  628,

      633,  619,  624,  627,  628,  633,  619,  625,  628,  633,
      619,  626,  628,  633,  619,  628,  633,  628,  633,  580,
      623,  633,  624,  627,  628,  633,  625,  628,  633,  626,
      628,  633,  628,  633,  591,  593,  628,  633,  591,  593,
      628,  633,  592,  623,  633,  591,  593,  624,  627,  628,
      633,  591,  593,  625,  628,  633,  591,  593,  626,  628,
      633,  593,  628,  633,  593,  628,  633,  591,  593,  628,
      633,  593,  628,  633,  593,  628,  633,  591,  593,  628,
      633,  593,  628,  633,  593,  628,  633,  599,  602,  628,
      633,  601,  623,  633,  599,  602,  624,  627,  628,  633,

      599,  602,  625,  628,  633,  602,  628,  633,  599,  602,
      626,  628,  633,  602,  628,  633,  602,  628,  633,  602,
      628,  633,  602,  628,  633,  599,  602,  628,  633,  602,
      628,  633,16982,  630,  632,  199,  198,  199,  630,  632,
      203,  521,  494,16877,  494,  495,16877,  495,  492, 8685,
      494,  495,16877,  491,  485,  521,  494,  495,16877,  531,
      531,  531,  499,  520,  630,  632,  496,  499,  499,  499,
      507,  630,  632,  507,  509,  509,  509,  173,  512,  512,
      145,  147,   39,   34,   34,  424,  424,  529,  530,  529,
      530,  551,  531,  531,  529,  530,  531,  529,  530,  531,

      528,  529,  530,  550,  528,  529,  530,  528,  551,   61,
       61,  189,  172,  172,   20,   21,  208,  346,   47,  630,
      632,  174,  176,   18,   74,   74,   74,   74,   74,   74,
      172,  143,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,   15,   15,  630,   15,  632,   13,
      172,  172,  172,  144,  189,  312,  630,  632,  312,  421,
      420,  420,  421,  435,  630,  632,  419,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  124,  320,  320,

      342,  342,  322,  322,  325,  630,  321,  632,  323,  139,
      139,  139,  139,  140,  140,  140,  465,  465,  468,  630,
      469,  632,  473,  465,  463,  468,  630,  469,  632,  467,
      480,  480,  630,  480,  632,  477,  469,  632,  197,  197,
      196,  622,  622,  631,  629,  630,  622,  629,  632,  621,
      630,  632,  620,  621,  310,  306,  306,  630,  306,  632,
      317,  317,  630,  317,  632,  334,  334,  334,  334,  561,
      556,  562,  557,  630,  558,  632,  561,  561,  561,   76,
       76,  131,  131,  133,  133,  192,  437,  630,  632,  437,
      228,  229,  228,  630,  228,  632,   49,   50,   49,   51,

       51,  630,   51,  632,   54,   54,   54,   53,   57,   58,
       57,  630,   57,  632,  161,  162,  162,  162,  162,  163,
      163,  169,  169,  170,  170,  219,  630,  632,  220,  221,
      233,  227,  371,  177,  336,  336,  336,16534,  149,  347,
      347,  347,  354,  353,  355,  357,  373,  376,  382,  630,
      383,  632,  178,  128,  128,  129,  129,  238,  238,  630,
      238,  632,  235,  244,  244,  630,  244,  632,  241,  253,
      253,  630,  253,  632,  268,  261,  279,  279,  552,  537,
      538,  540,  432,  432,  361,  362,  363,  368,  367,  367,
      374,  374,  630,  374,  632,  403,  375,  386,  387,  386,

      632,  386,16769, 8577,  392,  392,  630,  392,  632,  294,
      296,  295,  294,  293,  291,  291,  291,  292,  291,  605,
      606,  606,  606,  613,  580,  630,  632,  591,  591,  591,
      581,  585,  630,  584,  632,  591,  591,  591,  582,  582,
      583,  584,  632,  599,  600,  600,  630,  600,  632,  599,
    16982, 8790,  494,16877,  494,16877,  495,  495,  494,  495,
    16877,  518,  564,  519,  566,  499,  499,  502,  502,  509,
      509,  529,  530,  529,  530,  529,  530,  528,    8,   61,
       61,  172,   20,  346,  564,  566,  174,   62,   74,   74,
       74,   74,   74,   74,   74,   74,  142,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  564,  566,  564,  566,  419,  435,  435,  416,  435,
      435,  435,  435,  435,  435,  435,  121,  322,  328,  325,
      326,  321,  139,  139,  140,  474,  467,  196,  334,  334,
      561,  561,  561,   76,  135,  136,  574,  573,  572,  206,
      564,  566,   60,  162,  162,  162,  225,  336, 8342,  151,
      347,  349,  406,  380,  380,  252,  267,  260,  278,  279,

      431,  390,  296,  293,  291,  291,  606,  613,  591,  591,
      587,  582,  583,  583,  596,  211,  494,16877,  495,  517,
      565,  516,  567,  516,  567,  532,  499,  499,  502,  501,
      509,  509,  488,  529,  530,  529,  530,    8,   61,   61,
      345,  565,  565,  565,  212,  567,  567,  567,  567,  213,
       74,   74,   74,   74,   74,   74,   74,   74,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  211,  565,  211,  567,  416,  435,  435,  416,  435,
      435,  435,  435,  442,  441,  435,  322,  328,  139,  139,
      474,  334,  334,  561,  561,  561,   76,  136,  132,  206,
       55,   71,   70,  162,  162,  164,  225, 8342,  406,  380,
      381,  252,  267,  260,  278,  279,  539,  431,  391,  579,
      591,  591,  586,  586,  499,  499,  508,  509,  488,  488,
      529,  530,  210,  209,   61,   61,  191,  370,  213,   12,
       74,   74,   74,   74,   74,   74,   74,   74,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,   19,   19,
       19,   19,  143,   19,  172,  119,  118,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,   13,
      435,  417,  435,  435,  435,  435,  435,  435,  120,  191,
      322,  343,  139,  459,  460,  334,  334,  185,  559,  561,
      561,  561,  561,  576,  160,  162,  162,  165,  384,  389,
      611,  588,  591,  591,  589,  499,  499,16882,  488,  529,
      530,   61,   61,  119,  213,   74,   98,   74,   74,   74,
       74,   74,   74,   74,   74,  172,  172,  172,  172,  172,
      100,   99,  172,  172,  172,   32,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
    16493,  172,  172,  172,  117,  116,  137,  172,  172,  172,
      417,  435,  417,  435,  435,  415,  435,  443,  435,  435,
      139,  333,  334,  561,  561,  561,  575,   67,   68,   69,
      162,  611,  614,  590,  591,  594,  499, 8690, 8690,  529,
      530,  523,   61,   61,  100,   32,16493,  117,  190,   74,
       74,   74,   74,   74,   74,   74,   74,  172,  172,  172,
      172,  172,  172,  172,  172,  172,   81,  172,  172,  172,
       84,  172,  172,   23,  172,  172,   91,  172,  172,  172,

      172,  172,   28,  172,  172,  172,  172,   80, 8301,  108,
      172,  172,  172,  172,  172,  172,  415,  435,  435,  444,
      415,  445,  435,  139,  334,  561,  561,  561,  162,  166,
      396,  289,  288,  595,  529,  530,  525,  522,   61,   61,
       81,   84,   23,   91,   28,   80, 8301,   74,   74,   74,
       74,   74,   74,   46,   74,  156,  172,  172,  172,  172,
      172,  107,  155,  172,  172,  172, 8318,  143,16510,  172,
      172,  172,  172,   23,   92,   85,  172,   31,  172,  172,
      172,  172,  172,   28,  172,  172,  172,   24,  172,  172,
       82,  413,  435,  414,  435,  418,  435,  139,  560,  561,

      561,  561,   63,   65,   64,  166,  612,  597,  529,  530,
       61,   61,   46,  107,   92,   85,   31,   24,   82,   74,
       74,   74,   44,   74,   74,   74,  172,  172,   83,  172,
      172,   86,  568, 8318,  142,  172,   79,  172,   29,  172,
       31,  172,  172,  172,   33,   43,  172,  172,  172,  172,
       24,   89,  172,  413,  414,  418,  413,  414,  418,  139,
      561,   63,   72,   66,   64,  272,  273,  541,  612,  529,
      530,  524,   61,   61,   44,   83,   86,   79,   29,   33,
       43,   89,   74,   74,   88,   74,   96,   87,  157,  172,
      172,  172,   97,  568,  568,  172,   93,   93,   29,   90,

       90,16511,   90,   90,  143,   90,  172,  172,  172,  172,
       30,  172,  172,  172,  172,  104,  103,  172,  332,  138,
      139,  561,  272,  272,  273,  273,  603,  529,  530,  550,
       61,   61,   88,   96,   87,   97,   93,   93,   90,   30,
       74,   95,   45,  172,  119,  172,   90,   90,  172,  172,
       22,   30,  172,  172,  172,  172,  113,  112,  172,  561,
      550,   61,   61,   95,   45,   22,   74,  172, 8319,  172,
      172,   22,  172,  172,  172,   25,  102,  101,  168,  167,
       61,   61,   25,   74,  171,  172,   27,  172,  172,   25,
      111,  110,  168,  167,   61,   61,   27,   74,   27,  172,

      172,   61,   61,   74,  172,   26,   61,   61,   26,   94,
      106,  105,   26,   61,   61,   94,  115,  114,   61,   61,
       61,   61,   61,   61,   61,   61,   14,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61
    } ;

static yyconst flex_int16_t yy_accept[3707] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    6,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,   10,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   13,   13,   13,   14,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   20,   22,   24,   28,   31,   34,   36,
       38,   41,   44,   47,   50,   56,   60,   64,   67,   70,
       72,   74,   76,   78,   80,   82,   85,   88,   93,   96,
       98,  100,  102,  104,  106,  108,  111,  114,  117,  120,
      122,  125,  128,  130,  133,  136,  139,  142,  145,  150,

      155,  158,  162,  165,  169,  173,  177,  180,  184,  188,
      192,  194,  196,  199,  202,  205,  210,  214,  218,  222,
      226,  229,  233,  237,  240,  244,  247,  252,  256,  259,
      263,  266,  270,  274,  278,  282,  285,  290,  294,  298,
      301,  305,  308,  311,  316,  320,  323,  327,  330,  334,
      338,  340,  342,  344,  346,  349,  351,  354,  357,  362,
      364,  367,  370,  374,  377,  382,  386,  390,  393,  396,
      399,  404,  408,  411,  414,  417,  420,  423,  428,  432,
      436,  440,  443,  447,  450,  453,  456,  458,  462,  464,
      467,  470,  473,  476,  479,  482,  484,  486,  489,  492,

      495,  498,  500,  502,  505,  508,  511,  514,  517,  520,
      523,  526,  529,  532,  535,  538,  541,  544,  547,  550,
      553,  556,  559,  562,  565,  568,  571,  575,  578,  584,
      589,  594,  598,  601,  603,  605,  607,  609,  611,  614,
      616,  618,  620,  624,  626,  629,  632,  634,  637,  640,
      643,  646,  648,  652,  655,  658,  661,  664,  667,  671,
      674,  679,  684,  688,  692,  696,  700,  703,  706,  711,
      715,  719,  723,  727,  730,  733,  736,  741,  745,  749,
      752,  756,  760,  764,  767,  770,  774,  777,  781,  785,
      789,  793,  797,  801,  805,  809,  813,  817,  820,  823,

      828,  832,  836,  839,  842,  846,  849,  852,  857,  861,
      865,  868,  872,  876,  880,  885,  888,  892,  898,  903,
      908,  911,  914,  918,  922,  926,  929,  933,  935,  938,
      941,  944,  946,  948,  950,  952,  954,  957,  961,  965,
      968,  974,  979,  984,  987,  990,  993,  997, 1001, 1005,
     1011, 1014, 1019, 1022, 1025, 1028, 1031, 1034, 1040, 1044,
     1048, 1051, 1054, 1057, 1062, 1067, 1073, 1078, 1081, 1085,
     1089, 1092, 1095, 1098, 1103, 1107, 1111, 1114, 1117, 1120,
     1123, 1128, 1132, 1136, 1138, 1141, 1143, 1146, 1150, 1153,
     1156, 1158, 1160, 1163, 1166, 1169, 1172, 1175, 1179, 1182,

     1187, 1191, 1195, 1198, 1202, 1206, 1209, 1212, 1217, 1220,
     1223, 1226, 1231, 1235, 1239, 1242, 1245, 1248, 1251, 1254,
     1259, 1263, 1267, 1270, 1272, 1275, 1278, 1281, 1284, 1287,
     1290, 1295, 1299, 1303, 1306, 1310, 1313, 1316, 1319, 1324,
     1328, 1332, 1335, 1338, 1342, 1346, 1349, 1355, 1360, 1365,
     1368, 1371, 1374, 1378, 1380, 1383, 1386, 1389, 1391, 1393,
     1395, 1398, 1400, 1402, 1404, 1407, 1410, 1413, 1416, 1421,
     1425, 1429, 1432, 1435, 1438, 1441, 1444, 1448, 1452, 1455,
     1458, 1461, 1466, 1470, 1474, 1477, 1479, 1481, 1484, 1489,
     1493, 1497, 1500, 1504, 1507, 1510, 1515, 1519, 1522, 1526,

     1530, 1533, 1537, 1541, 1545, 1549, 1552, 1558, 1563, 1568,
     1572, 1574, 1577, 1580, 1583, 1586, 1589, 1592, 1595, 1600,
     1604, 1608, 1611, 1614, 1616, 1619, 1621, 1624, 1627, 1630,
     1633, 1638, 1642, 1646, 1649, 1652, 1655, 1658, 1660, 1662,
     1664, 1666, 1668, 1670, 1672, 1675, 1678, 1680, 1683, 1686,
     1689, 1692, 1694, 1697, 1700, 1702, 1704, 1706, 1708, 1710,
     1713, 1715, 1718, 1721, 1724, 1727, 1733, 1737, 1742, 1747,
     1751, 1755, 1758, 1761, 1765, 1769, 1773, 1776, 1779, 1783,
     1788, 1790, 1792, 1794, 1796, 1798, 1801, 1803, 1805, 1807,
     1809, 1812, 1815, 1817, 1820, 1823, 1826, 1829, 1832, 1835,

     1840, 1844, 1848, 1852, 1856, 1859, 1863, 1868, 1871, 1874,
     1876, 1879, 1884, 1888, 1891, 1895, 1898, 1901, 1905, 1908,
     1911, 1916, 1920, 1924, 1928, 1931, 1934, 1937, 1939, 1943,
     1947, 1951, 1957, 1961, 1966, 1970, 1974, 1977, 1980, 1984,
     1988, 1991, 1994, 1999, 2003, 2007, 2010, 2014, 2016, 2019,
     2021, 2024, 2027, 2030, 2033, 2039, 2043, 2047, 2050, 2053,
     2056, 2061, 2066, 2069, 2072, 2078, 2082, 2086, 2089, 2092,
     2095, 2100, 2105, 2109, 2112, 2118, 2123, 2128, 2132, 2136,
     2140, 2144, 2147, 2153, 2158, 2163, 2167, 2171, 2175, 2179,
     2182, 2188, 2193, 2198, 2202, 2206, 2209, 2213, 2216, 2222,

     2227, 2232, 2236, 2240, 2244, 2249, 2252, 2255, 2258, 2263,
     2267, 2271, 2275, 2279, 2282, 2285, 2289, 2292, 2297, 2301,
     2305, 2309, 2313, 2316, 2320, 2324, 2327, 2330, 2333, 2339,
     2343, 2346, 2351, 2354, 2358, 2362, 2366, 2370, 2373, 2378,
     2382, 2386, 2389, 2392, 2395, 2399, 2402, 2407, 2411, 2415,
     2419, 2423, 2427, 2430, 2434, 2438, 2441, 2447, 2452, 2456,
     2460, 2463, 2468, 2473, 2477, 2482, 2486, 2490, 2493, 2497,
     2501, 2505, 2508, 2514, 2519, 2524, 2527, 2531, 2534, 2538,
     2542, 2546, 2549, 2555, 2560, 2565, 2569, 2572, 2575, 2580,
     2584, 2588, 2591, 2594, 2597, 2602, 2606, 2610, 2613, 2617,

     2620, 2623, 2626, 2628, 2633, 2637, 2640, 2644, 2647, 2651,
     2655, 2658, 2660, 2662, 2664, 2667, 2670, 2675, 2679, 2683,
     2687, 2690, 2693, 2696, 2699, 2701, 2704, 2709, 2713, 2716,
     2720, 2724, 2728, 2731, 2734, 2738, 2741, 2744, 2749, 2753,
     2757, 2760, 2763, 2766, 2769, 2772, 2776, 2779, 2784, 2788,
     2792, 2796, 2799, 2802, 2807, 2811, 2815, 2818, 2820, 2823,
     2827, 2830, 2833, 2835, 2839, 2843, 2846, 2852, 2857, 2862,
     2865, 2868, 2872, 2875, 2878, 2882, 2885, 2888, 2892, 2895,
     2901, 2906, 2909, 2914, 2917, 2920, 2923, 2926, 2930, 2934,
     2935, 2936, 2937, 2937, 2938, 2939, 2939, 2939, 2940, 2941,

     2942, 2942, 2942, 2942, 2942, 2942, 2943, 2943, 2943, 2945,
     2945, 2945, 2945, 2948, 2948, 2948, 2949, 2949, 2949, 2949,
     2950, 2951, 2954, 2955, 2956, 2957, 2957, 2957, 2960, 2960,
     2960, 2960, 2961, 2961, 2962, 2963, 2963, 2963, 2963, 2963,
     2963, 2964, 2965, 2966, 2967, 2967, 2967, 2967, 2968, 2969,
     2970, 2971, 2972, 2973, 2974, 2975, 2976, 2976, 2976, 2977,
     2977, 2978, 2978, 2979, 2980, 2981, 2982, 2982, 2982, 2983,
     2984, 2985, 2986, 2987, 2988, 2988, 2988, 2988, 2990, 2992,
     2993, 2993, 2994, 2995, 2998, 3001, 3004, 3004, 3004, 3005,
     3005, 3005, 3008, 3008, 3008, 3008, 3009, 3010, 3010, 3010,

     3010, 3010, 3010, 3010, 3010, 3010, 3010, 3011, 3012, 3013,
     3013, 3013, 3013, 3013, 3013, 3013, 3013, 3013, 3013, 3013,
     3013, 3013, 3013, 3013, 3013, 3013, 3013, 3013, 3013, 3013,
     3013, 3013, 3014, 3014, 3014, 3014, 3014, 3014, 3014, 3015,
     3016, 3017, 3018, 3018, 3018, 3019, 3019, 3019, 3020, 3021,
     3022, 3022, 3023, 3024, 3024, 3024, 3025, 3025, 3026, 3027,
     3028, 3029, 3030, 3031, 3031, 3032, 3033, 3034, 3034, 3034,
     3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044,
     3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054,
     3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064,

     3065, 3066, 3068, 3070, 3071, 3071, 3071, 3071, 3071, 3071,
     3072, 3072, 3072, 3073, 3073, 3073, 3074, 3075, 3075, 3076,
     3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3084,
     3084, 3084, 3084, 3084, 3084, 3084, 3084, 3084, 3085, 3086,
     3087, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095,
     3096, 3097, 3098, 3098, 3098, 3099, 3100, 3102, 3103, 3103,
     3104, 3105, 3105, 3105, 3107, 3109, 3110, 3110, 3110, 3111,
     3112, 3112, 3113, 3113, 3114, 3114, 3114, 3114, 3114, 3115,
     3115, 3115, 3116, 3116, 3117, 3118, 3119, 3119, 3119, 3119,
     3121, 3123, 3124, 3124, 3124, 3125, 3126, 3128, 3130, 3131,

     3131, 3131, 3131, 3132, 3134, 3136, 3137, 3139, 3140, 3141,
     3141, 3142, 3142, 3143, 3144, 3144, 3145, 3147, 3150, 3150,
     3151, 3151, 3152, 3153, 3155, 3156, 3157, 3159, 3161, 3162,
     3164, 3166, 3167, 3168, 3169, 3170, 3170, 3170, 3170, 3171,
     3172, 3173, 3175, 3177, 3178, 3179, 3180, 3181, 3181, 3182,
     3182, 3182, 3182, 3182, 3183, 3183, 3184, 3184, 3184, 3184,
     3185, 3186, 3186, 3186, 3186, 3186, 3186, 3186, 3187, 3187,
     3187, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3195, 3197,
     3198, 3199, 3199, 3200, 3201, 3203, 3205, 3206, 3206, 3206,
     3207, 3208, 3209, 3210, 3211, 3213, 3215, 3215, 3215, 3215,

     3215, 3215, 3215, 3215, 3215, 3216, 3217, 3218, 3218, 3218,
     3219, 3220, 3221, 3222, 3222, 3222, 3222, 3222, 3223, 3224,
     3225, 3226, 3226, 3226, 3227, 3228, 3229, 3230, 3231, 3232,
     3233, 3233, 3233, 3233, 3233, 3234, 3234, 3234, 3235, 3235,
     3235, 3235, 3236, 3237, 3238, 3238, 3239, 3240, 3240, 3240,
     3240, 3240, 3240, 3241, 3241, 3241, 3242, 3242, 3243, 3243,
     3243, 3243, 3244, 3245, 3246, 3246, 3247, 3248, 3249, 3249,
     3249, 3249, 3249, 3251, 3253, 3254, 3255, 3256, 3257, 3258,
     3258, 3259, 3261, 3263, 3264, 3265, 3267, 3269, 3270, 3271,
     3271, 3271, 3273, 3275, 3276, 3276, 3276, 3277, 3277, 3277,

     3278, 3278, 3278, 3279, 3279, 3280, 3281, 3282, 3283, 3283,
     3284, 3284, 3284, 3285, 3285, 3286, 3287, 3288, 3289, 3290,
     3291, 3292, 3294, 3296, 3297, 3298, 3299, 3300, 3302, 3302,
     3302, 3303, 3304, 3305, 3306, 3308, 3310, 3310, 3310, 3310,
     3310, 3310, 3310, 3310, 3310, 3310, 3310, 3310, 3310, 3310,
     3310, 3310, 3311, 3311, 3312, 3313, 3314, 3314, 3315, 3315,
     3315, 3316, 3317, 3318, 3319, 3320, 3320, 3320, 3321, 3321,
     3321, 3321, 3321, 3321, 3321, 3322, 3322, 3322, 3323, 3323,
     3324, 3324, 3324, 3324, 3324, 3324, 3325, 3325, 3325, 3325,
     3325, 3326, 3326, 3326, 3327, 3328, 3329, 3330, 3331, 3331,

     3332, 3334, 3336, 3337, 3338, 3338, 3338, 3338, 3338, 3338,
     3338, 3338, 3338, 3338, 3339, 3339, 3339, 3340, 3341, 3344,
     3345, 3346, 3348, 3350, 3350, 3350, 3350, 3351, 3352, 3353,
     3353, 3353, 3353, 3353, 3355, 3357, 3357, 3358, 3358, 3358,
     3359, 3359, 3362, 3362, 3362, 3362, 3364, 3364, 3364, 3366,
     3366, 3366, 3366, 3367, 3368, 3369, 3370, 3371, 3371, 3371,
     3371, 3372, 3372, 3374, 3376, 3376, 3376, 3377, 3377, 3378,
     3378, 3379, 3379, 3379, 3379, 3379, 3379, 3380, 3380, 3380,
     3380, 3380, 3380, 3380, 3381, 3382, 3382, 3382, 3382, 3382,
     3382, 3382, 3382, 3382, 3382, 3382, 3382, 3382, 3382, 3382,

     3382, 3382, 3382, 3382, 3382, 3382, 3382, 3382, 3382, 3382,
     3382, 3382, 3382, 3382, 3382, 3382, 3382, 3382, 3383, 3383,
     3383, 3383, 3384, 3385, 3385, 3385, 3385, 3385, 3385, 3385,
     3385, 3385, 3385, 3386, 3386, 3386, 3386, 3387, 3387, 3387,
     3388, 3388, 3388, 3388, 3388, 3389, 3389, 3390, 3391, 3392,
     3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3401,
     3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410,
     3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420,
     3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430,
     3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440,

     3441, 3441, 3441, 3441, 3442, 3442, 3443, 3443, 3444, 3444,
     3444, 3444, 3444, 3444, 3444, 3444, 3444, 3444, 3444, 3445,
     3445, 3445, 3446, 3446, 3447, 3448, 3449, 3451, 3452, 3453,
     3454, 3455, 3456, 3457, 3457, 3458, 3458, 3459, 3459, 3460,
     3460, 3460, 3461, 3462, 3462, 3463, 3463, 3463, 3463, 3463,
     3464, 3465, 3466, 3466, 3466, 3467, 3467, 3467, 3467, 3467,
     3468, 3468, 3468, 3468, 3469, 3470, 3471, 3471, 3472, 3473,
     3474, 3474, 3475, 3475, 3475, 3476, 3477, 3477, 3477, 3477,
     3478, 3479, 3479, 3479, 3480, 3480, 3481, 3482, 3482, 3483,
     3483, 3484, 3484, 3484, 3484, 3484, 3484, 3484, 3484, 3484,

     3484, 3484, 3484, 3484, 3485, 3486, 3487, 3487, 3487, 3487,
     3487, 3487, 3487, 3488, 3488, 3488, 3488, 3488, 3488, 3488,
     3488, 3488, 3488, 3489, 3489, 3489, 3490, 3490, 3491, 3492,
     3492, 3492, 3493, 3493, 3494, 3494, 3494, 3494, 3494, 3495,
     3496, 3496, 3496, 3497, 3497, 3497, 3497, 3498, 3498, 3498,
     3498, 3499, 3499, 3499, 3499, 3500, 3500, 3500, 3501, 3501,
     3501, 3501, 3501, 3502, 3502, 3502, 3502, 3502, 3502, 3502,
     3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503, 3503,
     3504, 3505, 3506, 3507, 3507, 3507, 3507, 3508, 3508, 3509,
     3509, 3509, 3509, 3509, 3510, 3511, 3511, 3511, 3511, 3511,

     3512, 3512, 3512, 3512, 3512, 3512, 3513, 3514, 3515, 3515,
     3515, 3515, 3516, 3517, 3517, 3519, 3520, 3520, 3522, 3522,
     3524, 3526, 3527, 3528, 3529, 3530, 3531, 3531, 3532, 3533,
     3533, 3533, 3533, 3533, 3534, 3536, 3537, 3538, 3538, 3538,
     3538, 3538, 3538, 3538, 3539, 3539, 3539, 3539, 3540, 3541,
     3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541,
     3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541,
     3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541,
     3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541,
     3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541, 3541,

     3542, 3542, 3542, 3542, 3542, 3542, 3542, 3542, 3543, 3544,
     3545, 3546, 3546, 3546, 3547, 3548, 3549, 3550, 3551, 3551,
     3551, 3551, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558,
     3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568,
     3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578,
     3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588,
     3589, 3590, 3591, 3591, 3592, 3593, 3594, 3595, 3596, 3597,
     3598, 3599, 3600, 3601, 3602, 3602, 3602, 3604, 3606, 3606,
     3606, 3607, 3607, 3607, 3607, 3607, 3607, 3607, 3608, 3609,
     3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3617, 3617,

     3618, 3618, 3619, 3619, 3619, 3619, 3619, 3620, 3621, 3621,
     3622, 3622, 3622, 3622, 3622, 3623, 3624, 3624, 3625, 3626,
     3627, 3628, 3629, 3630, 3630, 3630, 3631, 3632, 3632, 3633,
     3633, 3633, 3633, 3633, 3633, 3633, 3634, 3634, 3635, 3636,
     3636, 3637, 3637, 3637, 3637, 3637, 3638, 3638, 3639, 3639,
     3639, 3639, 3639, 3640, 3640, 3640, 3641, 3642, 3642, 3642,
     3643, 3643, 3643, 3644, 3644, 3644, 3645, 3645, 3645, 3646,
     3646, 3647, 3648, 3648, 3648, 3649, 3649, 3649, 3649, 3649,
     3649, 3649, 3649, 3649, 3649, 3649, 3649, 3650, 3650, 3650,
     3650, 3650, 3650, 3650, 3651, 3652, 3653, 3654, 3654, 3655,

     3655, 3655, 3655, 3655, 3655, 3655, 3655, 3655, 3655, 3655,
     3655, 3656, 3657, 3659, 3659, 3659, 3660, 3660, 3660, 3660,
     3661, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3664, 3665,
     3666, 3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667,
     3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667,
     3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667,
     3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667, 3667,
     3667, 3667, 3667, 3668, 3668, 3668, 3668, 3668, 3668, 3668,
     3668, 3668, 3668, 3669, 3669, 3669, 3669, 3669, 3670, 3670,
     3671, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679,

     3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689,
     3690, 3691, 3692, 3694, 3696, 3697, 3698, 3699, 3700, 3701,
     3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711,
     3712, 3713, 3714, 3715, 3716, 3717, 3718, 3718, 3718, 3719,
     3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729,
     3730, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731,
     3732, 3734, 3735, 3736, 3737, 3738, 3739, 3739, 3740, 3742,
     3742, 3742, 3742, 3743, 3744, 3744, 3744, 3745, 3746, 3747,
     3748, 3749, 3751, 3752, 3753, 3754, 3755, 3755, 3755, 3755,
     3755, 3755, 3755, 3755, 3755, 3755, 3757, 3758, 3758, 3758,

     3758, 3759, 3759, 3759, 3759, 3759, 3759, 3760, 3760, 3760,
     3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760,
     3760, 3760, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761,
     3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3762, 3762,
     3762, 3764, 3765, 3766, 3766, 3766, 3766, 3766, 3766, 3766,
     3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3767, 3769,
     3770, 3770, 3772, 3772, 3772, 3772, 3772, 3773, 3774, 3774,
     3774, 3774, 3774, 3774, 3774, 3774, 3774, 3774, 3774, 3774,
     3774, 3774, 3774, 3775, 3775, 3775, 3775, 3775, 3775, 3775,
     3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775,

     3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775,
     3775, 3775, 3775, 3775, 3775, 3775, 3776, 3776, 3778, 3779,
     3780, 3781, 3782, 3783, 3784, 3785, 3786, 3787, 3788, 3789,
     3790, 3791, 3792, 3793, 3794, 3794, 3795, 3796, 3796, 3796,
     3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805, 3806,
     3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816,
     3817, 3817, 3817, 3818, 3819, 3820, 3822, 3823, 3824, 3825,
     3826, 3827, 3828, 3828, 3829, 3830, 3831, 3831, 3831, 3832,
     3832, 3832, 3832, 3832, 3832, 3833, 3834, 3835, 3836, 3838,
     3838, 3839, 3840, 3841, 3841, 3842, 3843, 3844, 3845, 3846,

     3847, 3848, 3849, 3849, 3849, 3849, 3849, 3850, 3850, 3851,
     3852, 3852, 3852, 3852, 3852, 3852, 3852, 3852, 3852, 3852,
     3852, 3852, 3852, 3852, 3852, 3852, 3852, 3852, 3852, 3852,
     3852, 3852, 3853, 3853, 3854, 3854, 3856, 3856, 3856, 3856,
     3856, 3856, 3856, 3857, 3857, 3857, 3857, 3857, 3857, 3857,
     3857, 3858, 3858, 3859, 3860, 3862, 3862, 3862, 3863, 3863,
     3864, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865,
     3865, 3865, 3865, 3866, 3866, 3866, 3866, 3867, 3867, 3867,
     3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867,
     3867, 3867, 3867, 3867, 3867, 3867, 3867, 3868, 3868, 3868,

     3869, 3869, 3869, 3869, 3869, 3870, 3870, 3871, 3872, 3873,
     3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882, 3883,
     3884, 3884, 3884, 3884, 3884, 3885, 3885, 3885, 3886, 3887,
     3888, 3888, 3888, 3889, 3890, 3891, 3892, 3893, 3894, 3894,
     3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3903,
     3904, 3905, 3906, 3906, 3906, 3907, 3908, 3909, 3910, 3911,
     3912, 3913, 3914, 3914, 3914, 3915, 3916, 3917, 3917, 3917,
     3917, 3917, 3918, 3918, 3918, 3919, 3920, 3920, 3921, 3922,
     3923, 3924, 3924, 3925, 3926, 3927, 3928, 3929, 3929, 3929,
     3929, 3929, 3929, 3930, 3930, 3930, 3931, 3931, 3931, 3931,

     3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932,
     3932, 3932, 3933, 3934, 3934, 3934, 3934, 3934, 3934, 3934,
     3934, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3937,
     3938, 3938, 3939, 3940, 3941, 3941, 3941, 3941, 3941, 3941,
     3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941,
     3942, 3942, 3943, 3943, 3943, 3943, 3944, 3944, 3944, 3945,
     3945, 3945, 3945, 3945, 3945, 3945, 3946, 3946, 3946, 3946,
     3947, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3949, 3950,
     3951, 3952, 3953, 3954, 3955, 3956, 3958, 3959, 3960, 3961,
     3962, 3963, 3963, 3963, 3964, 3965, 3965, 3965, 3966, 3967,

     3967, 3967, 3967, 3967, 3967, 3970, 3971, 3972, 3973, 3974,
     3975, 3976, 3976, 3977, 3978, 3978, 3979, 3980, 3981, 3982,
     3983, 3984, 3985, 3986, 3987, 3987, 3987, 3988, 3988, 3989,
     3989, 3990, 3990, 3990, 3991, 3992, 3992, 3992, 3992, 3992,
     3994, 3996, 3998, 3998, 3999, 4001, 4002, 4003, 4003, 4004,
     4004, 4005, 4005, 4005, 4006, 4006, 4007, 4007, 4007, 4007,
     4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4008,
     4008, 4008, 4008, 4009, 4009, 4009, 4009, 4009, 4009, 4011,
     4011, 4012, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4014,
     4014, 4014, 4014, 4014, 4015, 4015, 4015, 4015, 4015, 4015,

     4015, 4016, 4016, 4017, 4017, 4017, 4018, 4018, 4018, 4018,
     4018, 4018, 4018, 4018, 4018, 4019, 4019, 4019, 4019, 4020,
     4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030,
     4031, 4031, 4031, 4032, 4033, 4034, 4034, 4034, 4034, 4034,
     4036, 4037, 4038, 4039, 4039, 4040, 4041, 4042, 4043, 4044,
     4045, 4047, 4048, 4049, 4050, 4050, 4050, 4051, 4052, 4052,
     4052, 4053, 4053, 4053, 4054, 4054, 4055, 4056, 4057, 4058,
     4059, 4060, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4066,
     4066, 4067, 4068, 4069, 4069, 4069, 4069, 4069, 4069, 4069,
     4069, 4069, 4070, 4070, 4070, 4070, 4070, 4070, 4070, 4072,

     4073, 4074, 4075, 4075, 4075, 4075, 4076, 4076, 4076, 4076,
     4076, 4077, 4077, 4077, 4078, 4079, 4079, 4079, 4080, 4080,
     4080, 4080, 4080, 4082, 4082, 4082, 4082, 4083, 4083, 4084,
     4085, 4086, 4087, 4088, 4089, 4091, 4092, 4093, 4093, 4093,
     4094, 4095, 4096, 4096, 4096, 4096, 4096, 4097, 4098, 4099,
     4100, 4101, 4103, 4104, 4106, 4108, 4109, 4110, 4111, 4111,
     4112, 4113, 4114, 4115, 4116, 4117, 4118, 4118, 4119, 4119,
     4119, 4119, 4119, 4120, 4122, 4123, 4123, 4123, 4124, 4125,
     4126, 4127, 4127, 4127, 4127, 4127, 4127, 4127, 4128, 4128,
     4128, 4128, 4128, 4128, 4131, 4132, 4133, 4133, 4133, 4134,

     4134, 4135, 4136, 4136, 4136, 4137, 4138, 4139, 4140, 4140,
     4140, 4140, 4140, 4141, 4141, 4141, 4141, 4141, 4142, 4143,
     4144, 4145, 4146, 4146, 4146, 4146, 4147, 4147, 4147, 4148,
     4148, 4149, 4150, 4151, 4151, 4152, 4153, 4154, 4155, 4156,
     4157, 4158, 4159, 4160, 4160, 4160, 4160, 4161, 4161, 4161,
     4161, 4161, 4161, 4161, 4161, 4161, 4162, 4163, 4164, 4164,
     4165, 4166, 4166, 4166, 4166, 4166, 4167, 4167, 4167, 4167,
     4167, 4168, 4169, 4169, 4169, 4169, 4169, 4169, 4169, 4170,
     4171, 4172, 4173, 4174, 4175, 4176, 4176, 4177, 4178, 4179,
     4179, 4179, 4179, 4180, 4180, 4181, 4181, 4181, 4182, 4183,

     4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4184, 4185,
     4186, 4186, 4186, 4187, 4187, 4188, 4189, 4190, 4191, 4192,
     4193, 4193, 4194, 4195, 4196, 4197, 4197, 4197, 4197, 4198,
     4198, 4198, 4199, 4199, 4199, 4200, 4201, 4202, 4202, 4203,
     4204, 4204, 4204, 4204, 4205, 4205, 4205, 4206, 4206, 4207,
     4207, 4208, 4209, 4209, 4209, 4209, 4210, 4211, 4212, 4213,
     4213, 4214, 4214, 4215, 4216, 4217, 4218, 4219, 4219, 4219,
     4220, 4221, 4221, 4221, 4221, 4222, 4223, 4223, 4224, 4225,
     4225, 4226, 4227, 4227, 4227, 4228, 4229, 4230, 4231, 4232,
     4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242,

     4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252,
     4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262,
     4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272,
     4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282,
     4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292,
     4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302,
     4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312,
     4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322,
     4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332,
     4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342,

     4343, 4344, 4345, 4346, 4346, 4346
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   24,   24,   24,   25,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   38,   40,   41,   38,   42,   38,   43,   44,   45,
       46,   47,   48,   49,   38,   38,   50,   38,   51,   38,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   38,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   38,   81,    1,   82,   83,    1,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84
    } ;

static yyconst flex_int32_t yy_meta[85] =
    {   0,
        1,    2,    3,    4,    2,    5,    6,    7,    8,    1,
        9,   10,   11,   12,   13,    1,   14,    1,   15,   16,
       17,   17,   17,   17,   17,   18,   19,   20,   21,   22,
        1,   23,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   25,   26,   27,   28,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       29,   30,   31,   32
    } ;

static yyconst flex_int16_t yy_base[4235] =
    {   0,
        0,    2,   22,    0,  105,  116,  169,    0,  253,    0,
      337,    0,  421,    0,  503,  505,  557,    0,  119,  519,
      641,    0,  723,  725,  779,    0,  863,    0,  946,  957,
      967,  978,  134,  739, 1059,    0,  741,  994, 1143,    0,
     1227,    0,  533, 1033, 1309, 1311, 1337, 1356,  996, 1012,
     1359, 1375, 1456,    0, 1381, 1403, 1538, 1541, 1552, 1566,
     1597, 1608, 1619, 1650, 1732,    0, 1816,    0, 1899, 1910,
     1921, 1952, 1629, 1931, 1653, 1668, 1958, 1986, 1992, 2015,
     2033, 2047,  145,  755, 1417, 1431, 2018, 2049, 2067, 2069,
     1684, 1700, 2101, 2112, 2115, 2149, 2151, 2173, 2087, 2187,

     2189, 2203, 2241,    0, 2323, 2325, 2344, 2355, 2366, 2405,
     2458,    0, 2542,    0, 2626,    0, 2710,    0, 2792, 2794,
     2205, 2415, 2376, 2426, 2876,    0, 2808, 2810, 2960,    0,
     2433, 2824, 3044,    0, 2826, 2840, 3128,    0, 3210, 3213,
     3228, 3231, 3257, 3333, 3234, 3255, 3411,    0, 3495,    0,
     3271, 3330, 3579,    0, 3663,    0, 3746, 3827, 3909,    0,
     3281, 3292, 3303, 3348, 3993,    0, 3362, 3364, 3776, 3779,
     4077,    0, 3749, 3805, 3853, 4159, 3880, 4173, 4187, 4201,
     4162, 4215, 4241,    0, 4325,    0, 4407, 4409, 4423, 4425,
     4439, 4441, 4460, 4462, 3883, 4476, 4490, 4492, 4511, 4514,

     4529, 4532, 4543, 4573, 4613, 4687, 4762,    0, 4587, 4632,
     4647, 4650, 4706, 4725, 4576, 4844, 4846, 4860, 4862, 4880,
     4665, 4740, 4882, 4911, 4914, 4940, 4946, 4956, 4962, 4972,
     4978, 4988, 5059,    0, 5143,    0, 5225, 5227, 5297,    0,
     5380, 5391, 4998, 5014, 3830, 4557, 5028, 5038, 5241, 5410,
     5420, 5473,10840,28563,28563,28563,28563,28563,    1,    0,
      154,28563, 1394, 1577,28563,28563,28563,   96,   14, 3817,
     1640, 1943,  769, 4678, 5487,10812,28563, 5255,  133, 1047,
     1983,  516, 2200, 1445, 5505,28563,28563,  736,28563,  114,
    10811,28563,10775, 2389, 4503, 5441,28563,28563,28563,28563,

        0,28563,  125,28563,28563,    0,    0,  515,  954,28563,
    10774,    0,28563,    0,28563,28563,28563,28563,28563,28563,
      135,10799, 4902,28563,  158,28563,28563,28563,    0,28563,
      494,28563,    0,28563,28563,28563,28563,28563,28563,  509,
    28563,28563,28563,28563,28563,    0,28563,  531,    0,28563,
     5495, 5588, 5671,    0,28563,10800,28563, 2012, 5513,10798,
      750,28563,28563,28563,28563,28563,28563,  714,  681,10741,
    28563,10750,28563, 2216, 2805,28563,28563,28563,28563,28563,
     3383,  745, 4857, 5751, 3873, 5260, 1713,  987, 5679,   33,
        0, 5519, 1721, 5273,28563,  937,10785,10766, 5533,  952,

    28563,10755, 2157, 5539, 5687,10702,28563, 5691, 5547, 5696,
     5704, 5723, 5768, 5827, 5831, 5835, 5840, 5845, 5873, 5881,
     5890, 5908, 5920, 5924, 5937,28563,    0,28563,    0,    0,
        0,  948,  476, 5552, 5559, 2445, 5965,10729, 5956, 5737,
     5784, 5877, 2078,    0,28563, 5975,  956,28563,28563,    0,
    28563,  973,28563,28563,28563,28563, 5983,28563, 2336, 4933,
    28563,28563,28563,28563,28563, 1725,  992,28563,28563,28563,
    28563,28563,28563, 1024,28563,28563,28563,28563,28563, 1300,
    28563,28563, 6047,    0,    0,28563, 1310, 2170,    0,10695,
    10682,10687,10669,10662,10656,  663,10646,28563,28563,28563,

    28563,28563, 3395, 1312,28563,10685,28563,28563,28563,28563,
     1328,28563,28563,    0, 3866, 2859, 2867,28563, 1025,10654,
     1332,10699,28563, 4234,28563,  993,28563,    0,28563, 6006,
     6010, 6014, 6018, 5287, 6051,10679, 6059,    0, 1372,28563,
    28563, 1053,10650, 1385,10686,28563,28563, 6066, 1583, 1351,
    28563,28563, 1392,  140, 6070,28563,28563,28563,28563,28563,
    10668, 1398,    0,28563,28563,28563,28563, 1406,28563,28563,
    28563,10676,  952,28563,28563,28563, 1527, 1039,    0, 1370,
        0,    0,    0,10658, 1547, 1388,28563, 1400, 1572, 1593,
     1666, 1611,28563,28563,28563,28563,28563, 4753, 5049,28563,

    28563,28563, 1574,28563,28563,28563,28563,28563,28563,28563,
        0,28563,    0,    0, 1588,28563,28563,    0,28563,    0,
        0,    0, 1615,    0,28563,    0,10606,10605,28563,28563,
    28563,28563,28563, 1652,28563,28563, 5403, 6076,28563,28563,
    28563, 1679,10617,    0, 5577, 5776,    0,    0,    0,10645,
    28563, 1690,  952,    0,28563,  111,28563,    0, 6089,    0,
     6093, 6097, 6107,    0,28563,    0,28563,28563,28563,28563,
    28563, 1888,10591,10587,  105,10586,28563,28563,28563,28563,
    28563,10638,28563,28563, 1890,    0, 1902,28563,28563,28563,
    28563, 1901,28563,28563, 6123,28563,28563,    0,28563, 6127,

     1905, 6135,    0,28563,    0,28563,10637,    0,    0, 1912,
        0,28563, 1440, 6146,    0,28563,    0,    0,    0,    0,
        0,28563, 1920,    0,28563, 6154,28563, 6158,    0,    0,
        0,    0,    0, 1450, 1929,28563,28563,10569,10565,10569,
    10554,10559,  455,10557,28563, 1561,    0,28563,  526, 2018,
     2040,    0,    0,28563,10579,10577,10578,10565,    0,    0,
        0,    0,28563, 6163, 6167,28563,28563,10551,28563,28563,
     6172,10559, 1956, 6176,10556,10547,10544,10565,28563,28563,
     6186, 6195, 6203, 6211, 2058,28563, 6216, 6230, 6244, 6258,
    28563, 6272, 1962, 6276,28563, 6280,28563,28563,28563,28563,

    28563,28563,28563,28563, 2028,10541, 6284,28563, 6296, 6300,
     6304,28563,28563, 6314,28563, 2077,10537, 6325,28563,28563,
    28563,28563,28563, 6331, 2110,28563, 6339,10503,    0, 6344,
     6351,28563,28563,10498,28563, 6355, 2113,28563,28563,28563,
    28563,28563,28563,28563,28563, 2140,10520,    0,    0,    0,
    28563,10518,28563,28563,28563,28563,28563,10517, 2147,    0,
    28563,28563,28563,28563,28563,28563,28563,10516, 2163,    0,
    28563,28563,    0,28563,28563,    0,10475,28563,28563, 2169,
        0,28563,28563,    0,10472, 2209,28563,28563,    0,28563,
    28563,    0,10470,28563,28563, 2217,    0,28563,28563,    0,

    10465, 2220,28563,28563, 1672,28563, 2426,28563,28563,28563,
    28563,28563,28563, 2314,28563, 6359, 6365,28563,28563,28563,
    28563,28563, 2335,10484,10480,10429,28563,28563,28563,28563,
        0,10451, 2346,28563,    0,28563,28563,28563,28563,28563,
    28563, 6369, 2357,28563, 6375, 6381,28563,28563,28563,28563,
    28563, 6385, 2367,28563,    0,28563,28563,    0,28563, 2375,
        0,28563,28563,    0,    0,28563,28563, 2385,28563,28563,
        0,28563,    0,    0,    0,10478, 2396, 1307, 2005, 6397,
        0,28563,    0,    0,    0, 2406, 6346,28563,28563,28563,
    28563, 2436, 1272,28563,28563,28563,28563, 2437,28563,10410,

    28563, 6424, 6432,28563,28563,    0,28563, 2783,28563, 6440,
    10427, 6444, 6456,    0, 6464,28563,28563,28563,28563, 5018,
     2804,10406,28563, 6468, 6476, 6483,28563,28563, 6494,28563,
    28563,28563, 2806,10446, 6502,28563, 3221,28563,28563,28563,
     2830, 2080,10384,10388,10381,28563,28563,28563,28563,28563,
    28563, 2838,28563,28563,28563,28563, 3199,10444, 3227,10442,
    10440,10430, 3293,    0, 2142,28563,    0,    0,    0, 3229,
     3237,  705, 6450, 6471, 4604, 3253, 3261,    0,28563,    0,
        0,28563,    0,10390, 3272,10386, 1366, 3344, 6538,28563,
    28563, 3792, 4453,28563, 4557, 6542, 3282, 1340, 1545,28563,

    10401, 6552, 6561, 6565,10356, 2026, 6586, 6594, 6602, 6606,
     6618,    0, 6632, 6637, 6659, 6650, 6668, 6677, 6685,28563,
    28563, 6704,28563,28563, 2027, 6689, 6724, 6734, 6741, 6750,
    10352,28563, 6754, 6761,10351, 6766, 6779, 6787, 6792,    0,
     6800, 6804, 1429, 3323, 6812,10306, 6826,28563, 6830, 6842,
     6846,    0, 1537, 1689,    0, 3335,10359,10362, 3345,10354,
     4610,10305,28563,    0,    0,28563, 6858,10327,28563, 2229,
        0,    0,    0,    0, 6862, 6871, 6883, 6894, 6902, 2837,
     6970,    0, 6906, 6920, 7053, 7057, 6928, 7061,28563, 7065,
    10342, 7082,10324,10340,10338,10281, 2854, 3257,10274,10253,

    10312, 6926, 7091, 3319, 7095, 3337, 7141, 7100, 3847,10292,
     4155,10251,10251,10229,10224, 3334,10215, 2057,10204,10215,
    10204, 2266,10211, 3332,10205,  956,10185,10195, 3710, 6951,
     7114, 7125, 7135,10185,10183, 7129, 7159,    0, 7177,    0,
    28563,  533, 7217, 7231, 7245,10216, 7249, 6963, 7263, 5384,
        0,    0, 7278,10167,10169,28563,    0, 7172, 7286, 7304,
     7308, 7326, 7330, 7352, 7360,10197, 7364,10167, 7372, 7379,
     7391, 7411, 7418, 7423, 7427, 7438, 7454, 7458, 7467, 7471,
     7486, 7501, 7505, 7513, 7518, 7546, 7554, 7559, 7586, 7592,
     7596, 7600, 7605, 7633, 7638, 7643, 7670, 7677, 7684, 7688,

        0,    0,    0,10148,10141, 7650,10162, 7715, 7723, 7734,
     7738,    0, 7746, 7761, 7756, 7773,28563, 7786, 4646, 4691,
        0, 7790, 6238,    0, 7167, 7805, 7809, 7843, 7813,10129,
    10115,10123,10096,10114,10109, 1620,10090,    0, 1952, 4196,
     7821, 7825,    0,10085,10089,10078,10093,10088,10095,10069,
    10061,10073, 7835, 7848,28563,    0, 7852, 7860, 3763,    0,
     7864,10126, 7856, 7879,    0,28563, 7888,10068, 7902, 7906,
     7892, 7931,10109, 7935, 7939,10107, 7943, 7964,    0, 7972,
        0, 7980, 7984, 7992,    0, 4600, 7999,10120, 7990, 2043,
     4729,28563, 8023, 3795, 4658, 3809,28563,28563,10117, 1573,

     8027, 3831,28563,28563,28563,28563, 4720,10108,10099, 1603,
    10083, 1615,    0, 4528,10066,28563,28563,    0, 2059,28563,
     2185, 2377, 3250,28563, 8031,    0,    0,    0,    0,    0,
        0,    0,    0,10011,10007, 8035,10014, 9995,    0, 8046,
    28563,28563,28563, 9999, 9992, 9999, 1937,10049, 2346, 8050,
     8054, 8059, 8073, 8077, 8081, 8085, 8093, 8101, 9982,    0,
        0, 9987, 9970, 9977, 9968, 9959,10024,28563, 3841, 8105,
     4156,    0, 2790, 4873,    0,    0,28563,    0,    0,    0,
     3821, 8109,    0,    0,    0,    0, 8113, 8121,10007, 8139,
     8143,28563,    0, 3899,    0,    0, 9951, 9945, 9939, 9943,

      921, 9929, 9919, 9934, 4228,  742, 2172, 9964, 9955, 4822,
     4385,    0,    0, 9931, 1935, 9931, 9935,    0,    0,    0,
        0, 9962, 8128,28563, 8151, 7146,28563,28563,28563,28563,
     8158, 8168, 8176, 8182,28563, 8190, 4418,28563, 8197, 8211,
     8225, 8239, 8243, 8247, 9913, 8251, 8256, 9940, 8264, 9939,
     8270, 8278,    0, 8298,    0, 8306, 8310, 8318, 8323, 8336,
     8343,28563,28563,28563, 9908,28563,    0, 8348, 9949, 8336,
     8359, 4204, 3766, 1930,28563,    0,    0, 9928, 9927, 9926,
    28563,28563,28563,28563,28563,28563,28563,28563,    0, 9938,
     8344,    0,    0,    0, 9937, 8350,    0, 9936, 8354,    0,

     9841, 8359, 8382, 4871,28563, 8386,28563, 4925, 9781,    0,
     9839, 8375,    0, 8406,28563,28563,28563, 8410, 8418, 8426,
        0,    0,    0,28563,    0,    0,28563,    0, 9775, 9776,
     5009, 8432, 8436,    0,    0,    0, 9745, 9741, 4622, 9730,
     9744, 9743, 9731, 9719, 9711, 4427, 9709, 8440, 8448, 8457,
     9714, 8461, 8465, 8481,28563, 8491, 9713, 8486, 8507, 8515,
     8499, 8523, 8527,28563, 8539, 5454,    0, 5718, 9735, 9699,
     8543, 9716, 8551, 8559,    0, 8568,    0, 8576, 8580, 8588,
     5732, 5249, 9671, 9666, 5250, 4719, 9666, 9641, 9635, 9675,
     4739, 5429, 9657, 9671, 9662,    0, 5011, 9604, 4419,28563,

    28563,28563, 3816, 9592, 9652, 9582, 9577, 4892, 9559, 9576,
     9569, 9564, 9553, 6506, 9605, 9580,28563, 4471, 5042,    0,
    28563,28563,28563, 5513, 9529, 4907, 5716, 8592, 8596, 4435,
     2078, 9558, 8606, 8613, 8633, 8649, 8653, 8640, 8662,    0,
     8671, 8679, 8685, 8697, 8709,28563,    0, 5431,28563, 9570,
     8714, 9522, 8723, 8729, 9553, 2369,28563,    0,    0, 9548,
     5841, 8741, 8754, 8758, 8766, 8783, 8797,    0, 9555, 8801,
     9506, 9472, 9467, 9473, 9463, 9523,28563, 9520, 8795, 4458,
     2162, 4505, 3266, 8828, 8809, 8835, 1928, 9458, 4835, 9461,
     9463, 9437, 9433, 9431, 2285, 9409, 9404, 9418, 4483, 3797,

     9414, 9410, 9392, 9402, 9379, 9371, 4533, 9379, 9373, 9345,
     3337, 9336, 9340, 9336, 9328, 9328, 8823, 8843, 8854, 9336,
     9329,    0, 8904, 8918, 8860, 8932, 8936, 8948, 8961, 9364,
     9354, 5885, 5994, 6520, 3689, 7239, 6612, 7766, 3720,    0,
     8965, 9314, 9308, 8975,28563, 9356, 8979, 8992, 8997, 9004,
     9016, 9023, 9028, 9041,28563, 9035, 9048, 9054, 8617, 9295,
     9094, 9098, 9102, 9107, 9112, 9139, 9143, 9149, 9153, 9157,
     9185, 9189, 9194, 9203, 9231, 9235, 9239, 9245, 9272, 9277,
     9281, 9285, 9291, 9318, 9322, 9327, 9335, 9354, 9366, 9374,
     9383, 9394, 9410, 9414, 9421, 9425, 9429, 9461, 9468, 9473,

     9298, 9287, 9062, 9456, 9500, 7265, 7751, 9313, 9495, 9278,
     9282, 9269, 9281, 9269, 9249, 9226, 9211, 9211,28563,    0,
     5566,28563, 9257, 8908, 9195, 9195, 9010, 9189, 9171, 9165,
     9160, 9198, 9171, 9511,28563, 9197, 9529, 9213,28563, 9211,
     9469, 9068,28563, 9249,    0, 9136, 9152, 9516, 9553, 9542,
     9561,    0, 9567, 9197,28563, 9183, 9567, 4532, 3355, 9180,
     4641, 4177, 9167, 9176, 9104, 9111, 9107, 9103, 9090, 9076,
        0, 3271, 9592, 9600,28563, 9608, 9614, 9626, 9441,28563,
    28563, 9065, 9067,28563, 9634, 9638, 9108, 9106, 9104, 1389,
    28563, 9106, 9053, 9028, 9012, 9028, 9018, 9005, 8980, 8964,

     8958, 9013, 8974, 8977, 4829, 4540, 8950, 8950, 8935, 8921,
     8911, 8943,28563, 8942, 9632, 7271, 9643, 8863, 7579, 9644,
     8861, 8888, 8880, 9655, 9664, 9678, 9682,28563,    0, 9686,
     9696,28563, 8919,28563, 8918, 9682, 4880, 4190, 8900, 3775,
     8917, 8913,28563, 8902, 9695, 8888,28563, 8879, 9699, 8870,
    28563, 8860, 9703, 8858,28563, 8856, 9716, 9708, 5709, 8841,
     8794, 8841,28563, 8840, 9722, 8769, 8752, 8761, 8745,28563,
     8747, 8734, 8739, 8722, 8727, 8733,    0, 8708, 9745, 9749,
     9753, 9761, 9768, 8752, 8740, 8692,    0, 9772, 5282, 8679,
     8682, 8694, 4451,  996, 8681,    0, 9855, 8679, 8662,28563,

     8656, 8640, 8640, 8635, 8637, 8676, 5930, 5951, 4632, 4639,
     8588,28563,28563, 9780, 9786,    0, 9791,28563, 8632,28563,
     4956,28563, 9938, 9942,28563,28563, 8602, 8616, 5451, 9954,
     9816, 9967, 8602, 9824, 9979, 9828, 8608, 9832, 8546, 8526,
     8511, 8499, 8562,28563, 9965, 8521, 8511,10049, 9992, 8467,
     8462, 8460, 4855, 8476, 8461, 8483, 8446, 8423, 8403, 8409,
     8381, 8354, 8348, 8333, 8340, 8302, 8294, 8279, 8268, 8270,
     8271, 8256, 8260, 8242, 8260, 8233, 8215, 1512, 8221, 8265,
     8194, 8182, 8163, 8177, 8167, 8159, 8146, 8162, 5419, 8151,
     8133,10004,10018, 8163,10036, 9840,10063,10074, 9997,28563,

    10080,10125, 8175,10122,10146, 8145,10160,28563, 7581, 4616,
    28563, 8150, 7866,28563, 8040, 5235, 4875,    0, 8091, 8088,
        0,10094,10164,10176,10189,10194,10201,10213,10220,10232,
    10226,10253,10244,10258,10272,10287,10291,10299,10307,10318,
    10383,10326,10353,10334,10414,10418,10427,10422,10454,10338,
    10458,10466,10471,10485,10498,10503,10517,10512,10530,10545,
    10550,10557,10562,10577,10589,10597,10605,10624,10635,10651,
    10655,10664,10668,10682, 8084, 8089,28563,28563, 8058, 8058,
    10088, 8058, 8045, 8034, 8030,10593, 8014, 7997, 7991,10207,
     7992, 7999, 7985, 7966,10365,28563, 7966, 7989,10696, 5788,

     8004,28563,10690, 7944,    0,10719,10724,10728, 7993,28563,
    10737, 7970, 7963, 5273, 7903, 7885, 7894, 7892, 2764, 7871,
     4984,10732,10737, 7866, 7849,10760,28563, 7861,28563, 7853,
     7828, 3746, 7834, 7814, 7805,28563,    0, 5458, 5748, 7834,
    28563, 7821, 7813, 7799, 7823,28563,10754,10765,10769,10779,
     7806, 7819,28563,10767, 7793,28563,28563,    0, 7808,28563,
    10775, 7791,28563,10788, 7790,28563,10792, 7788,28563,10796,
     5860,28563, 7728, 7774,28563,10809, 7719, 7700, 7708,    0,
     7685, 7684, 7664, 7675, 7659,10775,28563, 4169, 6022,  111,
      481, 1235, 1563,28563, 1620, 1602,28563,10854,    0, 1624,

        0, 1635, 1876, 1905, 1921, 1938, 4947, 4982,10880, 5395,
    10947,10951, 5684,10820,10842,    0,10963,    0,10976,10967,
    10993, 2003, 2032, 2052, 2089, 2141, 2202,28563,28563,11058,
    11003, 2309, 2340, 2367, 2365, 2369, 2388, 3139, 3189, 3187,
     3182, 3192, 3213, 3234, 3267,11011, 3308, 3322, 3330, 3682,
     3715, 3811, 3829, 4094, 4127, 4142, 4167, 4360, 4411, 4430,
     4440, 4442, 4488, 4508, 4555, 4557, 4583, 5434, 4596, 4608,
     4599, 4641,28563, 4675, 4677,11018,11029,11043, 4845, 4851,
    11038,11071,28563,11056,11084, 4882, 4982,    0, 4844,28563,
    11134,11138,11156,11160,11178,11182,11200,11218,11222,11206,

    11247,11251,11260,11293,11297,11302,11306,11310,11337,28563,
    11341, 4898, 4910,11349,11353,28563,11357,11385,11389,11393,
    11397,11405,11433,11437,11441,11447,11451,11479,11484,11492,
    11521,11528,11532,11536,11563,11567, 4910, 4912,11572,11576,
    11580,11608,11612,11616,11625,11644,11652,11658,11662,11671,
    28563, 4959, 4965, 4980, 4983, 5168, 5170, 5158, 5167, 5209,
    11033, 5202, 5206, 5225,11098, 5319,11255,28563,    0, 5379,
     5383, 5336,28563,11689, 5390, 5402,28563,28563,11084,11496,
    28563,    0, 5349, 5380, 5390,28563, 5392, 5389, 5387, 5401,
     5408, 5410, 5418, 5422, 5450, 5651, 5720, 5476, 5762, 5471,

    28563, 5513, 5517,11698, 5528, 5534,28563, 5535, 5547, 5557,
     5565, 5571, 5575, 5657, 5666,    0, 5629, 5675, 5690, 5642,
     5635,28563, 5646, 5659, 5675, 5693, 5689, 5690, 5698, 5700,
     5727, 5741, 5738, 5733, 5744, 5730, 5738, 5942, 6033, 5749,
        0, 5785,28563, 5751, 5767, 5782, 5795, 5787, 5835, 5828,
     5794, 5800, 5799, 5832, 5841, 5841, 5835,11718,11724,    0,
    11736,11744, 5843, 5833,11242, 5852,11818,11749, 5859, 5858,
     5863, 5880, 5894, 5878, 5884, 5919, 5905, 5918,11707, 5902,
    11753, 5920,11769,11762, 5915, 5933, 5928, 5932, 5943, 5972,
     5934, 5933, 5968, 5969, 5972, 5971, 5968, 5972, 5999, 6000,

     5998, 6007, 6007, 6022, 6027,11776, 6110, 6030, 6023, 6029,
     6042,11780,11791, 6075,11805, 6092, 6042,11811,11832,11836,
    11863,11899,11903,11921,11925,11944,11950,11962,11967,11999,
    12003,12007,28563,12011,12016,12043,12048, 6047, 6043,12055,
    12084,12091,12096,12102,12111,12129,12138,12143,12149,12156,
    12176,12183,12190,12194,12221,12226,12230,12234,12239,12266,
     6062, 6050,12270,12274,12282,12301,12313,12317,12321,12330,
    28563,12348,12357,12364,12368,12395, 6058, 6079,11856, 6076,
     6068, 6084,12399, 6080, 6093,11956, 6093,12404,12422,12434,
    28563,12438, 6115, 6126,12446,28563,12450, 6133, 6121, 6126,

    28563,28563, 6173, 6135, 6142, 6145,28563, 6182,28563, 6226,
     6184, 6263, 6189, 6216, 6156, 6310, 6159, 6159, 6163, 6161,
     6170, 6178, 6167, 6182, 6176, 6187, 6184, 6197, 6191, 6196,
     6220, 6319, 6402,28563, 6227,    0, 6226, 6241, 6258, 6256,
     6270, 6308,28563, 6279, 6275, 6297, 6301, 6312, 6320, 6327,
    12454,12466, 6369,28563,12472,12479, 6342,12483,12491,12497,
    12502, 6341, 6349, 6347, 6343, 6360, 6361, 6363, 6351, 6397,
     6366, 6373,12506, 6364,12510, 6364,12516, 6375, 6386,12520,
     6385,12532, 6398, 6399,12537, 6382, 6389,12541, 6403, 6417,
     6414, 6408, 6414,12546, 6416,12550,12554, 6429, 6425,12562,

     6442, 6415, 6446, 6448,28563, 6444,12572,12577,12595,12599,
    12619,12623,12642,12646,12664,12669,12673,12677,12682,12715,
     6456, 6457,12719,12723,12734, 6479, 6464,12750,12761,12765,
     6514,12778,12795,12854,12807,12812,12822,12873,12886,12827,
    12890,12900,12917,12927,12944,12954,12958,12963,12971,12990,
    13003,13007, 6477, 6483, 6504,13016,13044,13049,28563,13053,
    13058,13062, 6494, 6497,13089,13093,13098,12839, 6516, 6516,
    13103,13107,13125, 6512, 6506, 6521,13129,28563,13133,13141,
     6522, 6524,13145,13149, 6525, 6534, 6528, 6585, 6535, 6521,
     6527, 6603, 6673, 6579, 6713,    0, 6582, 6623, 6557, 6645,

     6557, 6557, 6551, 6573, 6563, 6596, 6599, 6606, 6604, 6617,
     6606,28563,28563, 6611, 6624, 6628, 6627, 6617, 6635, 6625,
    28563, 6649,    0, 6647, 6655, 6649, 6666, 6655,13153,13163,
     6675,13171,13178,13182, 6679, 6684, 6691, 6688, 6675, 6702,
    13186, 6712, 6732, 6703, 6703,13190, 6718, 6715, 6711,13194,
     6713,13198, 6739, 6732,13209,13213,13221,13225,13229,13234,
     6751,13238, 6747, 6750,13242,13250, 6763, 6753,13254,13258,
    13267,13271, 6762, 6753,13287, 6764, 6806,13291,13295,13315,
    13319,13337,13342,13360,13364,13376,13382,13386,13390,13417,
    13423, 6764,13434,28563,13453, 6766, 6765,13458,13462, 6862,

     6775, 6778, 6785,13466, 6827,13470,13497,13502,13506,13510,
    13515,13533,13542,13546,13550,13562,13577,13582,13587,13595,
    13614,13623,13627,13632, 6784, 6811,13641,13659,13668,13675,
    13679, 6820, 6806,13686,13693,13713, 6806, 6821, 6822,13720,
    13726,13735, 6827,13739,    0, 6833, 6823, 6884,    0, 6835,
    28563, 6839, 6892,    0, 6860,    0, 6870, 6912,13751, 6838,
     6852, 6858, 6859, 6859, 6871, 6884, 6873, 6956, 6957, 6864,
     6878, 6883,28563, 6887, 6884, 6982, 7014, 7004,13757,13764,
    13768,13782, 7005, 7016, 7010,13786, 7017, 7013,13790, 7021,
     7034, 7024,13794,13799, 7016, 7021,13807,13811, 7031,13815,

    13819,13823,13831, 7045,13835,13840, 7051, 7042, 7051,13848,
     7053, 7066, 7050,13852,13860,13864,13868, 7061,13872,13880,
    13884,13902,13909,13915,13944,13948,13928,13966,13978,13982,
     7050, 7066,13986,13993,13997, 7120, 7081, 7066, 7076,28563,
    14013,14020,14026,14030,14057,14083,14061,14102,14114,14118,
    14129,14149,14157,14168,14066, 7072,14176,14070, 7116, 7080,
    14184, 7080, 7089,14203, 7131,14122,14211,14215,14222,14230,
    14234,14244,14248, 7114,    0,28563,28563,    0, 7153, 7155,
     7222, 7317,14252, 7116, 7135, 7141, 7146, 7148, 7162, 7335,
     7336, 7296, 7150, 7162, 7167, 7171, 7164, 7178,14256,14260,

    14266,14274, 7180, 7200,14281,14285, 7202,14289,14293, 7205,
    14299, 7212,14303,14307,14311,14315,14319,14323,14329, 7231,
     7215, 7220,14333,14337, 7254, 7227,14344,14348,14352,14356,
    14374,14386,14390,14410,14414,14422,14426,14430, 7239,14434,
    14441,28563, 7308, 7251, 7250, 7266,14453,14461,14465,14469,
    28563,14539, 7316, 7314,14473,14492,14622,14500,14626,14504,
    14630,14634,14638,14642,14511,28563,14671,14676, 7277, 7273,
     7292, 7283,14533,14686, 7293, 7395, 7396, 7401,28563, 7433,
    28563, 7292, 7291, 7290, 7306, 7305, 7523,28563, 7320, 7320,
     7330, 7346, 7338,14691,14558,14704, 7367,14716,14720,14724,

    14729,14734, 7374, 7388,14738,14742,14746,14751, 7405, 7373,
    14755,14760,14764, 7396, 7387, 7423, 7404,14769,14774,14787,
    14791,14799, 7405, 7422, 7414,14805, 7425, 7419,    0,14809,
    14819,14823,14837,14850,14854,14866,14870,14879,14884,14888,
    14897,28563,14917,14921, 7421, 7435, 7432, 7538, 7568, 7431,
     7446, 7456, 7452, 7467, 7467,14925,14932,14936, 7470,14950,
    14954, 7493, 7509, 7480,14961,14965, 7519, 7499, 7526,14969,
    14977,14989,14981, 7503, 7522, 7519,14995,15001,28563,15005,
    15009,15016,15023,15036,15041,15053,15068,15072,28563,15080,
     7539, 7614,    0, 7695,    0, 7537, 7541,15088,15093, 7560,

     7569, 7590,15097, 7602, 7574, 7609,15101,15105,15111,15129,
     7586, 7589,15134,15138,15142,15146,15150,15154,15181,28563,
     7610,    0,    0,15189,15193, 7600, 7629,15197,15201, 7639,
     7610,15207, 7611, 7635,15211,15225,15229, 7632,15233,15237,
     7630, 7653,15241,15245,15257, 7631,15266,15275,15279, 7646,
    15283,15293,15304, 7663,15308,15313,15318,15322,28563,15337,
    15341,15345,15349,15353,15357,15361,28563,15365,15373,15379,
    15384,15388, 7642, 7651,15394,15399, 7650,15403,15409,15417,
    15428,15434,15438,15446,28563,15450,15459,15467,15475,15479,
    15484,15488,15492,15500,15504,15509,15517,15521,15529,15533,

    15537,15542,15546,15554,15562,15566,15571,15575,15579,15587,
    15591,15596,15604,15608,15616,15620,15624,15629,15633,15641,
    15649,15653,15658,15662,15666,15674,15678,15683,15691,15695,
    15703,15707,15711,15716,15720,15728,15736,15740,15745,15749,
    15753,15761,15765,15770,15778,15782,15790,15794,15798,15803,
    15807,15815,15823,15827,15832,15836,15840,15848,15852,15857,
    15865,15869,15877,15881,15885,15890,15894,15902,15910,15914,
    15919,15923,15927,15935,15939,15944,15952,15956,15964,15968,
    15972,15977,15981,15989,15997,16001,16006,16010,16014,16022,
    16026,16031,16039,16043,16051,16055,16059,16064,16068,16076,

    16084,16088,16093,16097,28563,16119,16151,16183,16215,16247,
    16279,16311,16343,16375,16407,16439,16471,16503,16535,16567,
    16599,16631,16663,16695,16727,16759,16791,16823,16855,16887,
    16919,16951,16983,17015,17047,17079,17111,17143,17175,17207,
    17239,17271,17303,17335,17367,17399,17431,17463,17495,17527,
    17559,17591,17623,17655,17687,17719,17751,17783,17815,17847,
    17879,17911,17943,17975,18007,18039,18071, 7698,18102,18133,
    18164,18195,18226,18257,18289,18320,18351,18382, 7699, 7898,
     7722,18404,18436, 7761, 7932, 7809, 7938, 7835, 7975,18467,
     7899,18498, 8199,18530,18561,18592,18623, 8201, 8254,18654,

    18686,18718,18749,18780,18811, 7927, 7985, 7947, 8103,18843,
    18875,18907, 7948,18938,18969,19000,19031,19063,19095,19127,
    19159,19191,19223,19255, 7976, 8104,19287, 8067,19305, 8105,
    19336, 8144,19367, 8150, 8179,19399, 8186,19426, 8200, 8272,
    19458, 8252, 8368,19490, 8261,19521,19553, 8273,19569, 8274,
     8400, 8310, 8482, 8311, 8533,19601,19632,19663,19694,19725,
    19756,19787,19818,19850,19882,19914, 8362, 8534, 8394, 8607,
    19946,19978,20010,20042,20074,20106,20138,20170,20202,20234,
     8422,20266, 8662,20298,20330,20362,20394,20426,20457, 8424,
    20488,20520,20551, 8448,20582,20613,20644,20675,20706,20738,

    20770,20802,20834,20865,20896,20927,20958, 8449,20989,21020,
    21051,21082,21113,21145,21176,21207, 8483,21238, 8757,21260,
     8489, 8580,21292, 8759, 8825, 8826,21323,21354,21385,21416,
     8661, 8697, 8866,21448,21480,21512,21543,21574, 8535,21605,
    21637,21668,21699, 8581, 8849, 8638,21730,21762,21793,21824,
     8671,21855, 9060, 9280,21887,21919,21951,21983,22015,22046,
    22077,22108, 9284, 8706,22139,22171,22203,22235,22267,22299,
    22331,22363, 9311,22395,22413, 8740,22444,22475,22506,22537,
     9357,22569,22596, 9424,22628, 9543,22660,22691,22723,22739,
    22770, 9560, 9582, 9792,22794,22826,22857,22888,22919,22950,

    22982,23013,23044,10000, 8758,23075,23107,23139,23171,23203,
    10011,10031,23235,23267,23299,23331,23363,23395,23427,23459,
    23491,23523,23555,23587,10087,23619,23651,23683,23715,23747,
    23779,23810,23841,23873,23904,23935,23966,23997, 8892,10158,
    24028,10282, 8924,24059,24091,24123, 9504,24155,24187,24218,
    24249,24280,24311,10348,24342,24373,24404,24435,24467,24499,
    24530,24561, 8961, 9051,10417,24583,24614,24645,24676,24707,
     9057,10617,10977,24739,24770,24801,24833,24864,24895,24926,
    24957,24988,25012,25044,10461, 9509,25075,25106,25137,25168,
    10665,25200,25232,25264,25296,25327,25358,25389,10769,25420,

    25452,10959,25484, 9095,25502,25533,25564,25595, 9600,25626,
    25634,25666,25698,25729,25760,10993,25791,25823, 9778,25855,
    25887,25919,25951,25983,26015,26047,26078,26109,11175,11096,
    26140,26172, 9097,26204,26235,11250,26266,26297,11497,26319,
    26350,26381,26412,26443,26474,11261,26505,26537,26568,26599,
    26630,26661,26692,26717,26748,26772,26804, 9099,26835,26866,
    26897,11305,26929,26961,26993,27025,27056,27087,27119,11531,
    27151,27169,27200, 9140,27216,27248,27279,27311, 9186,27343,
    27375,27407,27439,27471,27503,27535,27566,27598,27630,27661,
    27683,27714,11573, 9234,27745,27776,27807,27838,27869,27892,

    27917,27949,27981,28012,28043,28074,11672,28106,28137,28168,
    28200,28216,28247,28279,28311,28342,11700,28373,28404,28435,
    11142, 9814, 9815,11744,28467,11801,11830,28499, 9236,28530,
    11144,11146,11839,11856
    } ;

static yyconst flex_int16_t yy_def[4235] =
    {   0,
     3706, 3706, 3705,    3, 3707, 3707, 3705,    7, 3705,    9,
     3705,   11, 3705,   13, 3706, 3706, 3705,   17, 3708, 3708,
     3705,   21, 3709, 3709, 3705,   25, 3705,   27, 3710, 3710,
     3706, 3706, 3711, 3711, 3705,   35, 3712, 3712, 3705,   39,
     3705,   41, 3706, 3706, 3706, 3706, 3713, 3713, 3714, 3714,
     3715, 3715, 3705,   53, 3716, 3716, 3717, 3717, 3718, 3718,
     3718, 3718, 3718, 3718, 3705,   65, 3705,   67, 3719, 3719,
     3719, 3719, 3706, 3706, 3720, 3720, 3720, 3720, 3721, 3721,
     3722, 3722, 3706, 3706, 3723, 3723, 3724, 3724, 3706, 3706,
     3706, 3706, 3725, 3725, 3706, 3706, 3706, 3706, 3726, 3726,

     3727, 3727, 3705,  103, 3728, 3728, 3729, 3729, 3730, 3730,
     3705,  111, 3705,  113, 3705,  115, 3705,  117, 3731, 3731,
     3706, 3706, 3732, 3732, 3705,  125, 3733, 3733, 3705,  129,
     3734, 3734, 3705,  133, 3735, 3735, 3705,  137, 3736, 3736,
     3706, 3706, 3706, 3706, 3706, 3706, 3705,  147, 3705,  149,
     3706, 3706, 3705,  153, 3705,  155, 3737, 3737, 3705,  159,
     3706, 3706, 3706, 3706, 3705,  165, 3706, 3706, 3738, 3738,
     3705,  171, 3739, 3739, 3706, 3706, 3740, 3740, 3741, 3741,
     3742, 3742, 3705,  183, 3705,  185, 3743, 3743, 3743, 3743,
     3744, 3744, 3744, 3744, 3745, 3745, 3746, 3746, 3747, 3747,

     3748, 3748, 3749, 3749, 3750, 3750, 3705,  207, 3751, 3751,
     3752, 3752, 3753, 3753, 3754, 3754, 3755, 3755, 3755, 3755,
     3756, 3756, 3741, 3741, 3757, 3757, 3758, 3758, 3759, 3759,
     3760, 3760, 3705,  233, 3705,  235, 3761, 3761, 3705,  239,
     3762, 3762, 3763, 3763, 3764, 3764, 3765, 3765, 3766, 3766,
     3767, 3767, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3768,
     3769, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3770, 3771, 3772, 3705, 3705, 3773, 3705, 3774,
     3705, 3775, 3705, 3776, 3777, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3778, 3778, 3778, 3705, 3705, 3705, 3705,

     3779, 3705, 3705, 3705, 3705, 3780, 3781, 3782, 3782, 3705,
     3783, 3784, 3705, 3785, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3786, 3705,
     3705, 3705, 3787, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3788, 3705, 3705, 3789, 3705,
     3790, 3705, 3790, 3791, 3705, 3705, 3705, 3705, 3792, 3793,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3794, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3795, 3705, 3796, 3705,
     3705, 3797, 3705, 3705, 3705, 3705, 3798, 3705, 3705, 3705,

     3705, 3705, 3799, 3800, 3800, 3801, 3705, 3800, 3800, 3800,
     3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800, 3800,
     3800, 3800, 3800, 3800, 3800, 3705, 3802, 3705, 3802, 3802,
     3802, 3802, 3705, 3705, 3705, 3803, 3804, 3705, 3805, 3705,
     3705, 3705, 3705, 3806, 3705, 3705, 3705, 3705, 3705, 3807,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705,  483, 3808, 3705, 3705, 3705, 3809, 3809,
     3809, 3809, 3809, 3809, 3809, 3809, 3809, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3810, 3810, 3705, 3705, 3705, 3811, 3812,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3813, 3705, 3814,
     3814, 3705, 3705, 3815, 3816, 3705, 3817, 3818, 3818, 3705,
     3705, 3705, 3819, 3705, 3705, 3705, 3705, 3705, 3818, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3820, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3821, 3821,
     3821, 3821, 3821, 3705, 3821, 3822, 3705, 3822, 3822, 3822,
     3822, 3822, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3823, 3705, 3823, 3823, 3823, 3705, 3705, 3824, 3705, 3824,
     3824, 3824, 3824, 3825, 3705, 3826, 3826, 3826, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3827, 3705, 3705, 3827, 3827, 3827, 3705,
     3705, 3705, 3827, 3828, 3705, 3829, 3705, 3830, 3831, 3832,
     3833, 3705, 3705, 3834, 3705, 3835, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3836, 3705, 3705, 3705, 3837, 3838, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3839, 3705, 3705,

     3705, 3705, 3840, 3705, 3841, 3705, 3705, 3841, 3841, 3841,
     3842, 3705, 3705, 3705, 3843, 3705, 3844, 3844, 3844, 3844,
     3844, 3705, 3844, 3845, 3705, 3705, 3705, 3846, 3847, 3847,
     3847, 3847, 3847, 3705, 3847, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3848, 3705, 3849, 3849,
     3849, 3850, 3851, 3705, 3705, 3705, 3705, 3705, 3852, 3853,
     3854, 3855, 3705, 3705, 3705, 3705, 3705, 3856, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3857, 3857, 3857, 3858, 3705, 3705, 3859, 3859, 3859, 3859,
     3705, 3705, 3705, 3705, 3705, 3860, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3861, 3705, 3705, 3862, 3705, 3705, 3705, 3863, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3864, 3865, 3705,
     3705, 3705, 3705, 3866, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3867, 3868, 3869,
     3705, 3870, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3871,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3872,
     3705, 3705, 3873, 3705, 3705, 3873, 3874, 3705, 3705, 3873,
     3875, 3705, 3705, 3875, 3876, 3705, 3705, 3705, 3877, 3705,
     3705, 3877, 3878, 3705, 3705, 3705, 3879, 3705, 3705, 3879,

     3880, 3705, 3705, 3705, 3879, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3881, 3882, 3705, 3705, 3883, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3884, 3705, 3705, 3884, 3705, 3884,
     3885, 3705, 3705, 3886, 3886, 3705, 3705, 3705, 3705, 3705,
     3887, 3705, 3887, 3887, 3887, 3705, 3887, 3705, 3887, 3705,
     3888, 3705, 3888, 3888, 3888, 3888, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3889, 3889, 3705, 3705, 3890, 3705, 3705, 3705, 3891,
     3892, 3893, 3893, 3894, 3895, 3705, 3705, 3705, 3705, 3896,
     3705, 3705, 3705, 3705, 3705, 3897, 3705, 3705, 3898, 3705,
     3705, 3705, 3705, 3705, 3899, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3900, 3705, 3900,
     3900, 3900, 3900, 3901, 3901, 3705, 3901, 3901, 3901, 3705,
     3705, 3901, 3705, 3705, 3901, 3902, 3705, 3903, 3705, 3903,
     3903, 3705, 3903, 3705, 3705, 3705, 3705, 3903, 3705, 3705,
     3705, 3904, 3705, 3705, 3904, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3905, 3705, 3705, 3906, 3906, 3907, 3705,
     3906, 3908, 3909, 3905, 3905, 3910, 3911, 3908, 3705, 3705,
     3705, 3909, 3705, 3705, 3705, 3912, 3912, 3913, 3705, 3705,
     3705, 3705, 3914, 3914, 3705, 3915, 3915, 3916, 3915, 3917,
     3918, 3705, 3705, 3705, 3917, 3705, 3705, 3705, 3918, 3918,
     3918, 3919, 3705, 3705, 3919, 3920, 3705, 3921, 3920, 3922,
     3920, 3923, 3705, 3924, 3924, 3705, 3705, 3705, 3705, 3705,
     3925, 3925, 3926, 3926, 3927, 3927, 3927, 3928, 3928, 3705,
     3705, 1181, 3927, 3928, 3928, 3929, 3930, 3705, 3705, 3705,
     3931, 3929, 3705, 3932, 3932, 3933, 3705, 3705, 3705, 3705,

     3934, 3935, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3936, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3937,
     3937, 3938, 3705, 3705, 3705, 3705, 3937, 3939, 3940, 3941,
     3705, 3705, 3942, 3942, 3705, 3705, 3943, 3705, 3705, 3705,
     3944, 3945, 3939, 3705, 3705, 3705, 3946, 3947, 3947, 3947,
     3947, 3947, 3947, 3705, 3940, 3705, 3940, 3936, 3705, 3940,
     3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940,
     3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940,
     3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940,

     3948, 3948, 3948, 3705, 3705, 3705, 3705, 3949, 3949, 3950,
     3949, 3951, 3952, 3951, 3705, 3952, 3705, 3705, 3705, 3705,
     3953, 3705, 3705, 3953, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3954, 3705, 3705,
     3705, 3705, 3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954,
     3954, 3954, 3705, 3705, 3705, 3955, 3955, 3705, 3705, 3956,
     3956, 3957, 3958, 3705, 3959, 3705, 3705, 3705, 3960, 3705,
     3961, 3960, 3705, 3960, 3705, 3705, 3962, 3962, 3963, 3962,
     3964, 3965, 3964, 3965, 3966, 3966, 3705, 3967, 3968, 3705,
     3705, 3705, 3705, 3705, 3966, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3969, 3969, 3705, 3705, 3705, 3969, 3970, 3705,
     3970, 3970, 3970, 3705, 3705, 3971, 3971, 3971, 3972, 3972,
     3972, 3973, 3973, 3973, 3973, 3705, 3705, 3705, 3974, 3705,
     3705, 3705, 3705, 3974, 3974, 3974, 3975, 3976, 3975, 3977,
     3705, 3978, 3977, 3979, 3705, 3979, 3980, 3705, 3705, 3981,
     3981, 3705, 3705, 3705, 3705, 3705, 3982, 3705, 3983, 3705,
     3983, 3984, 3705, 3705, 3984, 3985, 3705, 3985, 3985, 3986,
     3705, 3705, 3986, 3987, 3987, 3987, 3988, 3705, 3705, 3705,
     3988, 3705, 3989, 3705, 3989, 3989, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3990, 3990, 3705, 3991, 3990,
     3990, 3992, 3992, 3705, 3705, 3705, 3705, 3993, 3993, 3994,
     3994, 3995, 3996, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3997, 3997, 3998, 3705, 3705, 3998, 3705, 3705, 3999, 3999,
     3999, 4000, 3705, 4000, 4001, 3705, 4002, 3705, 3705, 3705,
     4003, 4003, 4004, 4003, 4005, 4006, 4005, 4006, 3705, 3705,
     3705, 3705, 3705, 3705, 4007, 3705, 4008, 3705, 4009, 4010,
     3705, 3705, 3705, 3705, 3705, 4011, 4011, 4012, 4012, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 4013, 4014,
     4015, 4013, 4013, 4016, 4017, 4018, 4019, 4020, 4021, 4022,

     4023, 4024, 4022, 3705, 3705, 3705, 3705, 3705, 3705, 4025,
     4026, 4027, 4025, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     4028, 4028, 4028, 3705, 4029, 4030, 3705, 4030, 3705, 3705,
     4030, 3705, 3705, 4031, 4031, 4031, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 4032, 4032, 4033,
     4034, 4035, 3705, 3705, 3705, 4035, 4034, 3705, 4036, 4036,
     4037, 4038, 3705, 3705, 4038, 3705, 4039, 3705, 4040, 3705,
     3705, 3705, 4041, 4041, 4042, 4041, 4043, 4044, 4043, 4044,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 4045,
     3705, 3705, 3705, 4045, 4045, 4046, 4046, 4046, 3705, 3705,

     3705, 3705, 4046, 4046, 4047, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 4046, 4048, 3705, 3705, 4048, 3705, 4049,
     3705, 3705, 3705, 3705, 3705, 3705, 4049, 3705, 3705, 3705,
     3705, 3705, 3705, 4050, 4051, 3705, 4052, 4053, 4053, 4054,
     4055, 4056, 3705, 4057, 4058, 3705, 4059, 3705, 3705, 4060,
     4061, 3705, 4062, 4062, 3705, 3705, 3705, 4063, 4064, 4065,
     4066, 4067, 4068, 4068, 4069, 4069, 4070, 4071, 4072, 4069,
     4073, 3705, 3705, 3705, 3705, 4074, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 4075, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 4076, 3705, 3705,
     3705, 4077, 3705, 4078, 4079, 3705, 3705, 4080, 4081, 3705,
     4082, 3705, 3705, 4083, 3705, 3705, 3705, 4084, 3705, 4085,
     4075, 3705, 3705, 3705, 3705, 4086, 4087, 4087, 4087, 4087,
     4087, 4087, 4087, 4087, 3705, 4088, 4088, 4088, 3705, 3705,
     4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088,
     4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088,
     4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088,
     4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088,

     3705, 3705, 3705, 4089, 4090, 3705, 4083, 3705, 4084, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 4083,
     3705, 3705, 4084, 3705, 4091, 4091, 4091, 4091, 4091, 4091,
     4091, 4091, 4091, 3705, 3705, 4092, 4093, 4094, 3705, 3705,
     3705, 3705, 3705, 3705, 4095, 3705, 3705, 4096, 4096, 4097,
     4098, 4099, 4100, 4101, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 4102, 4102, 3705, 4103, 4103, 4103,
     4104, 4105, 4106, 4106, 3705, 4107, 4108, 4108, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 4083, 3705, 4084,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 4109, 4110, 3705, 4111, 4111, 3705, 3705, 3705, 3705,
     3705, 4112, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 4113, 3705, 4114, 4114, 3705, 4115, 3705, 4116, 4117,
     3705, 3705, 4118, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     4119, 4120, 3705, 3705, 3705, 4121, 3705, 3705, 3705, 4122,
     3705, 3705, 3705, 4123, 3705, 3705, 3705, 4124, 3705, 3705,
     3705, 4125, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 4126, 3705, 4127, 3705,
     3705, 3705, 4128, 4129, 3705, 3705, 4130, 4131, 3705, 3705,
     3705, 3705, 3705, 4132, 4132, 4133, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 4134, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 4135, 4136, 4137, 3705, 3705, 3705,
     3705, 3705, 4138, 4138, 3705, 3705, 4139, 3705, 4140, 4141,
     4142, 4141, 3705, 4143, 4144, 4145, 4146, 4147, 3705, 3705,
     3705, 3705, 4148, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 4149, 4149, 3705, 4150, 4151, 4151, 4152, 3705, 3705,

     4153, 4153, 3705, 4154, 4151, 4155, 3705, 3705, 3705, 3705,
     3705, 4156, 3705, 3705, 3705, 3705, 3705, 4157, 3705, 3705,
     4158, 4159, 4160, 4160, 4160, 4160, 4160, 4160, 4160, 4160,
     4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161,
     4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161,
     4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161, 4161,
     4161, 4161, 3705, 4161, 4161, 4161, 4161, 4161, 4161, 4161,
     4161, 4161, 4161, 4161, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 4162, 4162, 3705,
     4162, 4162, 4162, 4162, 3705, 3705, 4162, 4163, 3705, 4164,

     4165, 3705, 3705, 3705, 4166, 3705, 4167, 4168, 4169, 3705,
     3705, 3705, 3705, 3705, 4170, 4170, 3705, 4171, 4171, 4171,
     4172, 4173, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 4174, 4175, 4175, 3705,
     3705, 3705, 3705, 3705, 4176, 3705, 3705, 3705, 3705, 4177,
     3705, 4178, 3705, 3705, 3705, 3705, 3705, 4179, 4180, 3705,
     3705, 4181, 3705, 3705, 4182, 3705, 3705, 4183, 3705, 3705,
     4184, 3705, 3705, 4185, 3705, 3705, 3705, 3705, 3705, 4186,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 4187, 3705,
     3705, 3705, 3705, 3705, 4188, 4188, 3705, 3705, 2398, 3705,

     4189, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     4190, 4190, 4191, 4192, 4192, 4193, 3705, 4194, 4194, 4195,
     4196, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 4197, 3705, 4198, 3705, 4199,
     3705, 4200, 3705, 4201, 4201, 4202, 4202, 4203, 3705, 3705,
     4204, 4205, 4205, 4205, 4205, 4205, 4205, 4205, 4205, 4206,

     4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 3705,
     3705, 3705, 3705, 4206, 3705, 3705, 4206, 4206, 4206, 4206,
     4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206,
     4206, 4206, 4206, 4206, 4206, 4206, 3705, 3705, 4206, 4206,
     4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 4207,
     4207, 4207, 4207, 4207, 4207, 4207, 3705, 3705, 4208, 3705,
     3705, 3705, 3705, 4209, 3705, 3705, 3705, 3705, 4210, 4210,
     3705, 4211, 4211, 4211, 4211, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 4212, 4212, 3705, 3705, 3705,

     3705, 3705, 3705, 4213, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 4214, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     4215, 4215, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 4216, 4216, 4217,
     4218, 4219, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 4220, 4220, 4199, 3705, 4202, 3705, 4205, 4205, 4205,
     4205, 4205, 4205, 4205, 4205, 4205, 4206, 4206, 4206, 4206,
     4206, 3705, 3705, 4206, 3705, 4206, 4206, 3705, 3705, 3705,
     4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206,
     4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 4206,
     3705, 3705, 4206, 4206, 4206, 4206, 4206, 4206, 4206, 3705,
     3705, 3705, 3705, 4206, 4206, 4206, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 4207, 3705, 4207, 4207, 4207, 3705,
     3705, 4207, 4207, 3705, 4209, 3705, 4210, 4211, 4211, 4211,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 4212,
     3705, 4221, 3705, 4214, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 4215, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     4216, 3705, 3705, 3705, 4219, 3705, 3705, 3705, 3705, 2667,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 4205, 4205, 4205, 4205,
     4205, 4205, 4205, 4205, 4206, 4206, 4206, 4206, 4206, 4206,
     3705, 3705, 3705, 3705, 4206, 3705, 3705, 4206, 4206, 3705,
     3705, 3705, 4206, 4206, 4206, 3705, 4206, 4206, 3705, 3705,
     4206, 4206, 3705, 4206, 4206, 4206, 4206, 4206, 3705, 3705,
     4206, 4206, 3705, 3705, 2934, 4206, 3705, 3705, 3705, 4206,
     4206, 4206, 3705, 3705, 4206, 4206, 4206, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 4207, 4207, 3705, 3705, 3705, 3705,
     4207, 3705, 4209, 4210, 4211, 4211, 4211, 4222, 3705, 3705,
     3705, 4223, 4212, 3705, 4221, 4224, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 4225, 3705, 3705, 3705, 3705, 3705, 4219, 3705,
     3705, 3705, 2667, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 4205, 4205, 4205,
     4205, 4205, 4205, 3705, 4205, 4206, 4206, 4206, 4206, 4206,
     3705, 3705, 3705, 3705, 4206, 3705, 3705, 4206, 4206, 3705,

     3705, 3705, 3705, 3705, 3705, 4206, 4206, 4206, 4206, 3705,
     3705, 3705, 3705, 4206, 3705, 3705, 4206, 4206, 4206, 4206,
     4206, 3705, 4206, 4206, 3705, 3705, 4206, 3705, 3705, 3705,
     4206, 3705, 3705, 4206, 3705, 3705, 3705, 3705, 3705, 4207,
     4207, 4207, 3705, 4209, 4211, 4211, 4211, 4222, 4226, 3705,
     3705, 3705, 4223, 4227, 3705, 4224, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 4219, 3705,
     2667, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 4205,
     4205, 4205, 3705, 4205, 4205, 4205, 4206, 4206, 3705, 4206,
     3705, 3705, 4206, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     4206, 3705, 4206, 3705, 3705, 4206, 3705, 4206, 4206, 4206,
     3705, 4206, 4206, 4206, 3705, 3705, 4206, 3705, 3705, 3705,
     3705, 3705, 3705, 4206, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 4209, 4211, 4226, 3705, 3705, 4227, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 4219, 3705,

     2667, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 4228, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 4205, 4205,
     3705, 4205, 3705, 3705, 4206, 4206, 4206, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 4206, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 4206, 4206, 4206, 4206, 3705, 3705,
     4206, 4206, 4206, 4206, 3705, 3705, 3705, 4206, 3705, 3705,
     3705, 3705, 3705, 3705, 4211, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 4219, 2667, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 4228, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 4205, 3705, 3705,
     4206, 3705, 3705, 3705, 3705, 4206, 3705, 3705, 4229, 4230,
     4230, 4206, 4206, 3705, 3705, 3705, 4206, 4206, 4206, 4206,
     3705, 3705, 4206, 3705, 3705, 3705, 4211, 4231, 4232, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 2667, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     4205, 4206, 3705, 3705, 3705, 3705, 3705, 4230, 3705, 4206,
     4206, 3705, 4206, 4206, 4206, 3705, 3705, 3705, 3705, 3705,
     3705, 4231, 4233, 4232, 4234, 3705, 3705, 2667, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 4205, 3705,
     3705, 3705, 4206, 3705, 3705, 4206, 4206, 3705, 3705, 3705,
     3705, 4233, 4234, 2667, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 4205, 3705, 3705, 3705, 4206, 4206, 3705, 2667, 3705,
     3705, 3705, 3705, 4205, 3705, 3705, 4206, 3705, 3705, 3705,
     2667, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 2667, 3705, 3705, 3705, 3705, 3705, 3705, 2667,
     3705, 3705, 3705, 3705, 2667, 3705, 3705, 2667, 3705, 3705,
     2667, 3705, 3705, 3705, 3705, 2667, 3705, 2667, 3705, 2667,
     3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667,

     3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667,
     3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667,
     3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667,
     3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667,
     3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667,
     3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667,
     3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667,
     3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667,
     3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667,
     3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667, 3705, 2667,

     3705, 2667, 3705, 2667,    0, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705
    } ;

static yyconst flex_int16_t yy_nxt[28648] =
    {   0,
     3705, 3705,  255, 3705,  255, 3705,  256,  257,  256,  257,
     1242,  258, 3705,  258, 1242, 1090, 1100, 1101, 3705,  259,
     1091,  259,  254,  254,  255,  254,  254,  254,  256,  257,
      260,  254,  254,  258,  254,  254,  254,  254,  254,  254,
      254,  259,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  254,  254,  254,  254,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  254,  254,  254,  261,  263,  264,  263,  263,
     1098,  265,  266, 1240, 1241, 1099,  267,  263,  264,  263,
      263,  255,  265,  266,  268,  316,  317,  267, 1143, 1448,
      318,  319,  320, 1144, 1125,  268,  255, 1125,  321, 1153,
      378,  379, 1399, 1400, 1154,  380,  322,  255,  323, 1090,
      381,  256,  257,  382, 1091, 1093,  258,  269, 1093, 1170,
      383, 1464, 1170, 1448,  259, 1465, 1094, 2637,  269,  254,
      270,  271,  272,  270,  273,  256,  257,  274,  254,  254,
      258,  254,  254,  254,  254,  254,  254,  275,  259,  254,
      254,  254,  254,  254,  276,  277,  254,  254,  254,  254,

      254,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      254,  254,  254,  254,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  279,
      254,  280,  278,  254,  281,  282,  283,  281,  284,  256,
      257,  285,  254,  286,  258,  287,  254,  286,  288,  289,
      288,  254,  290,  254,  254,  254,  254,  254,  291,  286,
      292,  286,  254,  254,  293,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  294,  287,  254,  254,  254,  294,  295,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  296,  294,  294,  294,
      294,  294,  294,  279,  254,  284,  294,  297,  297,  298,
      297,  297,  297,  299,  300,  301,  297,  297,  302,  297,
      297,  297,  297,  297,  297,  297,  303,  297,  297,  297,
      297,  297,  304,  305,  297,  297,  297,  297,  297,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  297,  297,
      297,  297,  306,  306,  306,  306,  306,  306,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  297,  297,  297,
      306,  297,  297,  298,  297,  297,  297,  299,  300,  307,
      297,  297,  302,  297,  297,  297,  297,  297,  297,  297,
      303,  297,  297,  297,  297,  297,  297,  305,  297,  297,
      297,  297,  297,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  297,  297,  297,  297,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  309,  308,

      308,  310,  297,  297,  308,  255, 1304,  255, 1090,  256,
      257,  256,  257, 1091,  258, 1502,  258, 1133, 1133, 1134,
     1133,  255,  259, 1090,  259,  316,  317, 1157, 1091, 1503,
      318,  319,  320, 1158,  442,  441,  442,  442,  321,  256,
      257, 1135, 1160, 1242,  258, 1090,  322, 1242,  323, 1305,
     1091, 1508,  452, 1509,  311, 2638,  311,  254,  254,  255,
      254,  254,  254,  256,  257,  312,  254,  254,  258,  254,
      313,  254,  254,  254,  254,  254,  259,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  254,  254,
      254,  254,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  254,  254,  254,
      314,  324,  325,  326,  324,  325,  324,  327,  328,  329,
      324,  324,  330,  324,  324,  324,  324,  324,  324,  324,
      331,  324,  324,  324,  324,  324,  324,  332,  324,  324,
      324,  324,  324,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  334,  324,  324,  324,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  335,  324,  324,  333,  255, 1350,  255, 1090,  337,
      338,  337,  338, 1091,  339, 1351,  339, 1142, 1142, 1142,
     1142,  255,  340,  428,  340,  378,  379,  429,  430, 1703,
      380, 1197,  431, 1198, 1197,  381, 1199,  255,  382, 1090,
      432,  256,  257, 1704, 1091,  383,  258, 1508,  433, 1509,
     1107, 1107, 1107, 1107,  259, 1703,  341, 1108,  341,  342,
      342,  343,  342,  342,  342,  344,  345,  346,  342,  342,
      347,  342,  342,  342,  342,  342,  342,  342,  348,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      342,  342,  342,  342,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  350,
      342,  342,  349,  254,  351,  352,  353,  351,  254,  256,
      257,  354,  254,  254,  258,  254,  254,  254,  288,  355,
      288,  254,  290,  254,  254,  254,  254,  254,  356,  277,
      357,  254,  358,  254,  293,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  254,  360,  254,  254,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  361,  254,  254,  359,  363,  364,  363,
      363, 1249,  365,  366, 1409, 1410, 1250,  367,  363,  364,
      363,  363, 1302,  365,  366,  368, 1157, 1303,  367,  255,
     1322, 1254, 1158,  371,  257, 1323,  368, 1997,  372,  373,
      255, 1160, 1255,  374,  371,  257,  259, 1098, 1233,  372,
      373, 1233, 1099,  375,  374, 1998,  428,  259,  255, 1366,

      429,  430,  469,  470,  375,  431, 1090,  471,  472,  473,
     1444, 1091, 1445,  432,  255,  474,  369, 1161,  469,  470,
     1810,  433,  370,  471,  472,  473, 1361,  369, 1446, 1361,
     1811,  474, 2395,  370,  442,  441,  442,  442, 1090,  256,
      257, 1411, 1412, 1091,  258, 1234, 1235,  376, 1126, 1126,
     1126, 1126,  452, 1368, 1387, 1127, 2395, 1387,  376,  254,
      384,  385,  386,  384,  387,  256,  388,  389,  390,  391,
      258,  392,  254,  391,  393,  394,  393,  395,  396,  397,
      397,  397,  397,  397,  398,  399,  400,  401,  254,  402,
      403,  404,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  405,  404,  404,  404,  404,  404,
      406,  254,  254,  407,  408,  409,  404,  410,  411,  412,
      413,  414,  404,  415,  416,  417,  418,  419,  404,  420,
      404,  421,  422,  423,  424,  425,  404,  404,  404,  426,
      254,  387,  404,  254,  434,  435,  434,  434,  436,  256,
      257,  437,  254,  254,  258,  254,  254,  254,  254,  254,
      254,  254,  259,  254,  254,  254,  254,  254,  438,  254,
      254,  254,  254,  254,  254,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  254,  254,  254,  254,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  254,  254,  436,  439,  254,  440,  441,
      442,  440,  254,  256,  443,  444,  254,  254,  258,  445,
      254,  254,  254,  446,  254,  254,  447,  254,  254,  254,
      254,  254,  254,  448,  254,  449,  254,  254,  254,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  451,  254,
      254,  254,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  450,  450,  254,  254,  254,
      450,  255, 2639,  255, 1090,  256,  453,  256,  453, 1091,
      258,  454,  258,  454, 1339,  455, 1339,  455,  259, 1340,
      259, 1340, 1645, 1646,  456,  457,  456,  457,  459,  460,
      459,  459, 1090,  461,  462, 1732, 1364, 1091,  463,  464,
      465, 1365, 1387,  466, 1732, 1387,  467,  459,  460,  459,
      459,  476,  461,  462, 1629,  477,  478,  463,  464,  465,
      479, 1414,  466, 1386, 1414,  467, 1386,  476,  480, 1359,
     1630,  477,  478,  499, 1415,  481,  479,  500,  501,  455,
     1420,  455,  502,  503,  480, 1096, 1096, 1096, 1096, 1390,

      504,  481, 1420, 2216, 1391,  499, 1397,  505,  506,  500,
      501, 1398, 1404, 1097,  502,  503, 2278, 1405,  580,  255,
     1390,  580,  504,  581,  582, 1407, 1725, 1726,  583,  505,
      506,  584,  580,  255, 1746,  580,  585,  581,  582,  482,
     1421, 1481,  583, 1747, 1481,  584, 1136, 1136, 1136, 1136,
      585, 1494, 1421, 1137, 1494,  482,  458,  483,  484,  483,
      483,  458,  461,  462,  485,  458,  458,  463,  458,  458,
      458,  458,  486,  458,  458,  487,  458,  458,  458,  458,
      458,  486,  486,  458,  488,  458,  458,  458,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,

      489,  489,  489,  489,  489,  489,  489,  458,  458,  458,
      458,  489,  490,  489,  491,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  492,  493,  489,  489,  494,  495,
      496,  489,  497,  489,  489,  489,  486,  458,  458,  489,
      255, 1090, 1755,  255,  508,  509, 1091,  508,  509,  510,
     1732, 1756,  510,  515,  516,  517,  515,  511,  518,  519,
      511, 1417, 1505,  520, 1732, 1505, 1418,  515,  516,  517,
      515,  521,  518,  519, 1420, 1399, 1400,  520, 1096, 1096,
     1096, 1096, 2461,  522, 1395,  521, 2462, 1395, 1090,  512,
     1396,  513,  512, 1091,  513, 1420, 1097,  522,  515,  516,

      517,  515, 1427,  518,  519, 1409, 1410, 1428,  520,  515,
      516,  517,  515, 1424,  518,  519,  521, 1411, 1412,  520,
      515,  516,  517,  515, 1421,  518,  519,  521,  522, 1430,
      520,  255,  523,  524, 1431,  256,  257, 2640,  521,  522,
      258, 1103, 1103, 1103, 1103, 1421,  523,  524,  259, 2641,
      526,  515,  516,  517,  515,  557,  518,  519, 1104,  558,
      559,  520, 2642, 1421,  560, 1105, 1090,  561, 1420,  521,
      557, 1091,  562, 1603,  558,  559, 1603,  523,  525,  560,
     1422,  526,  561, 1916, 2401, 1423,  255,  562,  523,  525,
      256,  257, 1917, 1090, 1755,  258,  595,  596, 1091,  523,

      527, 2644,  255,  259, 1442,  563,  256,  257, 1755, 1443,
      555,  258,  595,  596, 1230, 1230, 1230, 1230, 1421,  259,
      563, 1231, 1248, 1248, 1248, 1248, 1327, 1327, 1327, 1327,
      523,  527,  254,  254,  255,  254,  254,  254,  256,  257,
      528,  254,  254,  258,  254,  254,  254,  254,  254,  254,
      254,  259,  254,  254,  254,  254,  254,  254,  529,  254,
      254,  254,  254,  254,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  254,  254,  254,  254,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,

      531,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  254,  254,  254,  530,  254,  532,  533,  532,
      532,  534,  256,  257,  535,  254,  254,  258,  254,  254,
      254,  254,  254,  254,  254,  259,  254,  254,  254,  254,
      254,  536,  254,  254,  254,  254,  254,  254,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  254,  254,  254,
      254,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  254,  254,  534,  537,

      539,  540, 1090,  539, 1090,  541,  542, 1091, 1470, 1091,
      543,  549,  540, 1470,  549, 1090,  541,  550,  544, 1473,
     1091,  543,  539,  551, 1474,  539, 1478,  552,  542,  544,
      545, 1479,  543,  255, 1485, 2039, 2645,  256,  257, 1486,
      553,  545,  258, 1495, 1103, 1103, 1103, 1103, 1496, 2039,
      259,  546,  545,  539,  551, 1448,  539, 1919,  552,  542,
      557, 1104,  546,  543,  564,  559, 1920, 2008, 1105,  565,
     1525,  553,  561,  554, 2646, 1526, 1339,  562, 2647,  547,
      548, 1340, 2009,  545, 1129, 1130, 1130, 1129,  557, 1448,
      547,  548,  564,  559,  540, 2150, 2151,  565,  566,  567,

      561,  546,  546,  543,  554,  562, 1631, 2648, 1131, 1631,
      563,  568,  555, 1188, 1188, 1188, 1188,  540,  569, 1632,
      587,  566,  567,  545,  588,  589,  543, 1125, 1125,  590,
     1125, 1125,  546,  546,  568,  572,  573,  591,  563,  574,
      575,  569, 1090, 1508,  576, 1509,  545, 1091, 1919,  572,
      573,  587,  577,  574,  575,  588,  589, 1920,  576, 1537,
      590, 1420, 1537, 1106, 1538, 1508,  577, 1509,  591,  255,
      592,  255,  570,  256,  257,  256,  257, 2663,  258, 1320,
      258, 1685, 1320, 1732, 1685,  578,  259, 1510,  259,  255,
     2664, 1090, 1189,  612,  613,  570, 1091, 1732,  614,  578,

     1686,  592,  598,  599,  598,  598,  615,  600,  601, 1511,
     2665, 1421,  602,  598,  599,  598,  598,  255,  600,  601,
      603,  256,  257,  602, 1090, 1797,  258, 1573,  604, 1091,
      605,  603, 1574, 1798,  259, 1799, 1234, 1235,  616,  604,
      617,  605,  606, 1697,  607, 2666, 1697,  593,  594,  593,
      594,  255, 1777,  255, 1090,  256,  257,  608,  257, 1091,
      258, 1582,  258,  609,  610, 1257, 1583, 2146,  259, 1698,
      259, 1341, 1341, 1341, 1341,  255,  606, 1586,  607,  608,
      257, 2146, 1587, 1592,  258,  609,  610, 1424, 1593,  255,
     1342,  619,  259,  612,  613,  620,  621, 1508,  614, 1509,

      622, 1130, 1130, 1130, 1130,  619,  615,  255,  623,  620,
      621,  256,  257, 1777,  622, 1259,  258, 1203, 1203, 1203,
     1203, 1260,  623, 1090,  259, 1131, 1261, 1262, 1091, 1263,
     1170, 1090,  679, 1170, 1090, 1204, 1091, 1421,  616, 1091,
      617,  254,  254,  255,  254,  254,  254,  256,  257,  624,
      254,  254,  258,  254,  254,  254,  254,  254,  254,  254,
      259,  254,  254,  254,  254,  254,  254,  625,  254,  254,
      254,  254,  254,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  254,  254,  254,  254,  626,  626,  626,  627,

      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  628,  626,  626,
      626,  254,  254,  254,  626,  630, 1803,  630, 1090,  631,
      632,  631,  632, 1091,  633, 1804,  633, 1325, 1325, 1325,
     1325, 1805,  634, 2160,  634,  637,  638,  637,  637, 1090,
      639,  640, 1326, 2161, 1091,  641,  637,  638,  637,  637,
     1090,  639,  640,  642, 1448, 1091,  641,  645,  646,  645,
      645, 1090,  647,  648,  642, 2669, 1091,  649,  681, 1420,
      650, 1090,  682,  683,  651,  652, 1091,  684, 2126, 1622,
     1147, 1147, 1147, 1147, 1623,  685, 2125,  653, 1448, 1090,

     2670, 1148,  643,  635, 1091,  635,  645,  646,  645,  645,
     1090,  647,  648,  643, 1131, 1628,  649,  255,  653,  650,
     1635,  256,  257,  651,  652, 1636,  258, 1604,  681, 1421,
     1604, 2671,  682,  683,  259,  706,  653,  684, 1605,  707,
      708, 2672,  679, 2673,  709,  685, 1308, 1308, 1308, 1308,
     1090, 1090,  710, 1309, 2674, 1091, 1091,  653,  254,  254,
      255,  254,  254,  254,  256,  257,  654,  254,  254,  258,
      254,  254,  254,  254,  254,  254,  254,  259,  254,  254,
      254,  254,  254,  254,  655,  254,  254,  254,  254,  254,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  656,  656,  656,  656,  656,  656,  656,  656,  254,
      254,  254,  254,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  657,  254,
      254,  656,  254,  254,  255,  254,  254,  254,  256,  257,
      658,  254,  254,  258,  254,  254,  254,  254,  254,  254,
      254,  259,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  254,  254,  254,  254,  659,  659,  659,

      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  254,  254,  254,  659,  254,  254,  255,  254,
      254,  254,  256,  257,  660,  254,  254,  258,  254,  254,
      254,  254,  254,  254,  254,  259,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  254,  254,  254,
      254,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,

      661,  661,  661,  661,  661,  661,  254,  254,  254,  661,
      254,  662,  663,  662,  662,  254,  256,  257,  664,  254,
      254,  258,  254,  254,  254,  254,  665,  254,  254,  259,
      254,  254,  254,  254,  254,  254,  665,  254,  254,  254,
      254,  254,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  254,  254,  254,  254,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      254,  254,  254,  666,  668, 1987,  668, 1090,  669,  670,

      669,  670, 1091,  671, 1988,  671, 1205, 1205, 1205, 1205,
      255,  672,  255,  672,  689,  690,  689,  690, 1090,  691,
     1090,  691, 2583, 1091, 1206, 1091,  706,  692,  718,  692,
      707,  708,  719,  720,  693,  709,  693,  721, 1197,  722,
     2584, 1197,  718,  710, 1090,  723,  719,  720,  673, 1091,
      673,  721, 1090,  722,  674, 1197,  674, 1091, 1197,  723,
     1358, 1358, 1358, 1358,  675,  676,  675,  676, 1358, 1358,
     1358, 1358,  677,  678,  677,  678,  254,  254,  255,  254,
      254,  254,  256,  257,  686,  254,  254,  258,  254,  254,
      254,  254,  254,  254,  254,  259,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  254,  254,  254,
      254,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  254,  254,  254,  687,
      694,  695,  441,  695,  695,  694,  696,  697,  698,  694,
      694,  699,  694,  694,  694,  694,  700,  694,  694,  701,
      694,  694,  694,  694,  694,  694,  702,  694,  694,  694,
      694,  694,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  694,  694,  694,  694,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      704,  694,  694,  703,  254,  254,  255,  254,  254,  254,
      256,  257,  711,  254,  254,  258,  712,  254,  254,  254,
      254,  254,  254,  259,  254,  254,  254,  254,  254,  713,
      714,  254,  254,  254,  254,  254,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  254,  254,  254,  254,  715,

      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  716,  254,  254,  715,  254,  254,
      255,  254,  254,  254,  256,  257,  724,  254,  254,  258,
      725,  254,  254,  254,  726,  254,  254,  259,  254,  254,
      254,  254,  254,  727,  714,  254,  254,  254,  254,  254,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  254,
      254,  254,  254,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  716,  254,
      254,  728,  730, 1090, 2675,  730,  731,  732, 1091,  731,
      732,  733, 1681,  734,  733, 1681,  734, 2676, 1692,  735,
      255, 1692,  735,  255,  256,  257,  255,  256,  257,  258,
      256,  257,  258, 1699, 2677,  258, 1693,  259, 1700, 1682,
      259, 1701, 1420,  259, 2678,  736, 1702,  255,  736,  255,
      745,  256,  257,  256,  257, 2679,  258, 1718,  258, 2680,
      737, 2147, 1700,  255,  259, 1701,  259,  256,  257, 1683,
     1719,  745,  258,  255,  754, 2147, 1722,  256,  257, 1448,
      259, 1723,  258,  785,  255, 1691, 1730, 1684,  256,  257,

      259, 1731, 1421,  258,  785,  255,  755, 1694, 2681,  256,
      257,  259, 1695,  738,  258,  739,  786,  756,  757,  740,
      758, 1772,  259, 1448, 1748,  741, 1773, 1748, 1749,  742,
      743, 2682,  255, 1780,  744,  255,  256,  257, 1781,  256,
      257,  258, 1750,  754,  258, 1727,  737, 1157, 1727,  259,
      255, 1782,  259, 1158,  256,  257, 1783, 1157, 1728,  258,
     2312,  786, 1160, 1158,  255,  755,  255,  259,  256,  257,
      256,  257, 1160,  258, 2312,  258,  756,  757,  797,  758,
      797,  259, 2684,  259, 1203, 1203, 1203, 1203,  798,  738,
      798,  739, 2685, 2182, 2686,  740, 1353, 1353, 1353, 1353,

     1794,  741, 1204, 1795, 1807,  742,  743, 1808, 1354, 2183,
      744,  254,  746,  255,  254,  746,  254,  256,  257,  747,
      254,  254,  258,  748,  254,  254,  254,  254,  254,  254,
      259,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  254,  254,  254,  254,  749,  749,  749,  750,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  751,  749,  749,
      749,  254,  254,  254,  749,  254,  254,  255,  254,  254,

      254,  256,  257,  752,  254,  254,  258,  254,  254,  254,
      254,  254,  254,  254,  259,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  254,  254,  254,  254,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  254,  254,  254,  753,  254,
      254,  255,  254,  254,  254,  256,  257,  759,  254,  254,
      258,  254,  254,  254,  254,  254,  254,  254,  259,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      254,  254,  254,  254,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  254,
      254,  254,  760,  254,  254,  255,  254,  254,  254,  256,
      257,  761,  254,  254,  258,  254,  254,  254,  254,  254,
      254,  254,  259,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  762,  762,  762,  762,  762,

      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  254,  254,  254,  254,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  254,  254,  254,  762,  764,  765,  764,
      764,  820,  766,  767, 2687,  821,  822,  768,  769,  770,
      823,  824,  771,  772, 1387,  773, 1814, 1387,  825, 2211,
     2212, 2039,  774,  775, 1815,  776,  777,  778,  255, 1816,
     2040,  255,  800,  801, 2688,  800,  801,  802,  803,  804,
      802,  803,  804, 1093, 2357,  805, 1093,  779,  805,  770,

     2211, 2218, 2356,  806, 1094,  807,  806,  820,  807, 1958,
     1387,  821,  822, 1387, 1959, 2591,  823,  824, 1102, 1103,
     1103, 1102, 1481, 2592,  825, 1481,  780,  770,  764,  765,
      764,  764,  255,  766,  767, 1104, 1054, 1055,  768,  769,
      770, 1056, 1105,  771,  772, 1961,  773, 1470, 1233, 1057,
     1962, 1233, 1470,  774,  775,  255,  776,  777,  778,  256,
      257, 2168, 2094, 2169,  258,  826,  827, 1357, 1358, 1358,
     1357, 2170,  259, 1359, 1208, 1208, 1208, 1208,  779, 2689,
      770,  830,  831,  830,  830,  874,  832,  833, 2094,  875,
      876,  834,  835,  836,  877,  878,  879, 1106, 1210,  837,

     1494, 2690,  880, 1494,  828, 1234, 1235,  780,  770,  254,
      781,  782,  781,  781,  254,  256,  257,  783,  254,  254,
      258,  254,  254,  254,  254,  254,  254,  254,  259,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      254,  254,  254,  254,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  254,
      254,  254,  784,  254,  787,  788,  787,  787,  254,  256,

      257,  789,  254,  790,  258,  791,  254,  790,  254,  792,
      254,  254,  793,  254,  254,  254,  254,  254,  254,  794,
      254,  795,  254,  254,  254,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  254,  254,  254,  254,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  254,  254,  254,  796,  808,  809,  810,
      809,  809,  811,  812,  813,  814,  808,  808,  815,  808,
      808,  808,  808,  808,  808,  808,  816,  808,  808,  808,

      808,  808,  817,  808,  808,  808,  808,  808,  808,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  808,  808,
      808,  808,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  808,  808,  811,
      818,  255, 1470, 2691,  842,  256,  257, 1470,  843,  844,
      258,  826,  827,  845,  830,  831,  830,  830,  259,  832,
      833,  846, 2313, 2692,  834,  835,  836,  847,  830,  831,
      830,  830,  837,  832,  833, 2355, 2313, 1921,  834,  835,

     1921, 1922,  830,  831,  830,  830,  837,  832,  833, 2355,
      828, 2693,  834,  835,  839, 1923,  840,  842, 2037, 1787,
      837,  843,  844, 2038, 1788, 1789,  845, 1790,  839, 1505,
      840, 2635, 1505, 2694,  846, 1367, 1367, 1367, 1367, 2636,
      847,  254,  254,  255,  254,  254,  254,  256,  257,  848,
      254,  254,  258,  254,  254,  254,  254,  254,  254,  254,
      259,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  254,  254,  254,  254,  849,  849,  849,  849,

      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  254,  254,  254,  849,  254,  254,  255,  254,  254,
      254,  256,  257,  850,  254,  254,  258,  254,  254,  254,
      254,  254,  254,  254,  259,  254,  254,  254,  254,  254,
      254,  851,  254,  254,  254,  254,  254,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  254,  254,  254,  254,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,

      852,  852,  852,  852,  852,  254,  254,  254,  852,  854,
     1508,  854, 1509,  855,  856,  855,  856, 2695,  857, 1537,
      857,  858, 1537,  858, 1538,  854,  859,  854,  859,  861,
      856,  861,  856, 1699,  862, 2077,  862,  858, 1700,  858,
     1732,  864,  859,  864,  859,  865,  866,  865,  866, 1732,
      867, 2006,  867,  868, 1093,  868, 2394, 1093,  869,  860,
      869,  860,  864, 2146,  864, 1094,  871,  866,  871,  866,
     2394,  872, 2146,  872,  868,  860,  868,  860,  874,  869,
     2077,  869,  875,  876, 2696, 1718, 2697,  877,  878,  879,
     1700,  870,  882,  870,  882,  880,  883,  884,  883,  884,

     2698,  885, 2699,  885, 1147, 1147, 1147, 1147, 2077,  886,
     2147,  886,  870,  890,  870, 1148,  890,  891,  892, 2147,
      891,  892,  893,  894,  895,  893,  894,  895, 1131, 1414,
      896,  898, 1414,  896,  898,  899,  900, 2312,  899,  905,
      901, 2165, 1415,  901,  907,  908, 2312,  907,  902,  909,
      910,  902, 2700, 2166,  911,  912,  913, 2167, 1093,  255,
     1150, 1093,  914, 1054, 1055, 1508, 2537, 1509, 1056, 1094,
      887,  888,  887,  888,  907,  908, 1057,  907,  255,  909,
      910, 2538,  508,  509,  911,  912,  913,  510,  459,  460,
      459,  459,  914,  461,  462,  511, 2339, 2177,  463,  936,

      937, 1386, 2178,  466, 1386, 1714,  467, 1359, 1714,  903,
      904, 2701,  903,  904,  916,  917,  916,  916, 1715,  918,
      919, 2702, 1157, 1716,  920,  921,  922,  512, 1158,  954,
     2070, 1698,  923,  459,  460,  459,  459, 1160,  461,  462,
      924, 2703,  925,  463,  936,  937, 2313, 1320,  466,  255,
     1320,  467,  255,  939,  940, 2313,  939,  940,  941, 1395,
      942,  941, 1395,  942, 2706, 1396,  943,  956, 2707,  943,
     1761,  832,  965, 2070, 2708, 2407,  834,  966,  967, 1110,
     1110, 1110, 1110, 1111,  968, 2408, 1112,  926,  916,  917,
      916,  916, 1320,  918,  919, 1320, 2211, 2212,  920,  921,

      922, 2407, 2070, 1105, 1234, 1235,  923,  945,  946,  945,
      945, 2408,  947,  948,  924, 2709,  925,  949,  950,  951,
     2089, 1921,  952, 2089, 1921,  953,  945,  946,  945,  945,
     1921,  947,  948, 1921, 1922, 2710,  949,  950,  951, 1963,
     1692,  952,  956, 1692,  953, 2711,  832,  965, 1923, 1234,
     1235,  834,  966,  967, 1425, 1425, 1425, 1425, 1693,  968,
     1111,  926,  927,  927,  928,  927,  927,  927,  929,  930,
      931,  927,  927,  932,  927,  927,  927,  927,  927,  927,
      927,  933,  927,  927,  927,  927,  927,  927,  934,  927,
      927,  927,  927,  927,  935,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  927,  927,  927,  927,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  934,  927,  927,  935,  255, 1508,  956, 1509,
      508,  509,  957,  958, 1508,  510, 1509,  959, 1205, 1205,
     1205, 1205,  956,  511,  956,  960,  957,  958,  962,  958,
     2713,  959, 1604,  963, 1921, 1604, 1206, 1921, 1989,  960,
     2715,  960,  956, 1605,  956, 2355,  962,  958,  832,  833,
     2005,  963, 1990,  834, 2355,  512, 2487,  954,  961,  960,

     2100,  968, 2338, 1167, 1167, 1167, 1167, 2153, 2717,  969,
     2154,  970,  961,  956,  961, 2112,  972,  832,  833, 2435,
      973,  974,  834, 1786, 2436,  975, 2059, 1168,  976, 2059,
      968, 1169,  961,  977, 1325, 1325, 1325, 1325,  969, 1855,
      970,  979,  972, 2100,  979,  978,  973,  974,  982, 1326,
     2060,  975,  983,  984,  980, 2211, 2218,  985,  982,  977,
     2112, 1746,  983,  984,  972,  986,  978,  985,  989,  990,
     1747,  978, 2100,  991,  972,  986, 2761,  987,  989,  990,
      255,  992, 2649,  991,  995,  996, 2762,  987, 2112,  997,
      255,  992,  978,  993,  995,  996, 2487,  998,  987,  997,

      255, 2716, 1448,  993, 1048, 1049, 2649,  998,  987, 1050,
     1631, 1051, 1697, 1631,  993, 1697,  255, 1052, 2650, 1666,
     1048, 1049, 1666, 1632,  993, 1050, 1667, 1051, 1668, 2777,
     1059,  999, 1668, 1052, 1060, 1061, 1448, 2778, 1698, 1062,
     1059,  999, 2650, 2108, 1060, 1061, 2108, 1063, 1000, 1062,
     1425, 1425, 1425, 1425, 2779, 2780, 1715, 1063, 1000, 1001,
     1002, 1003, 1002, 1002, 1001, 1004, 1005, 1006, 1001, 1001,
     1007, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1008, 1001,
     1001, 1001, 1001, 1001, 1001, 1009, 1001, 1001, 1001, 1001,
     1001, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,

     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1011, 1001, 1001, 1001, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1001,
     1001, 1001, 1010,  254, 1012, 1013, 1012, 1012,  254,  256,
      257, 1014,  254,  254,  258,  254,  254,  254,  254,  254,
      254,  254,  259,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015,  254,  254,  254,  254, 1015, 1015,

     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015,  254,  254,  254, 1015,  255, 2781,  255,
     2782, 1017, 1018, 1017, 1018, 2783, 1019, 1020, 1019, 1020,
     1919, 2784, 1065, 1066, 1021, 1065, 1021, 1067, 1068, 1920,
     1685, 1685, 1069, 1685, 1685, 1070, 1119, 1119, 1119, 1119,
     1071, 1208, 1208, 1208, 1208, 2785, 2787, 1120, 1072, 1686,
     1686, 1121, 1073, 1104, 1203, 1203, 1203, 1203, 1919, 2788,
     1105, 1123, 1124, 2089, 2789, 1210, 2089, 1920, 1377, 1377,
     1377, 1377, 1204, 1074, 1022, 1378, 1022, 1023, 1024, 1025,

     1024, 1024, 1026, 1027, 1028, 1029, 1023, 1023, 1030, 1031,
     1032, 1023, 1023, 1023, 1023, 1023, 1033, 1023, 1023, 1023,
     1023, 1023, 1034, 1023, 1023, 1023, 1023, 1023, 1023, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1023, 1023,
     1023, 1023, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1023, 1023, 1026,
     1035, 1037,  255, 2793, 1037, 1836, 1038, 1039, 1836, 1837,
     1939, 1040, 1037,  255, 1939, 1037, 2794, 1038, 1039, 1041,

     1746, 1955, 1040, 1838, 1436, 1436, 1436, 1436, 1042, 1747,
     1041, 1075, 1066, 1955, 1075, 1839, 1067, 1068, 2798, 1042,
     2189, 1069, 1079, 2189, 1076, 2473, 1080, 1081, 1082, 1077,
     1692, 1083, 1748, 1692, 1084, 1748, 1839, 1072, 1043, 1085,
     2799, 1073, 1147, 1147, 1147, 1147, 2800, 1086, 1693, 1043,
     2119, 1087, 2801, 1148, 1044, 1666, 1045, 2802, 1666, 2803,
     1046, 1437, 1074, 1157, 1668, 1044, 1131, 1045, 1668, 1158,
     2804, 1046, 1087, 1082, 1088, 1079, 2805, 1088, 1160, 1080,
     1081, 1082, 2806, 1508, 1083, 1509, 2807, 1089, 1114, 1114,
     1114, 1114, 1085, 2704, 2808, 1115, 1175, 1176, 1176, 1175,

     1086, 1151, 2705, 1177, 1087, 1104, 1130, 1130, 1130, 1130,
     1139, 2413, 2809, 1140, 1190, 1190, 1190, 1190, 2811, 2813,
     1243, 1243, 1243, 1243, 2013, 1087, 1082, 1244, 2013, 1245,
     1131, 1191, 2596, 1245, 1205, 1205, 1205, 1205, 1193, 2034,
     1264, 1264, 1264, 1264, 1246, 2034, 2043, 2109, 1264, 1264,
     1264, 1264, 1206, 1306, 1306, 1306, 1306, 2110, 2043, 1179,
     1306, 1306, 1306, 1306, 1210, 1194, 1266, 1921, 2047, 1117,
     1921, 2109, 1210, 1245, 1266, 1180, 2047, 1307, 1440, 1440,
     1440, 1440, 2051, 2110, 1307, 1963, 2051, 1139, 1132, 1181,
     1181, 1182, 1181, 1132, 1132, 1132, 1183, 1132, 1132, 1132,

     1132, 1132, 1132, 1132, 1271, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1132,
     1132, 1132, 1132, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1185, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 2055, 1132,
     1132, 1184, 1176, 1176, 1176, 1176, 1508, 2055, 1509, 1177,
     1236, 1236, 1236, 1236, 1237, 2815, 2063, 1238, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1157, 1264, 1264, 1264,

     1264, 2063, 1158, 2816, 1210, 1264, 1264, 1264, 1264, 2816,
     2059, 1160, 1210, 2059, 1266, 2817, 1210, 1727, 1266, 1666,
     1727, 1210, 1666, 1266, 1264, 1264, 1264, 1264, 1668, 1210,
     1728, 1266, 1668, 1681, 2060, 1179, 1681, 2818, 1318, 1096,
     1096, 1318, 1267, 2819, 1319, 1508, 1270, 1509, 1210, 2820,
     1266, 3705, 1207, 1208, 1208, 1207, 1097, 2821, 1209, 2822,
     1682, 1237, 1272, 2812, 1274, 1273, 2812, 2823, 1275, 1264,
     1264, 1264, 1264, 1508, 2824, 1509, 1210, 1440, 1440, 1440,
     1440, 1276, 1211, 2825, 2810, 1096, 1096, 1096, 1096, 2300,
     1683, 1277, 2300, 1210, 2569, 1266, 1212, 2826, 2827, 1278,

     2828, 1279, 1213, 1097, 2829, 2830, 1214, 1215, 1684, 1216,
     1217, 1218, 2831, 2835, 2836, 1219, 1220, 1221, 1222, 1223,
     2837, 1224, 2597, 1225, 1226, 1227, 1228, 1229, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1280, 1264, 1264, 1264, 1264, 2838, 1264, 1264, 1264, 1264,
     2839, 2840, 1210, 1157, 1266, 2841, 1210, 2843, 1266, 1158,
     1210, 2371, 1266, 2844, 2371, 1210, 2616, 1266, 1160, 2845,
     1210, 2842, 1266, 2846, 1264, 1264, 1264, 1264, 1096, 1096,
     1096, 1096, 1264, 1264, 1264, 1264, 1832, 1281, 2847, 1832,
     1283, 1264, 1264, 1264, 1264, 2842, 1097, 2848, 1210, 1282,

     1266, 2849, 2850, 2856, 1284, 1285, 1210, 2857, 1266, 1264,
     1264, 1264, 1264, 2129, 1286, 1210, 1835, 1266, 2859, 2862,
     1287, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1288,
     2863, 2108, 2864, 1210, 2108, 1266, 2865, 1835, 1264, 1264,
     1264, 1264, 2868, 2832, 1715, 1210, 2832, 1266, 2869, 1210,
     1291, 1266, 2108, 1289, 2866, 2108, 1290, 1315, 1315, 1315,
     1315, 2870, 1210, 2867, 1266, 1715, 1306, 1306, 1306, 1306,
     1311, 2871, 1292, 1312, 2872, 2874, 1203, 1203, 1203, 1203,
     1294, 1307, 1293, 1317, 1205, 1205, 1205, 1205, 2876, 2878,
     1307, 2879, 1296, 1298, 1204, 1832, 2880, 1297, 1832, 1295,

     2881, 1299, 1206, 2882, 2885, 2886, 1300, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1666, 1371, 1835, 1666, 2887, 1371, 2888,
     1667, 1373, 1668, 2883, 2833, 1373, 1668, 2833, 2889, 1376,
     2884, 2890, 2891, 1376, 2892, 2834, 1835, 1311, 1328, 1328,
     1328, 1328, 1375, 1375, 1375, 1375, 1380, 2893, 2894, 1381,
     1375, 1375, 1375, 1375, 2895, 2896, 1374, 1393, 1393, 1393,
     1393, 1401, 1401, 1401, 1401, 1329, 1376, 1436, 1436, 1436,
     1436, 2897, 2898, 2899, 1376, 1394, 2903, 2904, 1235, 1402,
     1451, 1451, 1451, 1451, 1455, 1455, 1455, 1455, 1458, 1458,

     1458, 1458, 2905, 1330, 2715, 1331, 2487, 1452, 1458, 1458,
     1458, 1458, 2906, 2926, 2901, 1332, 1333, 2927, 2953, 1334,
     1335, 1336, 2954, 1337, 1096, 1096, 1096, 1096, 1203, 1203,
     1203, 1203, 2968, 1380, 1437, 2969, 1205, 1205, 1205, 1205,
     2970, 2971, 1097, 2972, 2974, 1457, 1204, 1482, 1482, 1482,
     1482, 2975, 2976, 1459, 1206, 1488, 1488, 1488, 1488, 1490,
     1490, 1490, 1490, 1459, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1489, 1203, 1203, 1203, 1203, 1205, 1205, 1205,
     1205, 2981, 1097, 1492, 2902, 2982, 1097, 1531, 1531, 1531,
     1531, 1204, 2985, 2986, 1532, 1206, 1531, 1531, 1531, 1531,

     2987, 2988, 2989, 1532, 3705, 3705, 3705, 3705, 2990, 2991,
     2992, 3705, 1534, 1534, 1534, 1534, 2994, 1539, 1539, 1539,
     1539, 2997, 2998, 2999, 1540, 1535, 1541, 3001, 3002, 3003,
     1541, 1539, 1539, 1539, 1539, 3004, 3005, 3006, 1540, 1836,
     1541, 2077, 1836, 1908, 1541, 3705, 3705, 3705, 3705, 3007,
     3008, 1508, 3705, 1509, 3705, 3009, 3010, 1909, 3705, 1539,
     1539, 1539, 1539, 3011, 2812, 3012, 1540, 2812, 1541, 1839,
     3013, 2995, 1541, 1203, 1203, 1203, 1203, 1205, 1205, 1205,
     1205, 1543, 1543, 1543, 1543, 1546, 1546, 1546, 1546, 3014,
     1839, 1204, 2993, 3015, 3016, 1206, 1547, 1549, 1549, 1549,

     1549, 1549, 1549, 1549, 1549, 1551, 1551, 1551, 1551, 1548,
     3017, 3000, 1552, 1169, 3000, 1549, 1549, 1549, 1549, 1554,
     2832, 1550, 1555, 2832, 3018, 1550, 1549, 1549, 1549, 1549,
     3019, 1545, 1559, 1559, 1559, 1559, 3020, 3021, 3022, 1550,
     1561, 1561, 1561, 1561, 1560, 1568, 1568, 1568, 1568, 3023,
     1550, 1562, 1568, 1568, 1568, 1568, 1571, 1571, 1571, 1571,
     1606, 1606, 1606, 1606, 3024, 1563, 1606, 1606, 1606, 1606,
     1614, 1614, 1614, 1614, 1572, 3025, 1618, 1618, 1618, 1618,
     3026, 1615, 1618, 1618, 1618, 1618, 1620, 1620, 1620, 1620,
     1564, 1619, 3027, 3028, 1145, 1616, 1554, 1619, 1633, 1633,

     1633, 1633, 3031, 2833, 1637, 1638, 2833, 1639, 3035, 1640,
     3036, 1632, 1641, 1642, 2834, 3037, 1627, 3038, 3039, 3040,
     1617, 3041, 1643, 3042, 1644, 1648, 1648, 1648, 1648, 3043,
     3044, 3045, 1649, 1648, 1648, 1648, 1648, 3046, 3047, 3048,
     1649, 1653, 1653, 1653, 1653, 1659, 1659, 1659, 1659, 1616,
     3049, 3051, 1660, 1654, 3053, 3054, 1655, 1659, 1659, 1659,
     1659, 3057, 3058, 3060, 1660, 1663, 1663, 1663, 1663, 1671,
     1671, 1671, 1671, 3061, 3062, 1651, 1664, 1671, 1671, 1671,
     1671, 1705, 3063, 1651, 1673, 1673, 1673, 1673, 3064, 3069,
     3072, 1674, 3073, 1672, 3074, 1671, 1671, 1671, 1671, 1676,

     2963, 1672, 1677, 1671, 1671, 1671, 1671, 1714, 1706, 1707,
     1714, 1708, 3075, 1709, 3076, 2964, 1710, 1711, 3077, 1672,
     1715, 2209, 1794, 1705, 2209, 1716, 1712, 1672, 1713, 1706,
     1707, 3092, 1708, 1698, 1709, 3096, 3097, 1710, 1711, 1729,
     1729, 1729, 1729, 1096, 1096, 1096, 1096, 1712, 3100, 1713,
     3125, 2210, 1728, 1102, 1103, 1103, 1102, 1721, 3126, 3127,
     3132, 1097, 1103, 1103, 1103, 1103, 1114, 1114, 1114, 1114,
     1104, 3133, 2210, 1115, 3137, 3138, 1676, 1105, 3139, 1104,
     3140, 3141, 3142, 1104, 3143, 3145, 1105, 1107, 1107, 1107,
     1107, 3146, 3147, 3148, 1108, 3705, 3705, 3705, 3705, 3150,

     3151, 3152, 3705, 1733, 1733, 1733, 1733, 1110, 1110, 1110,
     1110, 3153, 3155, 2213, 1120, 3157, 2213, 3159, 1121, 1107,
     1107, 1107, 1107, 3160, 3158, 3161, 1108, 3158, 1123, 1124,
     2380, 1105, 1106, 1119, 1119, 1119, 1119, 3162, 1114, 1114,
     1114, 1114, 2380, 1839, 1120, 1115, 3000, 1117, 1121, 3000,
     1104, 1736, 1736, 1736, 1736, 1104, 2077, 1105, 1123, 1124,
     3705, 3705, 3705, 3705, 1839, 3163, 3164, 3705, 1104, 1738,
     1738, 1738, 1738, 3165, 3166, 3167, 1739, 3705, 1741, 1741,
     1741, 1741, 1111, 3168, 3169, 1112, 1119, 1119, 1119, 1119,
     1126, 1126, 1126, 1126, 3170, 3171, 2401, 1127, 1508, 3172,

     1509, 1121, 1105, 1104, 2401, 1119, 1119, 1119, 1119, 3023,
     1105, 1123, 1124, 3174, 3705, 3175, 1120, 3705, 3176, 1117,
     1121, 3705, 1104, 3177, 3178, 3705, 3705, 3705, 3705, 1105,
     1123, 1124, 3705, 2596, 3180, 1733, 1733, 1733, 1733, 3183,
     3184, 3705, 1129, 1130, 1130, 1129, 1120, 3185, 3186, 3187,
     1121, 1130, 1130, 1130, 1130, 1133, 1133, 1134, 1133, 1111,
     1123, 1124, 1133, 1133, 1134, 1133, 1131, 1136, 1136, 1136,
     1136, 3188, 3190, 3191, 1137, 1131, 3192, 3193, 3195, 1135,
     3705, 3705, 3705, 3705, 3196, 3197, 1135, 3705, 1743, 1743,
     1743, 1743, 3198, 1136, 1136, 1136, 1136, 3199, 3200, 1148,

     1137, 1147, 1147, 1147, 1147, 1142, 1142, 1142, 1142, 3204,
     3211, 3209, 1148, 1751, 1751, 1751, 1751, 1139, 3212, 3213,
     1140, 1106, 3217, 3218, 2681, 1131, 3210, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1256, 2183, 1131, 1148, 3231,
     3232, 3237, 1148, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1131, 3238, 3239, 1148, 1131, 3240, 3255, 1148, 1167,
     1167, 1167, 1167, 1175, 1176, 1176, 1175, 1131, 3235, 3256,
     1177, 1131, 1176, 1176, 1176, 1176, 3262, 3236, 3263, 1177,
     3266, 3267, 3268, 1168, 3705, 3705, 3705, 3705, 3272, 3274,
     2582, 3705, 3705, 3276, 1139, 1190, 1190, 1190, 1190, 3277,

     3705, 3279, 1754, 1190, 1190, 1190, 1190, 3705, 3705, 3705,
     3705, 3280, 1191, 3158, 3705, 1753, 3158, 2380, 3284, 1193,
     1191, 1190, 1190, 1190, 1190, 2380, 1179, 1193, 3285, 1765,
     1765, 1765, 1765, 3281, 3282, 1179, 1766, 3286, 1191, 3287,
     3288, 3289, 1180, 2401, 3293, 1193, 1779, 1779, 1779, 1779,
     2401, 3705, 1230, 1230, 1230, 1230, 3294, 3290, 3292, 1231,
     3290, 3292, 3295, 3705, 1248, 1248, 1248, 1248, 3291, 1764,
     1132, 1181, 1181, 1182, 1181, 1132, 1132, 1132, 1183, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 3705, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,

     1132, 1132, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1132, 1132, 1132, 1132, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1185, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     3296, 1132, 1132, 1184, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1188, 1188, 1188, 1188, 1190, 1190, 1190, 1190,
     3297, 1191, 3298, 3303, 3304, 1191, 3305, 3307, 1193, 3308,
     3309, 3069, 1193, 1190, 1190, 1190, 1190, 3310, 3312, 3313,
     1193, 3316, 1203, 1203, 1203, 1203, 1205, 1205, 1205, 1205,

     1191, 1785, 1785, 1785, 1785, 3319, 3320, 1193, 3321, 1194,
     1204, 3322, 3324, 3325, 1206, 3705, 3705, 3705, 3705, 3326,
     1764, 3328, 3705, 3338, 3339, 1210, 1817, 1817, 1817, 1817,
     1236, 1236, 1236, 1236, 1194, 3343, 1233, 3344, 3345, 1233,
     3346, 1189, 1784, 1785, 1785, 1784, 3367, 2019, 1209, 1816,
     2019, 2020, 1266, 3370, 1210, 1819, 1819, 1819, 1819, 1819,
     1230, 1230, 1230, 1230, 3371, 2020, 1210, 1231, 1325, 1325,
     1325, 1325, 1211, 1844, 1844, 1844, 1844, 2021, 1264, 1264,
     1264, 1264, 1794, 1326, 1845, 3369, 1212, 3372, 3375, 3376,
     1846, 3377, 1213, 1234, 1235, 2380, 1214, 1215, 2021, 1216,

     1217, 1218, 1210, 3382, 1266, 1219, 1220, 1221, 1222, 1223,
     3383, 1224, 3384, 1225, 1226, 1227, 1228, 1229, 1243, 1243,
     1243, 1243, 3385, 3378, 3379, 1244, 3378, 1245, 3386, 2401,
     3389, 1245, 3705, 3705, 3705, 3705, 3390, 3391, 3392, 3705,
     1836, 3705, 1246, 1836, 3393, 3705, 1823, 1823, 1823, 1823,
     1826, 1826, 1826, 1826, 3397, 1245, 3705, 1824, 1963, 1245,
     3398, 3400, 1827, 1828, 1832, 3403, 1832, 1832, 1833, 1832,
     1839, 1245, 2016, 3404, 1830, 2016, 1831, 1834, 3409, 1841,
     1841, 1841, 1841, 1237, 3410, 3705, 1238, 1844, 1844, 1844,
     1844, 1839, 2113, 3411, 1835, 3416, 1835, 3292, 1845, 1245,

     3292, 3417, 2018, 1210, 1846, 1844, 1844, 1844, 1844, 1844,
     1844, 1844, 1844, 3338, 3235, 1835, 1845, 1835, 3380, 3381,
     1845, 3380, 1846, 2018, 3423, 3424, 1846, 1844, 1844, 1844,
     1844, 1844, 1844, 1844, 1844, 3425, 3290, 3387, 1845, 3290,
     3387, 1786, 1845, 1855, 1846, 2161, 3444, 3291, 1846, 3388,
     3445, 3446, 1848, 1264, 1264, 1264, 1264, 3447, 3450, 3451,
     1237, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 2077,
     3452, 1849, 1850, 1859, 1859, 1859, 1859, 1210, 1851, 1266,
     1264, 1264, 1264, 1264, 2077, 1210, 3453, 1266, 3454, 1210,
     1854, 1266, 1264, 1264, 1264, 1264, 3448, 3449, 1852, 3448,

     3449, 1853, 3378, 3379, 1210, 3378, 1266, 1856, 1857, 3023,
     3455, 1858, 1264, 1264, 1264, 1264, 1210, 3023, 1266, 1264,
     1264, 1264, 1264, 3459, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1860, 3058, 3380, 3381, 1210, 3380, 1266, 1264,
     1264, 1264, 1264, 1210, 3462, 1266, 3463, 3464, 1210, 1861,
     1266, 3467, 1210, 3468, 1266, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1210, 1862, 1266, 3469, 1863, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1864, 3470, 3473, 1210,
     3474, 1266, 3473, 1210, 1866, 1266, 1865, 1264, 1264, 1264,
     1264, 3475, 1210, 3476, 1266, 3490, 1210, 3491, 1266, 3145,

     1867, 1868, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     2077, 1210, 3496, 1266, 1264, 1264, 1264, 1264, 1870, 1264,
     1264, 1264, 1264, 2077, 3387, 1871, 1210, 3387, 1266, 1869,
     1210, 3023, 1266, 3497, 3023, 1874, 3388, 1872, 1210, 3448,
     1266, 1873, 3448, 1210, 3500, 1266, 3492, 1264, 1264, 1264,
     1264, 3501, 3502, 3503, 1875, 1264, 1264, 1264, 1264, 1876,
     1264, 1264, 1264, 1264, 1880, 1877, 3504, 1878, 3505, 3449,
     1881, 1210, 3449, 1266, 3506, 1879, 3494, 3473, 3511, 1210,
     2019, 1266, 1832, 2019, 1210, 1832, 1266, 1264, 1264, 1264,
     1264, 3512, 1882, 1264, 1264, 1264, 1264, 1264, 1264, 1264,

     1264, 1264, 1264, 1264, 1264, 1883, 1264, 1264, 1264, 1264,
     2021, 1210, 1835, 1266, 3521, 3705, 2077, 1210, 3705, 1266,
     3023, 1210, 3705, 1266, 3526, 1210, 1885, 1266, 1884, 3328,
     1210, 2021, 1266, 1835, 1264, 1264, 1264, 1264, 3527, 1264,
     1264, 1264, 1264, 3530, 1264, 1264, 1264, 1264, 3531, 1888,
     1886, 1306, 1306, 1306, 1306, 1887, 3470, 1889, 1210, 3533,
     1266, 1892, 1891, 1210, 3534, 1266, 3538, 1890, 1210, 3541,
     1266, 1264, 1264, 1264, 1264, 1307, 3503, 1893, 1264, 1264,
     1264, 1264, 3542, 3543, 3545, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 3546, 3550, 1210, 3705, 1266, 3553, 3705,

     1894, 3554, 1210, 3705, 1266, 3560, 3562, 1896, 1895, 1210,
     3543, 1266, 3574, 1210, 3577, 1266, 1308, 1308, 1308, 1308,
     3580, 1092, 1152, 1309, 3705, 3705, 3705, 3705, 2627, 1092,
     1152, 3705, 2626, 2625, 1897, 1903, 1903, 1903, 1903, 1308,
     1308, 1308, 1308, 1898, 2624, 1156, 1309, 1315, 1315, 1315,
     1315, 2623, 2209, 1156, 1900, 2209, 1899, 1315, 1315, 1315,
     1315, 1317, 1905, 1905, 1905, 1905, 1311, 2215, 2380, 1312,
     2215, 1307, 2621, 1317, 1315, 1315, 1315, 1315, 2277, 2620,
     2216, 1307, 2210, 1317, 1164, 2063, 1307, 1318, 1096, 1096,
     1318, 1832, 1164, 1319, 1832, 1906, 2617, 2217, 1307, 2055,

     1317, 2051, 2047, 2210, 1907, 1097, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1341, 1341, 1341, 1341, 2217, 2043,
     2607, 1835, 1341, 1341, 1341, 1341, 1924, 1924, 1924, 1924,
     2034, 2604, 1171, 1342, 2013, 2601, 1353, 1353, 1353, 1353,
     1171, 1342, 1835, 1311, 1328, 1328, 1328, 1328, 1354, 1934,
     1934, 1934, 1934, 1357, 1358, 1358, 1357, 2600, 1173, 1359,
     1935, 1358, 1358, 1358, 1358, 1361, 1173, 2213, 1361, 2599,
     2213, 1329, 2598, 2595, 2594, 1936, 1941, 1941, 1941, 1941,
     1942, 1943, 1944, 1942, 1937, 1937, 1937, 1937, 1937, 1367,
     1367, 1367, 1367, 1948, 1948, 1948, 1948, 1839, 2593, 1330,

     1949, 1331, 2590, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1332, 1333, 2589, 1155, 1334, 1335, 1336, 1839, 1337,
     1371, 1155, 1186, 2588, 1371, 2587, 2586, 1373, 2585, 1155,
     1186, 1373, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1375, 1375, 1375, 1375, 1377, 1377, 1377, 1377, 1165, 1371,
     1321, 1378, 2582, 1371, 1172, 1165, 1373, 2581, 1321, 2580,
     1373, 1172, 1946, 1165, 1376, 3705, 3705, 3705, 3705, 1172,
     1338, 1369, 3705, 1377, 1377, 1377, 1377, 2579, 1338, 1369,
     1378, 1375, 1375, 1375, 1375, 1953, 1953, 1953, 1953, 1380,
     2578, 1174, 1381, 1375, 1375, 1375, 1375, 2577, 1174, 1432,

     1387, 1324, 1951, 1387, 1955, 1376, 1174, 1432, 1324, 1376,
     1957, 1957, 1957, 1957, 2572, 1939, 1324, 1376, 2299, 1819,
     1819, 1819, 1819, 1819, 1393, 1393, 1393, 1393, 1401, 1401,
     1401, 1401, 1425, 1425, 1425, 1425, 1436, 1436, 1436, 1436,
     2566, 2213, 1394, 2565, 2213, 2564, 1402, 1440, 1440, 1440,
     1440, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 2563,
     1973, 1973, 1973, 1973, 2562, 2561, 1380, 1974, 1452, 2560,
     2559, 1839, 1452, 1975, 1451, 1451, 1451, 1451, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1447, 1452, 1839, 1437, 1977, 1977, 1977, 1977, 1447, 2558,

     2557, 1978, 1458, 1458, 1458, 1458, 1985, 1985, 1985, 1985,
     1482, 1482, 1482, 1482, 1490, 1490, 1490, 1490, 2556, 1343,
     1433, 1986, 1488, 1488, 1488, 1488, 1343, 1433, 1450, 1457,
     2555, 2554, 2553, 1457, 1343, 1433, 1450, 1457, 1492, 1489,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 2015, 2015,
     2015, 2015, 2016, 2552, 2551, 2016, 2017, 1459, 2490, 1531,
     1531, 1531, 1531, 2489, 2487, 2017, 1532, 1454, 1492, 3705,
     3705, 3705, 3705, 1460, 2207, 1454, 3705, 1534, 1534, 1534,
     1534, 1460, 2018, 1534, 1534, 1534, 1534, 2483, 2476, 1991,
     1535, 1534, 1534, 1534, 1534, 1461, 1535, 2475, 1539, 1539,

     1539, 1539, 1461, 2018, 1535, 1540, 1196, 1541, 1252, 1469,
     1461, 1541, 3705, 3705, 3705, 3705, 2474, 1469, 2472, 3705,
     2471, 3705, 1196, 1472, 1252, 3705, 1539, 1539, 1539, 1539,
     1196, 1472, 1252, 1540, 2470, 1541, 2469, 2468, 2467, 1541,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1546, 1546, 1546, 1546, 2466, 2024, 2024, 2024,
     2024, 1258, 2465, 1547, 2025, 1549, 1549, 1549, 1549, 2464,
     2026, 1551, 1551, 1551, 1551, 1480, 1548, 1258, 1552, 3705,
     3705, 3705, 3705, 1480, 1487, 1258, 3705, 2463, 1475, 1550,
     1545, 2460, 1487, 2459, 1545, 1475, 1506, 1512, 1545, 1551,

     1551, 1551, 1551, 1475, 1506, 1512, 1552, 1549, 1549, 1549,
     1549, 2030, 2030, 2030, 2030, 1554, 2458, 2457, 1555, 1549,
     1549, 1549, 1549, 2456, 1559, 1559, 1559, 1559, 2455, 2454,
     2453, 1550, 2452, 1518, 1520, 1550, 1560, 2031, 2031, 2031,
     2031, 1518, 1520, 1550, 1561, 1561, 1561, 1561, 2032, 1568,
     1568, 1568, 1568, 2451, 2450, 1562, 2036, 2036, 2036, 2036,
     1571, 1571, 1571, 1571, 2045, 2045, 2045, 2045, 2449, 1563,
     2049, 2049, 2049, 2049, 2053, 2053, 2053, 2053, 1572, 2057,
     2057, 2057, 2057, 1603, 1483, 1576, 1603, 1606, 1606, 1606,
     1606, 1483, 1554, 1576, 1564, 2065, 2065, 2065, 2065, 1483,

     2448, 2447, 2058, 2058, 2058, 2058, 2058, 1614, 1614, 1614,
     1614, 1618, 1618, 1618, 1618, 2446, 1513, 1578, 1615, 1620,
     1620, 1620, 1620, 1513, 2445, 1578, 1619, 1620, 1620, 1620,
     1620, 1513, 1616, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1648, 1648, 1648, 1648, 1610, 1632, 1652, 1649, 3705,
     3705, 3705, 3705, 1610, 2444, 1652, 3705, 1617, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1654, 1662, 1735, 1655, 1654, 2443, 2442, 1655, 1654, 1662,
     1735, 1655, 2080, 2080, 2080, 2080, 1616, 2081, 2081, 2081,
     2081, 1651, 1653, 1653, 1653, 1653, 1156, 2441, 1519, 3705,

     2082, 2082, 2082, 2082, 1654, 1519, 1745, 1655, 1659, 1659,
     1659, 1659, 1156, 1519, 1745, 1660, 3705, 3705, 3705, 3705,
     1156, 2440, 2439, 3705, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 2438, 2437, 2434, 1664, 2433, 2432, 2429, 1664,
     1663, 1663, 1663, 1663, 1671, 1671, 1671, 1671, 2428, 1521,
     1577, 1664, 1673, 1673, 1673, 1673, 1521, 1577, 1239, 1674,
     3705, 3705, 3705, 3705, 1521, 1577, 1239, 3705, 1672, 1673,
     1673, 1673, 1673, 1777, 2425, 2424, 1674, 1671, 1671, 1671,
     1671, 2088, 2088, 2088, 2088, 1676, 2423, 1760, 1677, 1671,
     1671, 1671, 1671, 1729, 1729, 1729, 1729, 1729, 1729, 1729,

     1729, 1672, 2422, 1760, 1252, 1672, 1728, 1733, 1733, 1733,
     1733, 1760, 1252, 1672, 1733, 1733, 1733, 1733, 1859, 1859,
     1859, 1859, 1121, 1579, 1579, 1120, 1191, 2419, 1157, 1121,
     1579, 2128, 1123, 1124, 2114, 2114, 2114, 2114, 1579, 1123,
     1124, 1738, 1738, 1738, 1738, 1120, 2410, 2409, 1739, 1121,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1105, 1123,
     1124, 1258, 1676, 3705, 3705, 3705, 3705, 1104, 1769, 1258,
     3705, 1104, 1741, 1741, 1741, 1741, 1111, 1860, 1613, 1112,
     1733, 1733, 1733, 1733, 1769, 1613, 1743, 1743, 1743, 1743,
     2106, 1120, 1769, 1613, 1313, 1121, 1105, 1148, 1743, 1743,

     1743, 1743, 1313, 2406, 1196, 1123, 1124, 2405, 2404, 1148,
     1147, 1147, 1147, 1147, 2403, 1751, 1751, 1751, 1751, 1139,
     1196, 1148, 1140, 2402, 1147, 1147, 1147, 1147, 1196, 1382,
     1147, 1147, 1147, 1147, 1131, 1148, 2401, 1382, 2400, 1131,
     2396, 1148, 2130, 2130, 2130, 2130, 2131, 1972, 1131, 2132,
     2393, 2392, 2391, 1111, 1131, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1972, 2390, 2389, 2133, 1765, 1765, 1765,
     1765, 1972, 1191, 1155, 1766, 1165, 1191, 2085, 2388, 1193,
     1155, 1556, 1165, 1193, 3705, 3705, 3705, 3705, 1155, 1556,
     1165, 3705, 2386, 2385, 2384, 2124, 1139, 2123, 1190, 1190,

     1190, 1190, 2138, 2138, 2138, 2138, 2144, 2383, 2382, 1766,
     2149, 2149, 2149, 2149, 2381, 2145, 2145, 2145, 2145, 2380,
     2379, 2378, 1193, 2131, 1817, 1817, 1817, 1817, 2135, 2148,
     2149, 2149, 2148, 2377, 1210, 1209, 1841, 1841, 1841, 1841,
     1237, 1172, 1174, 1238, 1817, 1817, 1817, 1817, 1172, 1174,
     1266, 2063, 2063, 1210, 2373, 2189, 1172, 1174, 2189, 1211,
     1210, 2196, 2196, 2196, 2196, 1840, 2372, 2055, 2197, 2055,
     1266, 2051, 1840, 1212, 1819, 1819, 1819, 1819, 1819, 1213,
     1840, 2051, 1771, 1214, 1215, 1246, 1216, 1217, 1218, 1771,
     2047, 1771, 1219, 1220, 1221, 1222, 1223, 1771, 1224, 2047,

     1225, 1226, 1227, 1228, 1229, 1823, 1823, 1823, 1823, 1924,
     1924, 1924, 1924, 2043, 1245, 1669, 1824, 1237, 1245, 2192,
     2192, 2192, 2192, 1669, 2043, 2358, 2193, 2356, 1245, 2034,
     2034, 1545, 1245, 1826, 1826, 1826, 1826, 2199, 2199, 2199,
     2199, 2023, 2218, 2194, 2212, 1827, 1828, 1678, 2200, 2201,
     2201, 2201, 2201, 2013, 2013, 1678, 2202, 1830, 1245, 2344,
     2343, 2203, 1826, 1826, 1826, 1826, 1841, 1841, 1841, 1841,
     1237, 2342, 1245, 1238, 1827, 1828, 1844, 1844, 1844, 1844,
     1844, 1844, 1844, 1844, 1156, 2341, 1830, 1845, 1831, 2340,
     1210, 1845, 1156, 1844, 1844, 1844, 1844, 1846, 1844, 1844,

     1844, 1844, 1508, 2004, 1845, 1844, 1844, 1844, 1844, 1845,
     1846, 2290, 2290, 2290, 2290, 1846, 1845, 1844, 1844, 1844,
     1844, 2337, 1846, 2336, 1844, 1844, 1844, 1844, 1845, 1844,
     1844, 1844, 1844, 2335, 1846, 1845, 1264, 1264, 1264, 1264,
     1845, 1846, 1844, 1844, 1844, 1844, 1846, 1237, 2223, 1264,
     1264, 1264, 1264, 1845, 2334, 1264, 1264, 1264, 1264, 1846,
     1210, 2333, 1266, 1903, 1903, 1903, 1903, 2224, 2231, 1942,
     1943, 1944, 1942, 1210, 1760, 1266, 1324, 2332, 2225, 1210,
     1769, 1266, 1760, 1324, 2331, 2229, 2330, 2227, 1769, 1317,
     2226, 1324, 2228, 2233, 2232, 1264, 1264, 1264, 1264, 1264,

     1264, 1264, 1264, 1264, 1264, 1264, 1264, 2329, 1264, 1264,
     1264, 1264, 2230, 1264, 1264, 1264, 1264, 2328, 1972, 1210,
     2097, 1266, 2222, 1210, 2327, 1266, 1972, 1210, 2097, 1266,
     2222, 2113, 1210, 2277, 1266, 2113, 2325, 1210, 2324, 1266,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 2320, 2319,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 2318, 1506, 1210, 2317, 1266, 2316, 1210, 2234,
     1266, 1506, 2235, 2237, 1210, 2236, 1266, 2315, 1210, 1964,
     1266, 2314, 1210, 1960, 1266, 2238, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1955, 1264, 1264, 1264, 1264, 2295,

     2295, 2295, 2295, 2239, 1264, 1264, 1264, 1264, 1955, 1578,
     1210, 2305, 1266, 2240, 1210, 2304, 1266, 1578, 2241, 1210,
     2242, 1266, 1939, 2296, 1939, 2243, 2299, 2297, 1210, 2294,
     1266, 2293, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 2292, 2244, 1264, 1264, 1264, 1264,
     1944, 1943, 1944, 1944, 2246, 2245, 1210, 2134, 1266, 3430,
     1210, 2291, 1266, 2247, 1210, 2134, 1266, 3430, 2289, 2288,
     1210, 2216, 1266, 1264, 1264, 1264, 1264, 2287, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     2286, 2248, 1264, 1264, 1264, 1264, 1343, 1210, 2285, 1266,

     1952, 2249, 1210, 1343, 1266, 2284, 1210, 1952, 1266, 2251,
     1210, 1343, 1266, 2250, 2213, 1952, 1210, 2213, 1266, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1433, 1264, 1264,
     1264, 1264, 2252, 2283, 1433, 2253, 1264, 1264, 1264, 1264,
     2113, 2282, 1433, 1210, 1839, 1266, 2281, 1210, 2255, 1266,
     2280, 2279, 1210, 2254, 1266, 1264, 1264, 1264, 1264, 2276,
     1210, 2275, 1266, 1797, 2221, 1839, 2256, 1264, 1264, 1264,
     2263, 2220, 2219, 1461, 2257, 1264, 1264, 1264, 1264, 1210,
     1461, 1266, 2258, 2207, 1264, 1264, 1264, 1264, 1461, 2205,
     2191, 1210, 2190, 1266, 2188, 1264, 1264, 1264, 1264, 1210,

     2187, 1266, 2186, 2259, 2185, 2260, 2184, 2181, 1210, 2261,
     1266, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1210,
     2262, 1266, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 2180, 1210, 2179, 1266, 2176, 1210,
     1475, 1266, 2323, 2323, 2323, 2323, 1210, 1475, 1266, 2264,
     1210, 2265, 1266, 2175, 1210, 1475, 1266, 1903, 1903, 1903,
     1903, 2174, 1264, 1264, 1264, 1264, 2173, 2172, 2266, 1264,
     1264, 1264, 1264, 2171, 1264, 1264, 1264, 1264, 2164, 2163,
     2302, 2269, 2162, 1317, 2268, 2267, 1210, 2159, 1266, 2303,
     2303, 2303, 2303, 1210, 2270, 1266, 2215, 2271, 1210, 2215,

     1266, 1905, 1905, 1905, 1905, 1311, 2158, 2157, 1312, 2216,
     2156, 2097, 1934, 1934, 1934, 1934, 2222, 1948, 1948, 1948,
     1948, 2155, 2278, 1935, 1949, 1307, 2217, 2097, 2152, 2274,
     2300, 1777, 2222, 2300, 1777, 2097, 2272, 2142, 1936, 2141,
     2222, 2140, 2273, 2306, 2306, 2306, 2306, 2217, 2139, 1937,
     1937, 1937, 1937, 1937, 3705, 3705, 3705, 3705, 1194, 1483,
     1371, 3705, 1370, 1370, 1370, 1370, 1483, 1373, 1953, 1953,
     1953, 1953, 1380, 1191, 1483, 1381, 1513, 2128, 2310, 1371,
     2125, 2122, 1311, 1513, 2121, 2113, 1373, 2311, 2311, 2311,
     2311, 1513, 1376, 1973, 1973, 1973, 1973, 2111, 1519, 2107,

     1974, 3705, 3705, 3705, 3705, 1519, 1975, 1506, 3705, 1451,
     1451, 1451, 1451, 1519, 3705, 1977, 1977, 1977, 1977, 2106,
     2105, 2308, 1978, 1506, 2104, 2103, 1452, 3705, 3705, 3705,
     3705, 1506, 2102, 2101, 3705, 1985, 1985, 1985, 1985, 2326,
     2326, 2326, 2326, 2346, 2016, 2019, 2099, 2016, 2019, 1380,
     1986, 2098, 2347, 2347, 2347, 2347, 2024, 2024, 2024, 2024,
     2096, 2095, 1704, 2025, 1691, 3705, 3705, 3705, 3705, 2026,
     2113, 2113, 3705, 1691, 2018, 2021, 2093, 1691, 3705, 2348,
     2348, 2348, 2348, 2349, 2349, 2349, 2349, 2030, 2030, 2030,
     2030, 1554, 2026, 2353, 1555, 2018, 2021, 2031, 2031, 2031,

     2031, 2092, 2354, 2354, 2354, 2354, 2360, 2351, 2032, 2371,
     2363, 1550, 2371, 2091, 2366, 2361, 2361, 2361, 2361, 2364,
     2364, 2364, 2364, 2367, 2367, 2367, 2367, 2369, 2058, 2058,
     2058, 2058, 2058, 2375, 2090, 1689, 2370, 2370, 2370, 2370,
     1687, 1679, 2376, 2376, 2376, 2376, 1653, 1653, 1653, 1653,
     2080, 2080, 2080, 2080, 2081, 2081, 2081, 2081, 1654, 2086,
     2085, 1655, 2082, 2082, 2082, 2082, 1658, 1658, 1554, 2082,
     2082, 2082, 2082, 2088, 2088, 2088, 2088, 1676, 2078, 2076,
     1677, 2114, 2114, 2114, 2114, 1578, 2075, 2114, 2114, 2114,
     2114, 2074, 1147, 1147, 1147, 1147, 1121, 1672, 1120, 2073,

     2072, 1578, 1121, 1148, 2071, 1105, 1123, 1124, 1521, 1578,
     2069, 1105, 1123, 1124, 2068, 1521, 1131, 2414, 2414, 2414,
     2414, 3149, 3154, 1521, 2415, 2417, 2417, 2417, 2417, 1190,
     1190, 1190, 1190, 2138, 2138, 2138, 2138, 3149, 3154, 2067,
     1766, 2196, 2196, 2196, 2196, 3149, 3154, 2066, 2197, 2133,
     2063, 2061, 2055, 1193, 1676, 2397, 2397, 2397, 2397, 2397,
     2397, 2397, 2397, 2397, 2397, 2397, 2397, 2397, 2397, 2397,
     2397, 2397, 2397, 2397, 2397, 2398, 2398, 2398, 2398, 2398,
     2397, 2397, 2397, 2397, 2397, 2397, 2397, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,

     2398, 2398, 2398, 2398, 2398, 2398, 2397, 2397, 2397, 2397,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2397, 2397, 2397, 2399, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 2051, 2047, 2043,
     1148, 2041, 1580, 1580, 1148, 2130, 2130, 2130, 2130, 2131,
     2034, 1566, 2132, 1131, 1557, 2028, 2023, 1131, 2417, 2417,
     2417, 2417, 2131, 2013, 2011, 2418, 1777, 2010, 2007, 2133,
     1190, 1190, 1190, 1190, 2004, 2427, 2427, 2427, 2427, 2002,
     2001, 2000, 2133, 2431, 2431, 2431, 2431, 1191, 2199, 2199,

     2199, 2199, 2412, 1999, 1193, 2192, 2192, 2192, 2192, 2200,
     2411, 1996, 2193, 1995, 1245, 1994, 2029, 1210, 1245, 3705,
     3705, 3705, 3705, 2029, 1993, 1992, 3705, 1577, 3705, 2194,
     1468, 2029, 3705, 1984, 1577, 1983, 2131, 2477, 2477, 2477,
     2477, 1982, 1577, 3705, 1981, 2421, 1980, 1579, 1579, 2131,
     2430, 2431, 2431, 2430, 1579, 1979, 1209, 1971, 1245, 1970,
     1969, 2479, 1579, 2480, 3705, 3705, 3705, 3705, 1968, 1967,
     1438, 3705, 3705, 1966, 1210, 2481, 2481, 2481, 2481, 1965,
     1211, 2201, 2201, 2201, 2201, 1416, 1964, 1827, 2202, 2290,
     2290, 2290, 2290, 2203, 1212, 1844, 1844, 1844, 1844, 1830,

     1213, 1831, 1408, 1613, 1214, 1215, 1845, 1216, 1217, 1218,
     1613, 1408, 1846, 1219, 1220, 1221, 1222, 1223, 1613, 1224,
     1960, 1225, 1226, 1227, 1228, 1229, 3705, 3705, 3705, 3705,
     2202, 1955, 1383, 3705, 1371, 2203, 1947, 1939, 3705, 1933,
     1932, 1931, 2484, 2484, 2484, 2484, 2484, 2192, 2192, 2192,
     2192, 1930, 1929, 1928, 2197, 1927, 1245, 1926, 1925, 1918,
     1245, 2481, 2481, 2481, 2481, 1844, 1844, 1844, 1844, 1915,
     1914, 2194, 1913, 1827, 2084, 2084, 1845, 1844, 1844, 1844,
     1844, 2084, 1846, 1912, 1911, 1830, 1910, 1314, 1845, 2084,
     1844, 1844, 1844, 1844, 1846, 1844, 1844, 1844, 1844, 1902,

     1245, 1845, 1844, 1844, 1844, 1844, 1845, 1846, 2290, 2290,
     2290, 2290, 1846, 1845, 1844, 1844, 1844, 1844, 1901, 1846,
     1269, 1844, 1844, 1844, 1844, 1845, 1855, 1264, 1264, 1264,
     1264, 1846, 1845, 1844, 1844, 1844, 1844, 2492, 1846, 1843,
     1842, 1825, 2493, 1821, 1845, 1264, 1264, 1264, 1264, 2494,
     1846, 1210, 1820, 1266, 1264, 1264, 1264, 1264, 2495, 1264,
     1264, 1264, 1264, 1813, 1812, 1809, 2500, 1806, 1802, 1210,
     1801, 1266, 1800, 1264, 1264, 1264, 1264, 2496, 1210, 1796,
     1266, 1793, 2502, 1210, 1792, 1266, 2498, 2497, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 2501, 1210, 2087, 1266,

     1264, 1264, 1264, 1264, 1269, 2087, 1791, 2499, 1264, 1264,
     1264, 1264, 1210, 2087, 1266, 2503, 1210, 1786, 1266, 1264,
     1264, 1264, 1264, 1777, 1210, 1775, 1266, 2515, 2515, 2515,
     2515, 1774, 1210, 1194, 1266, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1210, 2504, 1266, 3705, 2506, 1195, 1770,
     1768, 1210, 1762, 1266, 1264, 1264, 1264, 1264, 1163, 1210,
     2505, 1266, 1759, 1210, 2116, 1266, 2295, 2295, 2295, 2295,
     1758, 2116, 1757, 2507, 1752, 2508, 1145, 1145, 1210, 2116,
     1266, 1118, 2509, 2510, 2511, 2511, 2511, 2511, 2510, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,

     2510, 2510, 2510, 1100, 2518, 1724, 2516, 2524, 2512, 1721,
     2513, 2510, 2510, 2510, 2510, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 2517, 1264, 1264,
     1264, 1264, 1691, 2127, 2510, 2510, 2510, 2510, 2127, 1210,
     2127, 1266, 1691, 1210, 1691, 1266, 1691, 1210, 2127, 1266,
     1689, 1688, 1210, 1687, 1266, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 2510, 2510, 2510, 2514, 1264, 1264, 1264,
     1264, 1679, 1264, 1264, 1264, 1264, 1670, 1840, 2519, 1210,
     1658, 1266, 1647, 1210, 1840, 1266, 1264, 1264, 1264, 1264,
     2520, 1210, 1840, 1266, 2522, 2521, 1210, 1627, 1266, 1264,

     1264, 1264, 1264, 1612, 1264, 1264, 1264, 1264, 1609, 1608,
     1210, 1607, 1266, 1264, 1264, 1264, 1264, 1602, 1264, 1264,
     1264, 1264, 1599, 1210, 1596, 1266, 2525, 1591, 1210, 2523,
     1266, 1264, 1264, 1264, 1264, 1585, 1581, 1210, 2526, 1266,
     2527, 2528, 1210, 1580, 1266, 1575, 1264, 1264, 1264, 1264,
     1570, 1264, 1264, 1264, 1264, 1210, 1566, 1266, 1264, 1264,
     1264, 1264, 1557, 1264, 1264, 1264, 1264, 2529, 1166, 2530,
     1210, 1530, 1266, 1529, 2531, 1210, 1528, 1266, 1264, 1264,
     1264, 1264, 1210, 1527, 1266, 2532, 2533, 1210, 1524, 1266,
     1264, 1264, 1264, 1264, 2295, 2295, 2295, 2295, 1264, 1264,

     1264, 1264, 1210, 1523, 1266, 2534, 1264, 1264, 1264, 1264,
     2535, 1517, 1516, 1515, 1210, 1514, 1266, 1504, 2296, 1501,
     2537, 2536, 1210, 1500, 1266, 1264, 1264, 1264, 1264, 1499,
     1210, 2137, 1266, 2137, 1498, 2538, 1264, 1264, 1264, 1264,
     2137, 2539, 1497, 1477, 1468, 2540, 1466, 1463, 2137, 1210,
     1462, 1266, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1210, 2541, 1266, 2542, 1441, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1438, 1435, 1434, 1210, 1416, 1266, 1408,
     1210, 1343, 1266, 1264, 1264, 1264, 1264, 1403, 1343, 1210,
     2543, 1266, 1392, 1210, 2544, 1266, 1343, 2567, 2567, 2567,

     2567, 1939, 1389, 2545, 1383, 1366, 1363, 1210, 2568, 1266,
     2571, 2571, 2571, 2571, 1355, 1352, 1349, 2547, 1348, 2546,
     2306, 2306, 2306, 2306, 2548, 2306, 2306, 2306, 2306, 1370,
     1370, 1370, 1370, 1451, 1451, 1451, 1451, 1371, 2323, 2323,
     2323, 2323, 1371, 2549, 1373, 1347, 1371, 1346, 1955, 1373,
     1452, 1345, 1344, 1373, 1314, 1269, 2550, 2576, 2576, 2576,
     2576, 2326, 2326, 2326, 2326, 2013, 2348, 2348, 2348, 2348,
     2349, 2349, 2349, 2349, 2603, 2603, 2603, 2603, 2034, 2026,
     2349, 2349, 2349, 2349, 1256, 1952, 2043, 2606, 2606, 2606,
     2606, 1253, 1952, 1251, 2351, 2609, 2609, 2609, 2609, 2047,

     1952, 2574, 1202, 2051, 2351, 1200, 1195, 2055, 2611, 2611,
     2611, 2611, 2613, 2613, 2613, 2613, 2615, 2615, 2615, 2615,
     2063, 2414, 2414, 2414, 2414, 1187, 1166, 1163, 2415, 2619,
     2619, 2619, 2619, 2628, 2629, 1146, 1145, 1118, 2630, 3705,
     3705, 2631, 2632, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 2633, 3705, 2634, 2397, 2397, 2397, 2397, 2397, 2397,
     2397, 2397, 2397, 2397, 2397, 2397, 2397, 2397, 2397, 2397,
     2397, 2397, 2397, 2397, 2398, 2398, 2398, 2398, 2398, 2397,
     2397, 2397, 2397, 2397, 2397, 2397, 2398, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,

     2398, 2398, 2398, 2398, 2398, 2397, 2397, 2397, 2397, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2397, 2397, 2397, 2399, 2651, 2652,
     3705, 3705, 3705, 2653, 3705, 3705, 2654, 2655, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 2656, 3705, 2657, 1148,
     3705, 3705, 3705, 1148, 2417, 2417, 2417, 2417, 2417, 2417,
     2417, 2417, 1131, 3705, 3705, 1433, 1131, 2661, 2661, 2661,
     2661, 2131, 1433, 3705, 2418, 3705, 3705, 3705, 2133, 3705,
     1433, 3705, 2133, 1771, 1190, 1190, 1190, 1190, 3705, 3705,

     1771, 2133, 1771, 2658, 2668, 2668, 2668, 2668, 1771, 2029,
     2659, 1191, 2683, 2683, 2683, 2683, 2029, 3705, 1193, 2712,
     2712, 2712, 2712, 3705, 2029, 3705, 2193, 3705, 1210, 3705,
     2477, 2477, 2477, 2477, 2786, 2786, 2786, 2786, 3705, 2481,
     2481, 2481, 2481, 2194, 2477, 2477, 2477, 2477, 3705, 3705,
     3705, 1827, 3705, 2662, 2479, 3705, 3705, 3705, 2131, 2667,
     2668, 2668, 2667, 1830, 2202, 1209, 3705, 3705, 2479, 2203,
     2480, 3705, 2481, 2481, 2481, 2481, 2484, 2484, 2484, 2484,
     2484, 3705, 3705, 1210, 1827, 2796, 2796, 2796, 2796, 1211,
     3705, 2516, 2202, 3705, 3705, 3705, 1830, 2203, 1831, 2790,

     2790, 2790, 2790, 1212, 2484, 2484, 2484, 2484, 2484, 1213,
     2791, 3705, 2087, 1214, 1215, 3705, 1216, 1217, 1218, 2087,
     3705, 3705, 1219, 1220, 1221, 1222, 1223, 2087, 1224, 3705,
     1225, 1226, 1227, 1228, 1229, 1844, 1844, 1844, 1844, 1844,
     1844, 1844, 1844, 2996, 3705, 3493, 1845, 3495, 3705, 2996,
     1845, 3493, 1846, 3495, 3705, 3705, 1846, 1844, 1844, 1844,
     1844, 1844, 1844, 1844, 1844, 2996, 3705, 3493, 1845, 3495,
     3705, 2792, 1845, 2996, 1846, 3493, 3705, 3495, 1846, 1844,
     1844, 1844, 1844, 1844, 1844, 1844, 1844, 3705, 3705, 3705,
     1845, 2084, 2084, 3705, 1845, 3705, 1846, 3705, 2084, 3705,

     1846, 1844, 1844, 1844, 1844, 3705, 2084, 1264, 1264, 1264,
     1264, 2718, 1845, 3705, 3705, 3705, 2719, 3705, 1846, 1844,
     1844, 1844, 1844, 1844, 1844, 1844, 1844, 3705, 3705, 3705,
     1845, 1210, 2720, 1266, 1845, 3705, 1846, 3705, 2722, 3705,
     1846, 3705, 2727, 2858, 2858, 2858, 2858, 2721, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 2567, 2567, 2567, 2567,
     2723, 1264, 1264, 1264, 1264, 3705, 2116, 2568, 3705, 2724,
     3705, 3705, 1210, 2116, 1266, 2137, 1210, 2137, 1266, 3705,
     3705, 2116, 2725, 3705, 2137, 1210, 2726, 1266, 3705, 3705,
     3705, 2728, 2137, 2729, 1264, 1264, 1264, 1264, 2732, 2732,

     2732, 2732, 3705, 1264, 1264, 1264, 1264, 2735, 2735, 2735,
     2735, 1264, 1264, 1264, 1264, 3705, 3705, 3705, 1210, 3705,
     1266, 1343, 1210, 3705, 1266, 3705, 2730, 1210, 1343, 1266,
     3705, 1210, 3705, 1266, 3705, 1210, 1343, 1266, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 3705, 3705, 3705, 2731,
     1264, 1264, 1264, 1264, 2515, 2515, 2515, 2515, 2740, 2740,
     2740, 2740, 1210, 3705, 1266, 3705, 1210, 3705, 1266, 3705,
     2736, 3705, 3705, 3705, 1210, 2734, 1266, 2733, 1210, 3705,
     1266, 3705, 1210, 3705, 1266, 3705, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,

     1264, 1264, 3705, 3705, 3705, 2737, 1264, 1264, 1264, 1264,
     1210, 2738, 1266, 3705, 1210, 3705, 1266, 3705, 1210, 3705,
     1266, 3705, 1210, 3705, 1266, 3705, 2739, 3705, 3705, 3705,
     1210, 3705, 1266, 3705, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 3705, 2742, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 2744, 3705, 1210, 2741,
     1266, 2743, 1210, 3705, 1266, 3705, 1210, 3705, 1266, 2745,
     3705, 3705, 1210, 3705, 1266, 3705, 1210, 3705, 1266, 3705,
     1264, 1264, 1264, 1264, 3705, 1264, 1264, 1264, 1264, 3705,
     3705, 3705, 2746, 1264, 1264, 1264, 1264, 3705, 3705, 3705,

     3705, 2748, 3705, 3705, 1210, 2747, 1266, 3705, 2749, 1210,
     3705, 1266, 3705, 2127, 3705, 2750, 3705, 1210, 2127, 1266,
     2127, 2751, 1264, 1264, 1264, 1264, 3705, 3705, 2127, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 3705, 3705, 2753, 3705, 3705, 1210, 1433, 1266, 3705,
     3705, 2752, 2754, 1210, 1433, 1266, 3705, 1210, 3705, 1266,
     2797, 1210, 1433, 1266, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 3705, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 3705, 3705, 2755, 1210, 2660,
     1266, 3705, 1210, 3705, 1266, 3705, 2660, 1210, 2756, 1266,

     3705, 1210, 3705, 1266, 2660, 1210, 2757, 1266, 2758, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 2759, 3705, 3705, 3705, 2760, 1264, 1264, 1264, 1264,
     3705, 3705, 3705, 1210, 3705, 1266, 3705, 1210, 2765, 1266,
     3705, 1210, 2764, 1266, 2763, 2770, 2770, 2770, 2770, 3705,
     1210, 3705, 1266, 2772, 2772, 2772, 2772, 3705, 3705, 1264,
     1264, 1264, 2773, 1264, 1264, 1264, 1264, 3705, 2767, 1210,
     3705, 1266, 1264, 1264, 1264, 1264, 2768, 1210, 3705, 1266,
     3705, 2769, 2766, 1210, 3705, 1266, 3705, 1210, 1343, 1266,
     1370, 1370, 1370, 1370, 3705, 1343, 1210, 3705, 1266, 2024,

     2024, 2024, 2024, 1343, 3705, 3705, 2025, 1371, 2873, 2873,
     2873, 2873, 2026, 3705, 1373, 3705, 2660, 3705, 2775, 1147,
     1147, 1147, 1147, 2660, 2771, 2852, 2852, 2852, 2852, 3705,
     1148, 2660, 2774, 3705, 3705, 2776, 1148, 2661, 2661, 2661,
     2661, 2131, 3705, 1131, 2418, 1190, 1190, 1190, 1190, 2853,
     2861, 2861, 2861, 2861, 2875, 2875, 2875, 2875, 3705, 2795,
     3156, 2133, 1191, 2877, 2877, 2877, 2877, 3156, 3705, 1193,
     2683, 2683, 2683, 2683, 1210, 3156, 2851, 2900, 2900, 2900,
     2900, 2712, 2712, 2712, 2712, 3705, 3705, 2733, 2193, 3705,
     3705, 3705, 2192, 2192, 2192, 2192, 3705, 3705, 3705, 2193,

     3705, 1245, 3705, 3705, 2854, 1245, 2477, 2477, 2477, 2477,
     3705, 2855, 1844, 1844, 1844, 1844, 2194, 3275, 2131, 2860,
     2861, 2861, 2860, 1845, 3275, 1209, 3705, 2738, 3705, 1846,
     2479, 3705, 3275, 1844, 1844, 1844, 1844, 1844, 1844, 1844,
     1844, 3705, 2739, 1210, 1845, 1245, 3278, 3705, 1845, 1211,
     1846, 3705, 3705, 3278, 1846, 3522, 2771, 2786, 2786, 2786,
     2786, 3278, 3522, 1212, 1844, 1844, 1844, 1844, 3705, 1213,
     3522, 3705, 3523, 1214, 1215, 1845, 1216, 1217, 1218, 3523,
     3705, 1846, 1219, 1220, 1221, 1222, 1223, 3523, 1224, 3705,
     1225, 1226, 1227, 1228, 1229, 3705, 3705, 2908, 3705, 2907,

     1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 3705, 3705,
     3705, 1845, 3705, 3705, 3705, 1845, 3705, 1846, 3705, 3705,
     3705, 1846, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844,
     3705, 2909, 3705, 1845, 3705, 3705, 3705, 1845, 3705, 1846,
     3705, 3705, 3705, 1846, 3705, 1844, 1844, 1844, 1844, 3705,
     3705, 1264, 1264, 1264, 1264, 3705, 1845, 2786, 2786, 2786,
     2786, 2911, 1846, 1264, 1264, 1264, 1264, 3705, 1264, 1264,
     1264, 1264, 3705, 2910, 3705, 1210, 3705, 1266, 3705, 2912,
     3705, 3705, 3705, 2913, 2915, 3705, 3705, 1210, 3705, 1266,
     3705, 3705, 1210, 3705, 1266, 3705, 3705, 3705, 2916, 2917,

     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 2732, 2732,
     2732, 2732, 1264, 1264, 1264, 1264, 2914, 2735, 2735, 2735,
     2735, 3705, 3705, 3705, 1210, 3705, 1266, 3705, 1210, 3705,
     1266, 3705, 1210, 3705, 1266, 3705, 1210, 3705, 1266, 3705,
     3705, 1210, 3705, 1266, 2923, 2923, 2923, 2923, 3705, 1264,
     1264, 1264, 1264, 3705, 3705, 2924, 2740, 2740, 2740, 2740,
     3705, 2919, 3705, 2918, 3705, 3705, 3705, 1213, 1210, 3705,
     1266, 3705, 3705, 1210, 2921, 1266, 1860, 3705, 3705, 3705,
     1210, 3705, 1266, 3705, 2920, 1264, 1264, 1264, 1264, 2922,
     3705, 1228, 1264, 1264, 1264, 1264, 3705, 2930, 2930, 2930,

     2930, 3705, 2931, 2932, 2932, 2932, 2932, 3705, 3705, 1210,
     3705, 1266, 1264, 1264, 1264, 1264, 1210, 3705, 1266, 3705,
     3705, 1210, 2925, 1266, 3705, 3705, 3705, 1210, 3705, 1266,
     1264, 1264, 1264, 1264, 3705, 3705, 1210, 3705, 1266, 1264,
     1264, 1264, 1264, 3705, 2936, 2936, 2936, 2936, 2928, 3705,
     1264, 1264, 1264, 1264, 1210, 2929, 1266, 1264, 1264, 1264,
     1264, 3705, 3705, 1210, 3705, 1266, 3705, 3705, 1210, 2933,
     1266, 3705, 3705, 3705, 1210, 3705, 1266, 2939, 2939, 2939,
     2939, 1210, 3705, 1266, 1264, 1264, 1264, 1264, 3705, 2934,
     3705, 1264, 1264, 1264, 1264, 2943, 2943, 2943, 2943, 3705,

     3705, 2940, 3705, 1266, 2935, 2937, 3705, 3705, 1210, 3705,
     1266, 3705, 2938, 3705, 3705, 1210, 3705, 1266, 3705, 1210,
     3705, 1266, 1264, 1264, 1264, 1264, 3705, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 3705,
     1264, 1264, 1264, 1264, 3705, 3705, 1210, 3705, 1266, 3705,
     3705, 1210, 3705, 1266, 3705, 1210, 3705, 1266, 3705, 1210,
     3705, 1266, 2941, 2942, 1210, 3705, 1266, 2949, 2949, 2949,
     2949, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 3705,
     3705, 2944, 2945, 2957, 2957, 2957, 2957, 3705, 3705, 3705,
     2946, 2950, 3705, 1266, 3705, 1210, 3705, 1266, 3705, 1210,

     3705, 1266, 2958, 2958, 2958, 2958, 3705, 1210, 2947, 1266,
     3705, 2951, 3705, 2948, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1210, 3705, 1266, 3705,
     2955, 2770, 2770, 2770, 2770, 3705, 3705, 3705, 1210, 2952,
     1266, 3705, 1210, 3705, 1266, 3705, 1210, 2956, 1266, 2772,
     2772, 2772, 2772, 3705, 3705, 1210, 3705, 1266, 1264, 1264,
     1264, 1264, 3705, 3705, 3705, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1210, 3705, 1266, 3705, 3705, 2961, 3705,
     3705, 2959, 1210, 3705, 1266, 3705, 3705, 2960, 2962, 1210,
     3705, 1266, 3705, 1210, 3705, 1266, 1264, 1264, 1264, 1264,

     2790, 2790, 2790, 2790, 3705, 2977, 2977, 2977, 2977, 3705,
     3705, 2791, 3705, 3705, 3705, 2963, 2978, 3705, 3705, 3705,
     1210, 3705, 1266, 2979, 2979, 2979, 2979, 3705, 3705, 3705,
     2964, 3705, 3705, 3705, 2966, 2790, 2790, 2790, 2790, 2980,
     2980, 2980, 2980, 2965, 3705, 3705, 2791, 1370, 1370, 1370,
     1370, 3705, 3705, 3705, 3705, 1147, 1147, 1147, 1147, 3705,
     3705, 2967, 3705, 3705, 1371, 3705, 1148, 2852, 2852, 2852,
     2852, 1373, 2973, 1190, 1190, 1190, 1190, 3705, 1148, 1131,
     3030, 3030, 3030, 3030, 2858, 2858, 2858, 2858, 3705, 3705,
     1191, 2853, 3032, 3032, 3032, 3032, 3705, 1193, 3033, 3034,

     3034, 3033, 2983, 3034, 3034, 3034, 3034, 2873, 2873, 2873,
     2873, 2875, 2875, 2875, 2875, 3705, 2984, 2877, 2877, 2877,
     2877, 3050, 3050, 3050, 3050, 3705, 3705, 1210, 2659, 3705,
     3705, 3705, 3029, 3052, 3052, 3052, 3052, 3705, 3055, 3055,
     3055, 3055, 3059, 3059, 3059, 3059, 2854, 3065, 3065, 3065,
     3065, 3070, 3070, 3070, 3070, 3071, 3071, 3071, 3071, 3705,
     3705, 1213, 3056, 2900, 2900, 2900, 2900, 3705, 2921, 3705,
     1860, 3066, 3705, 1844, 1844, 1844, 1844, 3705, 1844, 1844,
     1844, 1844, 3705, 2922, 1845, 1228, 3705, 3705, 3705, 1845,
     1846, 3067, 3705, 3705, 3705, 1846, 1844, 1844, 1844, 1844,

     1844, 1844, 1844, 1844, 3705, 3705, 3705, 1845, 3705, 3705,
     3705, 1845, 3705, 1846, 3705, 3705, 3705, 1846, 3705, 3068,
     1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 3705, 3705,
     3705, 1845, 3078, 3079, 2959, 1845, 3705, 1846, 3705, 3705,
     3705, 1846, 3705, 3084, 3084, 3084, 3084, 1844, 1844, 1844,
     1844, 3080, 3705, 3705, 1845, 3705, 3705, 3705, 1845, 3081,
     1846, 3705, 3705, 3705, 1846, 1264, 1264, 1264, 1264, 3705,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 3705, 1264, 1264, 1264, 1264, 3705, 3705, 1210,
     3705, 1266, 3083, 3082, 1210, 3705, 1266, 3705, 1210, 3705,

     1266, 3705, 1210, 3705, 1266, 3705, 3085, 1210, 3705, 1266,
     3705, 3705, 3086, 3705, 3088, 3087, 3091, 3091, 3091, 3091,
     2923, 2923, 2923, 2923, 3093, 3093, 3093, 3093, 3705, 3094,
     3705, 2924, 3705, 3705, 3094, 1264, 1264, 1264, 1264, 3705,
     1210, 3705, 1266, 3705, 1210, 3705, 1266, 3705, 3705, 3705,
     3089, 1264, 1264, 1264, 1264, 3705, 3090, 3705, 3705, 1210,
     3705, 1266, 1264, 1264, 1264, 1264, 2930, 2930, 2930, 2930,
     3705, 2931, 3705, 3705, 3705, 1210, 3705, 1266, 3705, 2932,
     2932, 2932, 2932, 3705, 3705, 3705, 1210, 3705, 1266, 3705,
     1210, 3705, 1266, 3705, 3095, 3705, 3104, 3104, 3104, 3104,

     3705, 3705, 3705, 1210, 3705, 1266, 3705, 3705, 1264, 1264,
     1264, 1264, 3705, 2936, 2936, 2936, 2936, 3705, 3705, 3098,
     1210, 3705, 3105, 1264, 1264, 1264, 1264, 3705, 3110, 3110,
     3110, 3110, 1210, 3705, 1266, 3099, 3101, 1210, 3705, 1266,
     3136, 3136, 3136, 3136, 3705, 3705, 3705, 1210, 3705, 1266,
     3705, 3102, 1786, 3103, 2510, 2511, 2511, 2511, 2511, 2510,
     2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2510, 2510, 2510, 2510, 1264, 1264, 1264, 1264, 3705, 2512,
     3108, 2513, 2510, 2510, 2510, 2510, 3107, 2939, 2939, 2939,
     2939, 3111, 3111, 3111, 3111, 3705, 3705, 3705, 1210, 3705,

     1266, 3112, 3112, 3112, 3112, 2510, 2510, 2510, 2510, 3106,
     3705, 2940, 3705, 1266, 3705, 1210, 3705, 1266, 2943, 2943,
     2943, 2943, 3705, 3705, 3705, 2950, 3705, 1266, 3113, 3113,
     3113, 3113, 3705, 3705, 2510, 2510, 2510, 2514, 3705, 3109,
     3705, 3705, 1210, 3705, 1266, 1264, 1264, 1264, 1264, 3705,
     3705, 3705, 1210, 3705, 1266, 3115, 3115, 3115, 3115, 1264,
     1264, 1264, 1264, 3705, 1264, 1264, 1264, 1264, 3705, 1210,
     3705, 1266, 2949, 2949, 2949, 2949, 3705, 3705, 3705, 3116,
     3705, 1266, 3705, 1210, 3705, 1266, 3705, 3705, 1210, 3705,
     1266, 3122, 3122, 3122, 3122, 3705, 2950, 3705, 1266, 3117,

     3705, 3705, 3114, 3705, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 3705, 3705, 3705, 1786, 3067, 3128, 3128, 3128,
     3128, 3705, 3119, 3121, 3705, 3705, 3705, 3118, 1210, 3705,
     1266, 3705, 1210, 3705, 1266, 3705, 3705, 3120, 3705, 3705,
     3705, 3129, 3705, 1266, 3068, 2957, 2957, 2957, 2957, 3705,
     2958, 2958, 2958, 2958, 1264, 1264, 1264, 1264, 3123, 3130,
     3130, 3130, 3130, 1264, 1264, 1264, 1264, 3705, 3705, 1210,
     3705, 1266, 3705, 3124, 1210, 3705, 1266, 3705, 1210, 3705,
     1266, 3705, 3705, 1210, 3705, 1266, 3705, 1210, 3705, 1266,
     1264, 1264, 1264, 1264, 3135, 3135, 3135, 3135, 3705, 1264,

     1264, 1264, 1264, 3705, 2977, 2977, 2977, 2977, 2979, 2979,
     2979, 2979, 3705, 2933, 1210, 2978, 1266, 3705, 1210, 3705,
     1266, 3705, 3131, 1210, 3705, 1266, 2980, 2980, 2980, 2980,
     2977, 2977, 2977, 2977, 2979, 2979, 2979, 2979, 3705, 3705,
     3705, 2978, 2980, 2980, 2980, 2980, 1370, 1370, 1370, 1370,
     3705, 3705, 3705, 3705, 1190, 1190, 1190, 1190, 2507, 3134,
     3705, 3705, 3705, 1371, 3030, 3030, 3030, 3030, 3705, 3705,
     1373, 1191, 3032, 3032, 3032, 3032, 3705, 3705, 1193, 3181,
     3182, 3182, 3181, 3182, 3182, 3182, 3182, 3189, 3189, 3189,
     3189, 3194, 3194, 3194, 3194, 3050, 3050, 3050, 3050, 3052,

     3052, 3052, 3052, 3144, 3705, 3705, 3705, 1210, 3705, 2579,
     3055, 3055, 3055, 3055, 3110, 3110, 3110, 3110, 3705, 3705,
     3705, 3179, 3201, 3201, 3201, 3201, 3202, 3202, 3202, 3202,
     3059, 3059, 3059, 3059, 3056, 3203, 3203, 3203, 3203, 3205,
     3205, 3205, 3205, 3065, 3065, 3065, 3065, 3705, 3705, 3705,
     3066, 3122, 3122, 3122, 3122, 3214, 3214, 3214, 3214, 3070,
     3070, 3070, 3070, 3206, 3705, 3705, 3705, 3066, 3071, 3071,
     3071, 3071, 3216, 3216, 3216, 3216, 3705, 3705, 3705, 3215,
     3705, 3705, 3705, 3207, 3705, 3705, 3705, 3067, 3219, 3219,
     3219, 3219, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844,

     3705, 3705, 3705, 1845, 3705, 3705, 3705, 1845, 3705, 1846,
     3705, 3208, 3705, 1846, 3705, 3068, 1844, 1844, 1844, 1844,
     3223, 3223, 3223, 3223, 3705, 3705, 3705, 1845, 3705, 3705,
     3705, 1845, 3705, 1846, 3705, 3705, 3705, 1846, 1844, 1844,
     1844, 1844, 3705, 1844, 1844, 1844, 1844, 3705, 3705, 1845,
     3705, 3705, 3705, 3221, 1845, 1846, 3705, 3705, 3705, 3220,
     1846, 3084, 3084, 3084, 3084, 1844, 1844, 1844, 1844, 3705,
     3705, 3705, 1845, 3705, 3705, 3705, 1845, 1264, 1264, 1264,
     1264, 3222, 1846, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 3705, 3705, 3224, 3705, 3705,

     3705, 1210, 3705, 1266, 3705, 3705, 3705, 1210, 3225, 1266,
     3705, 1210, 3705, 1266, 3705, 1210, 3705, 1266, 3229, 3229,
     3229, 3229, 3705, 3226, 3091, 3091, 3091, 3091, 3705, 3705,
     3227, 3705, 3705, 2956, 3705, 3093, 3093, 3093, 3093, 3705,
     3094, 3705, 1210, 3705, 1266, 3094, 3705, 3705, 1210, 3705,
     1266, 3705, 3705, 3228, 1264, 1264, 1264, 1264, 3705, 1264,
     1264, 1264, 1264, 3234, 3234, 3234, 3234, 3104, 3104, 3104,
     3104, 1264, 1264, 1264, 1264, 3705, 3705, 3705, 1210, 3705,
     1266, 3705, 3705, 1210, 3705, 1266, 3705, 1210, 3705, 1266,
     3705, 1210, 3705, 3105, 3705, 1210, 3705, 1266, 3242, 3242,

     3242, 3242, 3705, 1264, 1264, 1264, 1264, 3244, 3244, 3244,
     3244, 3110, 3110, 3110, 3110, 3705, 3111, 3111, 3111, 3111,
     3705, 3705, 1210, 3705, 1266, 3230, 3233, 1210, 3705, 1266,
     3705, 3245, 3705, 1266, 3112, 3112, 3112, 3112, 3705, 3241,
     1210, 3705, 1266, 3113, 3113, 3113, 3113, 1264, 1264, 1264,
     1264, 3115, 3115, 3115, 3115, 3705, 3705, 3705, 2950, 3705,
     1266, 3705, 3243, 3247, 3247, 3247, 3247, 1210, 3705, 1266,
     3705, 1210, 3705, 1266, 3705, 3116, 3705, 1266, 1264, 1264,
     1264, 1264, 3705, 1264, 1264, 1264, 1264, 1786, 1264, 1264,
     1264, 1264, 3705, 3705, 3705, 3207, 3251, 3251, 3251, 3251,

     3705, 3705, 1210, 3705, 1266, 3705, 3246, 1210, 3705, 1266,
     3705, 3705, 1210, 3705, 1266, 1264, 1264, 1264, 1264, 3705,
     1210, 3705, 1266, 3208, 3122, 3122, 3122, 3122, 1264, 1264,
     1264, 1264, 3248, 1264, 1264, 1264, 1264, 3705, 3705, 1210,
     3705, 1266, 1264, 1264, 1264, 1264, 3705, 3250, 3249, 3705,
     3705, 3705, 1210, 3705, 1266, 3705, 3705, 1210, 3705, 1266,
     3128, 3128, 3128, 3128, 3705, 3705, 1210, 3705, 1266, 3258,
     3258, 3258, 3258, 3252, 3253, 3705, 3130, 3130, 3130, 3130,
     3261, 3261, 3261, 3261, 3129, 3705, 1266, 1264, 1264, 1264,
     1264, 3705, 3705, 1786, 3135, 3135, 3135, 3135, 3705, 3705,

     1210, 3254, 1266, 3705, 1210, 3705, 1266, 3705, 3705, 3705,
     3257, 1210, 3705, 1266, 3136, 3136, 3136, 3136, 1210, 3705,
     1266, 3269, 3269, 3269, 3269, 3705, 1213, 3270, 3270, 3270,
     3270, 3705, 3705, 3259, 3705, 1860, 3271, 3271, 3271, 3271,
     1370, 1370, 1370, 1370, 3705, 3705, 3264, 3705, 2922, 3705,
     1228, 3260, 3283, 3283, 3283, 3283, 3705, 1371, 1190, 1190,
     1190, 1190, 3705, 3705, 1373, 3300, 3300, 3300, 3300, 3301,
     3302, 3302, 3301, 3705, 3705, 1191, 3705, 3705, 3705, 3265,
     3705, 3705, 1193, 3302, 3302, 3302, 3302, 3306, 3306, 3306,
     3306, 3189, 3189, 3189, 3189, 3311, 3311, 3311, 3311, 3273,

     3194, 3194, 3194, 3194, 3705, 3705, 3705, 1210, 3314, 3314,
     3314, 3314, 3315, 3315, 3315, 3315, 3317, 3317, 3317, 3317,
     3201, 3201, 3201, 3201, 3202, 3202, 3202, 3202, 3705, 3705,
     3705, 3299, 3203, 3203, 3203, 3203, 3205, 3205, 3205, 3205,
     3318, 3247, 3247, 3247, 3247, 3705, 3705, 3705, 3066, 3323,
     3323, 3323, 3323, 3214, 3214, 3214, 3214, 3705, 3705, 3705,
     3206, 3258, 3258, 3258, 3258, 3216, 3216, 3216, 3216, 3327,
     3327, 3327, 3327, 3219, 3219, 3219, 3219, 3215, 3705, 3705,
     3207, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 3705,
     3705, 3705, 1845, 3705, 3705, 3705, 1845, 3705, 1846, 3705,

     3705, 3705, 1846, 3331, 3331, 3331, 3331, 3705, 3208, 3705,
     3223, 3223, 3223, 3223, 1845, 1213, 1844, 1844, 1844, 1844,
     1846, 1845, 3259, 3705, 1860, 3705, 3705, 1845, 3705, 1264,
     1264, 1264, 1264, 1846, 3705, 3705, 3705, 2922, 3705, 1228,
     3260, 3705, 3705, 3705, 3330, 3333, 3333, 3333, 3333, 3334,
     3334, 3334, 3334, 1210, 3329, 1266, 1845, 3705, 3705, 3705,
     1845, 3705, 1846, 3705, 3705, 3705, 1846, 1264, 1264, 1264,
     1264, 3705, 3705, 3705, 3332, 3705, 3705, 3705, 3335, 3229,
     3229, 3229, 3229, 1264, 1264, 1264, 1264, 3340, 3340, 3340,
     3340, 1210, 3705, 1266, 3234, 3234, 3234, 3234, 3341, 3341,

     3341, 3341, 3705, 1210, 3705, 1266, 3705, 1210, 3705, 1266,
     3705, 1210, 3705, 1266, 1264, 1264, 1264, 1264, 1210, 3705,
     1266, 3242, 3242, 3242, 3242, 3705, 3336, 3348, 3348, 3348,
     3349, 3244, 3244, 3244, 3244, 3705, 3705, 3705, 1210, 3705,
     1266, 3705, 3705, 3337, 3705, 1210, 3705, 1266, 3705, 3705,
     3705, 1210, 3705, 1266, 3705, 3245, 3705, 1266, 3350, 3350,
     3350, 3350, 3247, 3247, 3247, 3247, 3705, 3365, 3365, 3365,
     3365, 3258, 3258, 3258, 3258, 3705, 3705, 3342, 3705, 3705,
     3705, 3347, 1786, 3351, 3352, 3352, 3352, 3352, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,

     3351, 3351, 3351, 1264, 1264, 1264, 1264, 3705, 3353, 3351,
     3354, 3351, 3351, 3351, 3351, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 3269, 3269, 3269, 3269, 1210, 3705, 1266,
     3251, 3251, 3251, 3251, 3351, 3351, 3351, 3351, 3705, 1210,
     3705, 1266, 3705, 1210, 3705, 1266, 3366, 3705, 3705, 3356,
     3359, 3359, 3359, 3359, 1210, 3705, 1266, 3705, 1264, 1264,
     1264, 1264, 3705, 3351, 3351, 3351, 3355, 3705, 3705, 1264,
     1264, 1264, 1264, 3705, 3360, 3705, 1266, 1264, 1264, 1264,
     1264, 3705, 1210, 3357, 1266, 3261, 3261, 3261, 3261, 3705,
     3705, 3358, 3705, 1210, 3361, 1266, 3705, 3705, 3363, 3705,

     3705, 1210, 3705, 1266, 3348, 3348, 3348, 3348, 3705, 1210,
     3705, 1266, 3270, 3270, 3270, 3270, 3271, 3271, 3271, 3271,
     3705, 3705, 3362, 3269, 3269, 3269, 3269, 3705, 1210, 3705,
     1266, 3270, 3270, 3270, 3270, 3271, 3271, 3271, 3271, 3705,
     3705, 3705, 3364, 3705, 3368, 3373, 3373, 3373, 3373, 3374,
     3374, 3374, 3374, 3283, 3283, 3283, 3283, 1190, 1190, 1190,
     1190, 3300, 3300, 3300, 3300, 3705, 1371, 3395, 3396, 3396,
     3395, 3705, 3705, 1373, 1191, 3396, 3396, 3396, 3396, 3705,
     3705, 1193, 3399, 3399, 3399, 3399, 3306, 3306, 3306, 3306,
     3401, 3401, 3401, 3401, 3402, 3402, 3402, 3402, 3705, 1210,

     3311, 3311, 3311, 3311, 3405, 3405, 3405, 3405, 3314, 3314,
     3314, 3314, 3315, 3315, 3315, 3315, 3406, 3406, 3406, 3407,
     3317, 3317, 3317, 3317, 3350, 3350, 3350, 3350, 3705, 3394,
     3408, 3408, 3408, 3408, 3323, 3323, 3323, 3323, 3412, 3412,
     3412, 3412, 3705, 3705, 3318, 3327, 3327, 3327, 3327, 3406,
     3406, 3406, 3406, 1844, 1844, 1844, 1844, 3419, 3419, 3419,
     3419, 3705, 3413, 3705, 1845, 3705, 3705, 3705, 1845, 3705,
     1846, 3705, 3705, 3705, 1846, 3331, 3331, 3331, 3331, 3705,
     3705, 3705, 3414, 3705, 3705, 3705, 1845, 3420, 3420, 3420,
     3420, 3333, 3333, 3333, 3333, 3705, 3705, 3705, 1845, 3705,

     3705, 3705, 1845, 3705, 1846, 3705, 3705, 3705, 3418, 3705,
     3415, 3334, 3334, 3334, 3334, 1264, 1264, 1264, 1264, 3705,
     3705, 3705, 1845, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 3422, 3422, 3422, 3422, 3340, 3340, 3340, 3340, 1210,
     3705, 1266, 3341, 3341, 3341, 3341, 3705, 1210, 3705, 1266,
     3705, 1210, 3705, 1266, 1264, 1264, 1264, 1264, 3705, 1210,
     3705, 1266, 3348, 3348, 3348, 3348, 3348, 3348, 3348, 3348,
     3350, 3350, 3350, 3350, 1264, 1264, 1264, 1264, 1210, 3705,
     1266, 2942, 3421, 3705, 3705, 3705, 1210, 3705, 1266, 3705,
     1210, 3705, 1266, 1264, 1264, 1264, 1264, 3705, 1210, 3705,

     1266, 3434, 3434, 3434, 3434, 3436, 3436, 3436, 3436, 3705,
     2516, 3426, 3365, 3365, 3365, 3365, 3705, 1210, 3705, 1266,
     3705, 3342, 3705, 3427, 3705, 3435, 3705, 1266, 3705, 1786,
     3705, 3705, 3705, 3432, 3373, 3373, 3373, 3373, 3428, 3351,
     3352, 3352, 3352, 3352, 3351, 3351, 3351, 3429, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3457,
     3458, 3458, 3457, 3705, 3353, 3351, 3354, 3351, 3351, 3351,
     3351, 3430, 3430, 3430, 3430, 3430, 3430, 3430, 3430, 3430,
     3430, 3430, 3430, 3430, 3430, 3430, 3430, 3430, 3430, 3430,
     3351, 3351, 3351, 3351, 3430, 3430, 3430, 3430, 3430, 3430,

     3430, 3430, 3430, 3430, 3430, 3430, 3430, 3430, 3430, 3430,
     3430, 3430, 3430, 3430, 3430, 3430, 3430, 3430, 3430, 3351,
     3351, 3351, 3431, 1264, 1264, 1264, 1264, 3359, 3359, 3359,
     3359, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1210, 3705, 1266,
     3705, 3360, 3705, 1266, 3705, 1210, 3705, 1266, 3705, 1210,
     3705, 1266, 3705, 1210, 3705, 1266, 3705, 1210, 3705, 1266,
     3705, 3414, 3441, 3441, 3441, 3441, 3705, 1264, 1264, 1264,
     1264, 3439, 3705, 3705, 3705, 3437, 3705, 3374, 3374, 3374,
     3374, 3705, 3456, 3456, 3456, 3456, 3433, 3705, 3705, 3415,

     3438, 1210, 3705, 1266, 1371, 3458, 3458, 3458, 3458, 1191,
     3705, 1373, 3705, 3705, 3705, 3440, 1193, 3460, 3460, 3460,
     3460, 3399, 3399, 3399, 3399, 3461, 3461, 3461, 3461, 1210,
     3401, 3401, 3401, 3401, 3443, 3402, 3402, 3402, 3402, 3405,
     3405, 3405, 3405, 3406, 3406, 3406, 3406, 3406, 3406, 3406,
     3406, 3442, 3408, 3408, 3408, 3408, 3465, 3465, 3465, 3465,
     3705, 3412, 3412, 3412, 3412, 3436, 3436, 3436, 3436, 3705,
     1844, 1844, 1844, 1844, 3705, 3419, 3419, 3419, 3419, 3705,
     3466, 1845, 3705, 3705, 3705, 3413, 1845, 1846, 3420, 3420,
     3420, 3420, 1264, 1264, 1264, 1264, 3705, 3705, 3705, 1845,

     3422, 3422, 3422, 3422, 3427, 3414, 1264, 1264, 1264, 1264,
     3477, 3477, 3477, 3477, 3705, 3705, 1210, 3705, 1266, 3428,
     3477, 3477, 3477, 3477, 1264, 1264, 1264, 1264, 3705, 3705,
     1210, 3705, 1266, 3415, 3705, 3705, 3705, 3479, 1264, 1264,
     1264, 1264, 3705, 3471, 3705, 3705, 3705, 3479, 1210, 3472,
     1266, 3434, 3434, 3434, 3434, 3482, 3482, 3482, 3482, 3705,
     3705, 3705, 1210, 3705, 1266, 2241, 3480, 3436, 3436, 3436,
     3436, 1264, 1264, 1264, 1264, 3435, 3705, 1266, 3705, 1786,
     1264, 1264, 1264, 1264, 3705, 1264, 1264, 1264, 1264, 3486,
     3486, 3486, 3486, 3705, 3705, 1210, 3705, 1266, 3441, 3441,

     3441, 3441, 3705, 3705, 1210, 3705, 1266, 3705, 3705, 1210,
     3481, 1266, 3705, 3487, 3705, 1266, 3705, 3483, 1264, 1264,
     1264, 1264, 3488, 3488, 3488, 3488, 3456, 3456, 3456, 3456,
     3705, 3705, 3485, 3498, 3499, 3499, 3498, 3499, 3499, 3499,
     3499, 3705, 1210, 3705, 1266, 3705, 3705, 3705, 3484, 3705,
     1193, 3460, 3460, 3460, 3460, 3461, 3461, 3461, 3461, 3705,
     3705, 1210, 3465, 3465, 3465, 3465, 3482, 3482, 3482, 3482,
     3507, 3507, 3507, 3507, 3705, 3705, 3705, 2241, 1844, 1844,
     1844, 1844, 3510, 3510, 3510, 3510, 3466, 3705, 3705, 1845,
     1264, 1264, 1264, 1264, 3508, 1846, 3477, 3477, 3477, 3477,

     3705, 3489, 3477, 3477, 3477, 3477, 1264, 1264, 1264, 1264,
     3514, 3514, 3514, 3514, 1210, 3705, 1266, 3482, 3482, 3482,
     3482, 3705, 3705, 3479, 1264, 1264, 1264, 1264, 3705, 3479,
     1210, 3705, 1266, 3705, 3515, 3705, 1266, 1264, 1264, 1264,
     1264, 3509, 1264, 1264, 1264, 1264, 3705, 3705, 1210, 3264,
     1266, 3705, 3705, 3513, 3486, 3486, 3486, 3486, 3705, 3705,
     3705, 1210, 3705, 1266, 3516, 3705, 1210, 3705, 1266, 3518,
     3518, 3518, 3518, 3488, 3488, 3488, 3488, 3705, 3487, 3705,
     1266, 3519, 3519, 3519, 3519, 3705, 3705, 3705, 3440, 3524,
     3525, 3525, 3524, 1786, 3525, 3525, 3525, 3525, 3528, 3528,

     3528, 3528, 3507, 3507, 3507, 3507, 3518, 3518, 3518, 3518,
     3517, 3705, 1844, 1844, 1844, 1844, 3705, 3705, 1210, 3705,
     3705, 3705, 3529, 1845, 3705, 3705, 3508, 3705, 3705, 1846,
     3510, 3510, 3510, 3510, 3705, 1264, 1264, 1264, 1264, 3514,
     3514, 3514, 3514, 3535, 3535, 3535, 3535, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 3518, 3518, 3518, 3518, 1210,
     3520, 1266, 3705, 3515, 3705, 1266, 3705, 1786, 3705, 3705,
     3705, 1210, 3705, 1266, 3705, 1210, 3705, 1266, 3705, 3705,
     3532, 3481, 3519, 3519, 3519, 3519, 3705, 3705, 3705, 3536,
     3539, 3540, 3540, 3539, 3540, 3540, 3540, 3540, 3528, 3528,

     3528, 3528, 3535, 3535, 3535, 3535, 3705, 3705, 1844, 1844,
     1844, 1844, 3535, 3535, 3535, 3535, 3705, 3705, 1210, 1845,
     3705, 3705, 3529, 3537, 3705, 1846, 1264, 1264, 1264, 1264,
     3548, 3548, 3548, 3548, 3551, 3552, 3552, 3551, 3552, 3552,
     3552, 3552, 3555, 3555, 3555, 3555, 3557, 3557, 3557, 3557,
     1210, 3705, 1266, 3705, 3549, 3705, 1266, 1845, 3558, 3558,
     3558, 3558, 1210, 1846, 3705, 3705, 3556, 1264, 1264, 1264,
     1264, 3705, 3705, 3547, 3705, 3544, 3548, 3548, 3548, 3548,
     3561, 3561, 3561, 3561, 3563, 3564, 3564, 3563, 3705, 3705,
     3705, 1210, 3705, 1266, 3564, 3564, 3564, 3564, 3705, 3705,

     3549, 3705, 1266, 3705, 1786, 3565, 3565, 3565, 3565, 3555,
     3555, 3555, 3555, 3537, 3561, 3561, 3561, 3561, 1210, 3557,
     3557, 3557, 3557, 3558, 3558, 3558, 3558, 3705, 3705, 3705,
     1845, 3705, 3705, 3556, 3705, 3705, 3705, 3559, 3566, 3566,
     3566, 3566, 3561, 3561, 3561, 3561, 3568, 3568, 3568, 3568,
     3570, 3571, 3571, 3570, 3571, 3571, 3571, 3571, 3565, 3565,
     3565, 3565, 3566, 3566, 3566, 3566, 3568, 3568, 3568, 3568,
     3705, 3705, 3705, 3569, 3572, 3572, 3572, 3572, 1210, 3573,
     3575, 3576, 3576, 3575, 3573, 3576, 3576, 3576, 3576, 3572,
     3572, 3572, 3572, 3569, 3573, 3578, 3579, 3579, 3578, 3573,

     3579, 3579, 3579, 3579, 3581, 3582, 3582, 3581, 3705, 1210,
     3582, 3582, 3582, 3582, 3705, 3705, 3705, 3567, 3583, 3583,
     3583, 3583, 3705, 3584, 1210, 3705, 3705, 3705, 3584, 3586,
     3587, 3587, 3586, 3705, 1210, 3587, 3587, 3587, 3587, 3583,
     3583, 3583, 3583, 3574, 3705, 3705, 3585, 3583, 3583, 3583,
     3583, 3588, 3589, 3589, 3588, 3705, 3705, 3705, 3574, 1210,
     3589, 3589, 3589, 3589, 3705, 3705, 3705, 3585, 3590, 3591,
     3591, 3590, 3705, 3705, 3705, 3585, 3591, 3591, 3591, 3591,
     3592, 3593, 3593, 3592, 1210, 3593, 3593, 3593, 3593, 3594,
     3595, 3595, 3594, 3595, 3595, 3595, 3595, 3705, 3705, 3705,

     1210, 3596, 3597, 3597, 3596, 3597, 3597, 3597, 3597, 1210,
     3598, 3599, 3599, 3598, 3705, 3705, 3705, 1210, 3599, 3599,
     3599, 3599, 3600, 3601, 3601, 3600, 3705, 3705, 3705, 1210,
     3601, 3601, 3601, 3601, 3602, 3603, 3603, 3602, 3603, 3603,
     3603, 3603, 1210, 3604, 3605, 3605, 3604, 3605, 3605, 3605,
     3605, 3705, 3705, 3705, 1210, 3606, 3607, 3607, 3606, 3705,
     3705, 3705, 1210, 3607, 3607, 3607, 3607, 3608, 3609, 3609,
     3608, 1210, 3609, 3609, 3609, 3609, 3610, 3611, 3611, 3610,
     3611, 3611, 3611, 3611, 3705, 3705, 3705, 1210, 3612, 3613,
     3613, 3612, 3613, 3613, 3613, 3613, 1210, 3614, 3615, 3615,

     3614, 3705, 3705, 3705, 1210, 3615, 3615, 3615, 3615, 3616,
     3617, 3617, 3616, 3705, 3705, 3705, 1210, 3617, 3617, 3617,
     3617, 3618, 3619, 3619, 3618, 3619, 3619, 3619, 3619, 1210,
     3620, 3621, 3621, 3620, 3621, 3621, 3621, 3621, 3705, 3705,
     3705, 1210, 3622, 3623, 3623, 3622, 3705, 3705, 3705, 1210,
     3623, 3623, 3623, 3623, 3624, 3625, 3625, 3624, 1210, 3625,
     3625, 3625, 3625, 3626, 3627, 3627, 3626, 3627, 3627, 3627,
     3627, 3705, 3705, 3705, 1210, 3628, 3629, 3629, 3628, 3629,
     3629, 3629, 3629, 1210, 3630, 3631, 3631, 3630, 3705, 3705,
     3705, 1210, 3631, 3631, 3631, 3631, 3632, 3633, 3633, 3632,

     3705, 3705, 3705, 1210, 3633, 3633, 3633, 3633, 3634, 3635,
     3635, 3634, 3635, 3635, 3635, 3635, 1210, 3636, 3637, 3637,
     3636, 3637, 3637, 3637, 3637, 3705, 3705, 3705, 1210, 3638,
     3639, 3639, 3638, 3705, 3705, 3705, 1210, 3639, 3639, 3639,
     3639, 3640, 3641, 3641, 3640, 1210, 3641, 3641, 3641, 3641,
     3642, 3643, 3643, 3642, 3643, 3643, 3643, 3643, 3705, 3705,
     3705, 1210, 3644, 3645, 3645, 3644, 3645, 3645, 3645, 3645,
     1210, 3646, 3647, 3647, 3646, 3705, 3705, 3705, 1210, 3647,
     3647, 3647, 3647, 3648, 3649, 3649, 3648, 3705, 3705, 3705,
     1210, 3649, 3649, 3649, 3649, 3650, 3651, 3651, 3650, 3651,

     3651, 3651, 3651, 1210, 3652, 3653, 3653, 3652, 3653, 3653,
     3653, 3653, 3705, 3705, 3705, 1210, 3654, 3655, 3655, 3654,
     3705, 3705, 3705, 1210, 3655, 3655, 3655, 3655, 3656, 3657,
     3657, 3656, 1210, 3657, 3657, 3657, 3657, 3658, 3659, 3659,
     3658, 3659, 3659, 3659, 3659, 3705, 3705, 3705, 1210, 3660,
     3661, 3661, 3660, 3661, 3661, 3661, 3661, 1210, 3662, 3663,
     3663, 3662, 3705, 3705, 3705, 1210, 3663, 3663, 3663, 3663,
     3664, 3665, 3665, 3664, 3705, 3705, 3705, 1210, 3665, 3665,
     3665, 3665, 3666, 3667, 3667, 3666, 3667, 3667, 3667, 3667,
     1210, 3668, 3669, 3669, 3668, 3669, 3669, 3669, 3669, 3705,

     3705, 3705, 1210, 3670, 3671, 3671, 3670, 3705, 3705, 3705,
     1210, 3671, 3671, 3671, 3671, 3672, 3673, 3673, 3672, 1210,
     3673, 3673, 3673, 3673, 3674, 3675, 3675, 3674, 3675, 3675,
     3675, 3675, 3705, 3705, 3705, 1210, 3676, 3677, 3677, 3676,
     3677, 3677, 3677, 3677, 1210, 3678, 3679, 3679, 3678, 3705,
     3705, 3705, 1210, 3679, 3679, 3679, 3679, 3680, 3681, 3681,
     3680, 3705, 3705, 3705, 1210, 3681, 3681, 3681, 3681, 3682,
     3683, 3683, 3682, 3683, 3683, 3683, 3683, 1210, 3684, 3685,
     3685, 3684, 3685, 3685, 3685, 3685, 3705, 3705, 3705, 1210,
     3686, 3687, 3687, 3686, 3705, 3705, 3705, 1210, 3687, 3687,

     3687, 3687, 3688, 3689, 3689, 3688, 1210, 3689, 3689, 3689,
     3689, 3690, 3691, 3691, 3690, 3691, 3691, 3691, 3691, 3705,
     3705, 3705, 1210, 3692, 3693, 3693, 3692, 3693, 3693, 3693,
     3693, 1210, 3694, 3695, 3695, 3694, 3705, 3705, 3705, 1210,
     3695, 3695, 3695, 3695, 3696, 3697, 3697, 3696, 3705, 3705,
     3705, 1210, 3697, 3697, 3697, 3697, 3698, 3699, 3699, 3698,
     3699, 3699, 3699, 3699, 1210, 3700, 3701, 3701, 3700, 3701,
     3701, 3701, 3701, 3705, 3705, 3705, 1210, 3702, 3703, 3703,
     3702, 3705, 3705, 3705, 1210, 3703, 3703, 3703, 3703, 3704,
     1236, 1236, 3704, 1210, 1236, 1236, 1236, 1236, 3704, 1236,

     1236, 3704, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1210,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1210,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,

      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,

      468,  468,  468,  468,  468,  468,  468,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,

      507,  507,  507,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  586,  586,  586,  586,  586,

      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,

      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,

      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,

      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,

      841,  841,  841,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  881,

      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  938,  938,  938,  938,  938,  938,  938,  938,  938,

      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,

      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,

      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,

     1078, 1078, 1078, 1095, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1095, 3705, 3705, 3705, 3705, 3705, 1095, 3705,
     3705, 3705, 3705, 3705, 3705, 1095, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 1095, 1109, 1109, 1109, 3705, 3705, 3705,
     1109, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1109, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1109, 1113, 1113, 1113, 1113, 3705,
     3705, 1113, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1113, 3705, 3705, 3705, 3705, 3705, 1113, 3705, 3705,
     3705, 3705, 3705, 3705, 1113, 1113, 1116, 1116, 1116, 3705,

     3705, 3705, 1116, 3705, 3705, 3705, 3705, 3705, 3705, 1116,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1116, 3705,
     3705, 3705, 3705, 3705, 3705, 1116, 1116, 1122, 1122, 1122,
     3705, 3705, 3705, 3705, 3705, 3705, 1122, 3705, 3705, 1122,
     1122, 3705, 1122, 1122, 1122, 1122, 3705, 3705, 3705, 1122,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1122, 1128, 1128,
     1128, 3705, 3705, 3705, 1128, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1128, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1128, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,

     1132, 1132, 3705, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 3705, 1132, 1132,
     1132, 1138, 1138, 1138, 3705, 3705, 3705, 1138, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 1138, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1138, 1141, 1141, 1141, 1141, 3705, 3705, 1141, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1141, 3705,
     3705, 3705, 3705, 3705, 1141, 3705, 3705, 3705, 3705, 3705,
     3705, 1141, 1141, 1149, 1149, 1149, 3705, 3705, 3705, 3705,
     3705, 3705, 1149, 3705, 3705, 3705, 3705, 3705, 1149, 1149,

     3705, 3705, 3705, 3705, 3705, 1149, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 1149, 1159, 3705, 3705, 3705, 1159, 3705,
     1159, 3705, 3705, 1159, 3705, 3705, 3705, 1159, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1159, 1162, 1162, 3705, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1178, 1178,
     1178, 3705, 3705, 3705, 1178, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1178, 3705, 3705, 3705, 3705, 1178, 3705, 3705, 1178, 1192,

     1192, 1192, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1192, 3705, 1192, 1192, 3705, 3705, 3705, 3705,
     3705, 1192, 3705, 1192, 3705, 3705, 3705, 3705, 3705, 1192,
     1201, 1201, 3705, 1201, 1201, 1201, 1201, 1201, 1201, 3705,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1232, 1232, 1232, 3705, 3705, 3705, 1232, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1232, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1232, 1239, 1239, 1239, 1239, 3705, 3705, 1239,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1239,
     3705, 3705, 3705, 3705, 3705, 1239, 3705, 3705, 3705, 3705,
     3705, 3705, 1239, 1239, 1247, 1247, 1247, 3705, 3705, 3705,
     1247, 1247, 3705, 3705, 3705, 1247, 3705, 3705, 3705, 3705,
     1247, 3705, 3705, 3705, 3705, 3705, 1247, 3705, 3705, 3705,
     1247, 3705, 3705, 3705, 1247, 1265, 1265, 1265, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1265, 1265, 3705, 1265, 3705, 3705, 3705, 1265, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1265, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,

     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1301, 1301,
     3705, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 3705, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1310, 1310, 1310, 3705, 3705, 3705, 1310, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1310, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1310, 1313, 1313, 1313, 1313, 3705, 3705, 1313, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1313, 3705, 3705,

     3705, 3705, 3705, 1313, 3705, 3705, 3705, 3705, 3705, 3705,
     1313, 1313, 1316, 1316, 1316, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1316, 1316, 3705,
     1316, 3705, 3705, 3705, 1316, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1316, 1356, 1356, 3705, 3705, 1356, 3705, 3705,
     1356, 1356, 3705, 1356, 1356, 1356, 1356, 1356, 3705, 1356,
     1356, 1356, 1356, 1356, 1356, 3705, 1356, 1356, 1356, 1356,
     1356, 3705, 3705, 1356, 1356, 1360, 1360, 3705, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1362, 1362, 3705,
     1362, 1362, 1362, 1362, 1362, 1362, 3705, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1372,
     1372, 1372, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1372, 3705, 1372, 1372, 3705, 3705, 3705, 3705,
     3705, 1372, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1372,
     1379, 1379, 1379, 3705, 3705, 3705, 1379, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1379, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     1379, 1382, 1382, 1382, 1382, 3705, 3705, 1382, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1382, 3705, 3705,
     3705, 3705, 3705, 1382, 3705, 3705, 3705, 3705, 3705, 3705,
     1382, 1382, 1384, 1384, 1384, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1384, 1384, 3705,
     3705, 3705, 3705, 3705, 1384, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1384, 1385, 1385, 3705, 1385, 1385, 3705, 3705,
     1385, 1385, 3705, 1385, 1385, 1385, 1385, 1385, 3705, 1385,
     1385, 1385, 1385, 1385, 1385, 3705, 1385, 1385, 3705, 1385,
     1385, 3705, 3705, 1385, 1385, 1388, 1388, 3705, 1388, 1388,

     1388, 1388, 1388, 1388, 3705, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1406, 1406, 3705,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1413,
     1413, 3705, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 3705, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1426, 1426, 3705, 1426, 1426, 3705, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 3705, 1426, 3705,
     1426, 1426, 1426, 1426, 1426, 1429, 1429, 3705, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1439, 3705, 3705,
     3705, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 3705,

     1439, 3705, 3705, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1449,
     3705, 1449, 3705, 3705, 3705, 3705, 3705, 3705, 1449, 3705,
     1449, 3705, 3705, 3705, 3705, 3705, 1449, 1453, 1453, 1453,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1453, 3705, 1453, 3705, 3705, 3705, 3705, 3705, 3705, 1453,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1453, 1456, 1456,
     1456, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 1456, 3705, 3705, 3705, 3705, 3705, 3705,
     1456, 3705, 1456, 3705, 3705, 3705, 3705, 3705, 1456, 1467,

     1467, 3705, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1471, 3705, 3705, 3705, 1471, 3705, 3705, 3705, 3705,
     3705, 3705, 1471, 3705, 3705, 3705, 3705, 3705, 3705, 1471,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1471, 1476, 1476,
     3705, 1476, 1476, 3705, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,

     1484, 3705, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1491, 1491, 1491, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1491, 1491, 3705,
     3705, 3705, 3705, 3705, 1491, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1491, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 3705, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1507, 1507, 3705, 1507, 3705,
     3705, 3705, 1507, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     1507, 1522, 1522, 3705, 1522, 1522, 1522, 1522, 1522, 1522,
     3705, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1533, 1533, 1533, 3705, 3705, 3705, 1533,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1533, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 1533, 1536, 1536, 1536, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1536, 3705, 3705, 3705, 1536,
     3705, 3705, 3705, 3705, 3705, 3705, 1536, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1536, 1542, 1542, 1542, 3705, 3705,

     3705, 1542, 1542, 3705, 3705, 3705, 1542, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1542, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1542, 1544, 1544, 1544, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1544, 3705, 3705, 3705, 3705, 3705, 3705, 1544, 1544,
     3705, 3705, 3705, 3705, 3705, 3705, 1544, 1553, 1553, 1553,
     3705, 3705, 3705, 1553, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1553,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1553, 1556, 1556,
     1556, 1556, 3705, 3705, 1556, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 1556, 3705, 3705, 3705, 3705, 3705,
     1556, 3705, 3705, 3705, 3705, 3705, 3705, 1556, 1556, 1558,
     1558, 1558, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1558, 1558, 3705, 3705, 3705, 3705,
     3705, 1558, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1558,
     1565, 1565, 3705, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1567, 3705, 3705, 3705, 1567, 3705, 3705, 1567,
     1567, 3705, 3705, 3705, 1567, 1567, 1567, 3705, 1567, 1567,

     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1569, 1569, 3705, 1569, 1569, 1569,
     1569, 1569, 1569, 3705, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1584, 1584, 3705, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1588, 1588,
     3705, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,

     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1589, 1589, 3705, 1589, 1589, 3705, 1589, 1589, 1589, 3705,
     3705, 3705, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1590, 1590, 3705, 1590, 1590, 1590, 1590, 1590,
     1590, 3705, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1594, 1594, 3705, 1594, 1594, 3705,
     1594, 1594, 1594, 3705, 1594, 1594, 1594, 1594, 1594, 3705,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594,

     1594, 1594, 3705, 3705, 1594, 1594, 1595, 1595, 3705, 1595,
     1595, 1595, 1595, 1595, 1595, 3705, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1597, 1597,
     3705, 1597, 1597, 3705, 1597, 1597, 1597, 3705, 3705, 3705,
     1597, 1597, 1597, 3705, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1598, 1598, 3705, 1598, 1598, 1598, 1598, 1598, 1598, 3705,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,

     1598, 1598, 1600, 1600, 3705, 1600, 1600, 3705, 1600, 1600,
     1600, 3705, 1600, 1600, 1600, 1600, 1600, 3705, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     3705, 3705, 1600, 1600, 1601, 1601, 3705, 1601, 1601, 1601,
     1601, 1601, 1601, 3705, 1601, 1601, 1601, 1601, 1601, 1601,
     1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601,
     1601, 1601, 1601, 1601, 1601, 1601, 1611, 1611, 3705, 1611,
     1611, 1611, 1611, 1611, 1611, 3705, 1611, 1611, 1611, 1611,
     1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611,
     1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1621, 1621,

     3705, 1621, 1621, 3705, 1621, 1621, 1621, 3705, 1621, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1621, 3705, 1621, 1621, 1621, 1621, 1621, 1621,
     1624, 1624, 3705, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1625, 1625, 3705, 1625, 1625, 3705, 1625, 1625,
     1625, 3705, 3705, 3705, 1625, 1625, 1625, 3705, 1625, 1625,
     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1625, 1625, 1626, 1626, 3705, 1626, 1626, 1626,

     1626, 1626, 1626, 1626, 1626, 1626, 3705, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 3705, 1626, 1626, 3705,
     1626, 1626, 1626, 1626, 1626, 1626, 1634, 1634, 3705, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 3705, 1634,
     1634, 3705, 1634, 1634, 1634, 1634, 1634, 1634, 1650, 1650,
     1650, 3705, 3705, 3705, 1650, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1650, 1650, 3705, 3705, 3705, 3705, 3705, 3705, 1650, 1656,
     1656, 1656, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1656,

     3705, 1656, 3705, 3705, 1656, 3705, 3705, 3705, 3705, 3705,
     3705, 1656, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1656,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1657, 1657, 1661, 1661, 1661, 3705, 3705, 3705, 1661, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1661, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1661, 1665, 1665, 1665, 3705, 3705, 3705, 3705,
     3705, 3705, 1665, 3705, 3705, 3705, 3705, 3705, 1665, 3705,

     3705, 3705, 3705, 3705, 3705, 1665, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 1665, 1669, 3705, 3705, 3705, 3705, 3705,
     1669, 1669, 3705, 3705, 3705, 1669, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1669, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1669, 1675, 1675, 1675, 3705, 3705,
     3705, 1675, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1675, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1675, 1678, 1678, 1678, 1678,
     3705, 3705, 1678, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1678, 3705, 3705, 3705, 3705, 3705, 1678, 3705,

     3705, 3705, 3705, 3705, 3705, 1678, 1678, 1680, 1680, 1680,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1680, 1680, 3705, 3705, 3705, 3705, 3705, 1680,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1680, 1690, 1690,
     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1696, 1696, 3705, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 3705, 1696, 1696, 3705, 1696, 1696, 1696, 1696,
     1696, 1696, 3705, 1696, 1696, 3705, 1696, 1696, 1696, 1696,

     1696, 1696, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1720, 1720, 3705, 1720, 1720, 1720,
     1720, 3705, 1720, 1720, 1720, 1720, 3705, 1720, 1720, 3705,
     1720, 1720, 1720, 3705, 1720, 1720, 3705, 1720, 1720, 3705,
     3705, 1720, 1720, 1720, 1720, 1720, 1095, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1095, 3705, 3705, 3705, 3705,
     3705, 1095, 3705, 3705, 3705, 3705, 3705, 3705, 1095, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1095, 1116, 1116, 1116,

     3705, 3705, 3705, 1116, 3705, 3705, 3705, 3705, 3705, 3705,
     1116, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1116,
     3705, 3705, 3705, 3705, 3705, 3705, 1116, 1116, 1109, 1109,
     1109, 3705, 3705, 3705, 1109, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1109, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1109, 1734,
     1734, 1734, 3705, 3705, 3705, 3705, 3705, 3705, 1734, 3705,
     3705, 1734, 3705, 3705, 1734, 3705, 1734, 1734, 3705, 3705,
     3705, 1734, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1734,
     1122, 1122, 1122, 3705, 3705, 3705, 3705, 3705, 3705, 1122,

     3705, 3705, 1122, 1122, 3705, 1122, 1122, 1122, 1122, 3705,
     3705, 3705, 1122, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1122, 1737, 1737, 1737, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1737, 3705, 1737, 3705, 3705, 3705,
     3705, 3705, 3705, 1737, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1737, 1740, 1740, 1740, 3705, 3705, 3705, 1740, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1740, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1740, 1128, 1128, 1128, 3705, 3705, 3705, 1128,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 1128, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 1128, 1742, 1742, 1742, 3705, 3705, 3705,
     3705, 3705, 3705, 1742, 3705, 3705, 1742, 3705, 3705, 1742,
     3705, 1742, 1742, 3705, 3705, 3705, 1742, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1742, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 3705, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 3705, 1132, 1132, 1132, 1138, 1138, 1138,
     3705, 3705, 3705, 1138, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1138,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1138, 1744, 1744,
     1744, 3705, 3705, 3705, 3705, 3705, 3705, 1744, 3705, 3705,
     3705, 3705, 3705, 1744, 3705, 3705, 3705, 3705, 3705, 3705,
     1744, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1744, 1149,
     1149, 1149, 3705, 3705, 3705, 3705, 3705, 3705, 1149, 3705,
     3705, 3705, 3705, 3705, 1149, 1149, 3705, 3705, 3705, 3705,
     3705, 1149, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1149,
     1159, 3705, 3705, 3705, 1159, 3705, 1159, 3705, 3705, 1159,
     3705, 3705, 3705, 1159, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1159, 1162, 1162, 3705, 1162, 1162, 1162, 1162, 1162,

     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1178, 1178, 1178, 3705, 3705, 3705,
     1178, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1178, 3705, 3705, 3705,
     3705, 1178, 3705, 3705, 1178, 1763, 1763, 1763, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1763, 3705,
     1763, 1763, 3705, 3705, 3705, 3705, 3705, 1763, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1763, 1192, 1192, 1192, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1192,

     3705, 1192, 1192, 3705, 3705, 3705, 3705, 3705, 1192, 3705,
     1192, 3705, 3705, 3705, 3705, 3705, 1192, 1767, 1767, 1767,
     3705, 3705, 3705, 1767, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1767,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1767, 1776, 1776,
     3705, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776,
     1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776,
     1776, 1776, 1776, 3705, 1776, 1776, 1776, 1776, 1776, 1776,
     1778, 1778, 3705, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,

     1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
     1778, 1778, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1232, 1232, 1232, 3705, 3705, 3705,
     1232, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1232, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1232, 1818, 1818, 1818, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1818, 3705, 3705, 1818, 3705, 3705, 3705, 1818, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 1818, 1265, 1265, 1265, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1265, 1265, 3705, 1265, 3705, 3705, 3705, 1265, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1265, 1822, 1822, 3705,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1247,
     1247, 1247, 3705, 3705, 3705, 1247, 1247, 3705, 3705, 3705,
     1247, 3705, 3705, 3705, 3705, 1247, 3705, 3705, 3705, 3705,
     3705, 1247, 3705, 3705, 3705, 1247, 3705, 3705, 3705, 1247,

     1829, 1829, 1829, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1829, 1829, 3705, 3705, 3705, 1829, 1829, 3705, 1829, 3705,
     3705, 3705, 1829, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1829, 1847, 1847, 1847, 3705, 3705, 3705, 3705, 3705, 3705,
     1847, 3705, 3705, 3705, 1847, 3705, 1847, 3705, 3705, 3705,
     3705, 3705, 3705, 1847, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1847, 1301, 1301, 3705, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 3705, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1310, 1310, 1310, 3705, 3705, 3705,

     1310, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1310, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1310, 1904, 1904, 1904, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1904, 3705, 3705, 1904, 3705, 3705, 3705, 1904, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1904, 1316, 1316, 1316, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1316, 1316, 3705, 1316, 3705, 3705, 3705, 1316, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1316, 1356, 1356, 3705,
     3705, 1356, 3705, 3705, 1356, 1356, 3705, 1356, 1356, 1356,

     1356, 1356, 3705, 1356, 1356, 1356, 1356, 1356, 1356, 3705,
     1356, 1356, 1356, 1356, 1356, 3705, 3705, 1356, 1356, 1360,
     1360, 3705, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1938, 1938, 3705, 1938, 1938, 1938, 1938, 1938, 1938,
     1938, 1938, 1938, 1938, 1938, 1938, 1938, 1938, 1938, 1938,
     1938, 1938, 1938, 1938, 1938, 1938, 3705, 1938, 1938, 1938,
     1938, 1938, 1938, 1940, 1940, 3705, 1940, 1940, 1940, 1940,
     1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940,

     1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940,
     1940, 1940, 1940, 1940, 1940, 1945, 1945, 3705, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1372, 1372, 1372,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1372, 3705, 1372, 1372, 3705, 3705, 3705, 3705, 3705, 1372,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1372, 1950, 1950,
     1950, 3705, 3705, 3705, 1950, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     1950, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1950, 1379,
     1379, 1379, 3705, 3705, 3705, 1379, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1379, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1379,
     1384, 1384, 1384, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1384, 1384, 3705, 3705, 3705,
     3705, 3705, 1384, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1384, 1385, 1385, 3705, 1385, 1385, 3705, 3705, 1385, 1385,
     3705, 1385, 1385, 1385, 1385, 1385, 3705, 1385, 1385, 1385,
     1385, 1385, 1385, 3705, 1385, 1385, 3705, 1385, 1385, 3705,

     3705, 1385, 1385, 1954, 1954, 3705, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1954, 1954, 1954, 1954, 3705, 1954,
     1954, 1954, 1954, 1954, 1954, 1956, 1956, 3705, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1413, 1413, 3705,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 3705,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1426, 1426, 3705, 1426, 1426, 3705, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 3705, 1426, 3705, 1426, 1426,
     1426, 1426, 1426, 1429, 1429, 3705, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1439, 3705, 3705, 3705, 1439,

     1439, 1439, 1439, 1439, 1439, 1439, 1439, 3705, 1439, 3705,
     3705, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1449, 3705, 1449,
     3705, 3705, 3705, 3705, 3705, 3705, 1449, 3705, 1449, 3705,
     3705, 3705, 3705, 3705, 1449, 1453, 1453, 1453, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1453, 3705,
     1453, 3705, 3705, 3705, 3705, 3705, 3705, 1453, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1453, 1976, 1976, 1976, 3705,
     3705, 3705, 1976, 3705, 3705, 3705, 3705, 1976, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1976, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 1976, 1456, 1456, 1456,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1456, 3705, 3705, 3705, 3705, 3705, 3705, 1456,
     3705, 1456, 3705, 3705, 3705, 3705, 3705, 1456, 1454, 1454,
     1454, 3705, 3705, 3705, 1454, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1454, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1454, 1467,
     1467, 3705, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,

     1467, 1471, 3705, 3705, 3705, 1471, 3705, 3705, 3705, 3705,
     3705, 3705, 1471, 3705, 3705, 3705, 3705, 3705, 3705, 1471,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1471, 1476, 1476,
     3705, 1476, 1476, 3705, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 3705, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1491, 1491, 1491, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1491, 1491, 3705,
     3705, 3705, 3705, 3705, 1491, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1491, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 3705, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1507, 1507, 3705, 1507, 3705,
     3705, 3705, 1507, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1507, 2003, 3705, 3705, 3705, 3705, 3705, 3705, 2003, 3705,
     3705, 3705, 2003, 2003, 3705, 3705, 2003, 3705, 3705, 3705,
     3705, 2003, 3705, 2003, 2012, 2012, 3705, 2012, 2012, 2012,

     2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012,
     2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 3705,
     2012, 2012, 2012, 2012, 2012, 2012, 2014, 2014, 3705, 2014,
     2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014,
     2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014,
     2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 1533, 1533,
     1533, 3705, 3705, 3705, 1533, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1533, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1533, 1536,
     1536, 1536, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     1536, 3705, 3705, 3705, 1536, 3705, 3705, 3705, 3705, 3705,
     3705, 1536, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1536,
     1542, 1542, 1542, 3705, 3705, 3705, 1542, 1542, 3705, 3705,
     3705, 1542, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1542, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1542, 1544, 1544, 1544, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1544, 3705, 3705, 3705,
     3705, 3705, 3705, 1544, 1544, 3705, 3705, 3705, 3705, 3705,
     3705, 1544, 2022, 2022, 3705, 2022, 2022, 2022, 2022, 2022,
     2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,

     2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
     2022, 2022, 2022, 2022, 2027, 2027, 2027, 3705, 3705, 3705,
     2027, 3705, 3705, 3705, 3705, 2027, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 2027, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 2027, 1553, 1553, 1553, 3705, 3705,
     3705, 1553, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1553, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1553, 1558, 1558, 1558, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1558, 1558, 3705, 3705, 3705, 3705, 3705, 1558, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 1558, 1565, 1565, 3705,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1567,
     3705, 3705, 3705, 1567, 3705, 3705, 1567, 1567, 3705, 3705,
     3705, 1567, 1567, 1567, 3705, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 2033, 2033, 3705, 2033, 2033, 2033, 2033, 2033, 2033,
     2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033,
     2033, 2033, 2033, 2033, 2033, 2033, 3705, 2033, 2033, 2033,

     2033, 2033, 2033, 2035, 2035, 3705, 2035, 2035, 2035, 2035,
     2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035,
     2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035,
     2035, 2035, 2035, 2035, 2035, 1589, 1589, 3705, 1589, 1589,
     3705, 1589, 1589, 1589, 3705, 3705, 3705, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 2042, 2042, 3705,
     2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042,
     2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042, 2042,
     2042, 2042, 3705, 2042, 2042, 2042, 2042, 2042, 2042, 2044,

     2044, 3705, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044, 2044,
     2044, 1594, 1594, 3705, 1594, 1594, 3705, 1594, 1594, 1594,
     3705, 1594, 1594, 1594, 1594, 1594, 3705, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 3705,
     3705, 1594, 1594, 2046, 2046, 3705, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046,
     2046, 2046, 2046, 2046, 2046, 2046, 2046, 2046, 3705, 2046,
     2046, 2046, 2046, 2046, 2046, 2048, 2048, 3705, 2048, 2048,

     2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
     2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048, 2048,
     2048, 2048, 2048, 2048, 2048, 2048, 2048, 1597, 1597, 3705,
     1597, 1597, 3705, 1597, 1597, 1597, 3705, 3705, 3705, 1597,
     1597, 1597, 3705, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 2050,
     2050, 3705, 2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050,
     2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050, 2050,
     2050, 2050, 2050, 2050, 3705, 2050, 2050, 2050, 2050, 2050,
     2050, 2052, 2052, 3705, 2052, 2052, 2052, 2052, 2052, 2052,

     2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052,
     2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052, 2052,
     2052, 2052, 2052, 1600, 1600, 3705, 1600, 1600, 3705, 1600,
     1600, 1600, 3705, 1600, 1600, 1600, 1600, 1600, 3705, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 3705, 3705, 1600, 1600, 2054, 2054, 3705, 2054, 2054,
     2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054,
     2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054, 2054,
     3705, 2054, 2054, 2054, 2054, 2054, 2054, 2056, 2056, 3705,
     2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056,

     2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056,
     2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2056, 2062,
     2062, 3705, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 3705, 2062, 2062, 2062, 2062, 2062,
     2062, 2064, 2064, 3705, 2064, 2064, 2064, 2064, 2064, 2064,
     2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064,
     2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064,
     2064, 2064, 2064, 1621, 1621, 3705, 1621, 1621, 3705, 1621,
     1621, 1621, 3705, 1621, 1621, 1621, 1621, 1621, 1621, 1621,

     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 3705, 1621,
     1621, 1621, 1621, 1621, 1621, 1625, 1625, 3705, 1625, 1625,
     3705, 1625, 1625, 1625, 3705, 3705, 3705, 1625, 1625, 1625,
     3705, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1626, 1626, 3705,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 3705,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 3705,
     1626, 1626, 3705, 1626, 1626, 1626, 1626, 1626, 1626, 1634,
     1634, 3705, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,

     1634, 3705, 1634, 1634, 3705, 1634, 1634, 1634, 1634, 1634,
     1634, 1650, 1650, 1650, 3705, 3705, 3705, 1650, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 1650, 1650, 3705, 3705, 3705, 3705, 3705,
     3705, 1650, 2079, 2079, 2079, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 2079, 3705, 2079, 3705, 3705, 2079, 3705, 3705,
     3705, 3705, 3705, 3705, 2079, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 2079, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,

     1657, 1657, 1657, 1657, 1657, 1656, 1656, 1656, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1656, 3705, 1656, 3705, 3705,
     1656, 3705, 3705, 3705, 3705, 3705, 3705, 1656, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1656, 1661, 1661, 1661, 3705,
     3705, 3705, 1661, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1661, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1661, 2083, 2083, 2083,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 2083, 3705, 3705, 3705, 3705, 3705, 3705, 2083,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 2083, 1665, 1665,

     1665, 3705, 3705, 3705, 3705, 3705, 3705, 1665, 3705, 3705,
     3705, 3705, 3705, 1665, 3705, 3705, 3705, 3705, 3705, 3705,
     1665, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1665, 1675,
     1675, 1675, 3705, 3705, 3705, 1675, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1675, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1675,
     1680, 1680, 1680, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1680, 1680, 3705, 3705, 3705,
     3705, 3705, 1680, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1680, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,

     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1690, 1690, 1696, 1696, 3705, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 3705, 1696, 1696, 3705, 1696,
     1696, 1696, 1696, 1696, 1696, 3705, 1696, 1696, 3705, 1696,
     1696, 1696, 1696, 1696, 1696, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     3705, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1720, 1720, 3705,
     1720, 1720, 1720, 1720, 3705, 1720, 1720, 1720, 1720, 3705,

     1720, 1720, 3705, 1720, 1720, 1720, 3705, 1720, 1720, 3705,
     1720, 1720, 3705, 3705, 1720, 1720, 1720, 1720, 1720, 1734,
     1734, 1734, 3705, 3705, 3705, 3705, 3705, 3705, 1734, 3705,
     3705, 1734, 3705, 3705, 1734, 3705, 1734, 1734, 3705, 3705,
     3705, 1734, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1734,
     2115, 2115, 2115, 3705, 3705, 3705, 3705, 3705, 3705, 2115,
     3705, 3705, 2115, 3705, 3705, 2115, 2115, 2115, 2115, 3705,
     3705, 3705, 2115, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     2115, 1737, 1737, 1737, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1737, 3705, 1737, 3705, 3705, 3705,

     3705, 3705, 3705, 1737, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1737, 1740, 1740, 1740, 3705, 3705, 3705, 1740, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1740, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1740, 1735, 1735, 1735, 1735, 3705, 3705, 1735,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1735,
     3705, 3705, 3705, 3705, 3705, 1735, 3705, 3705, 3705, 3705,
     3705, 3705, 1735, 1735, 1742, 1742, 1742, 3705, 3705, 3705,
     3705, 3705, 3705, 1742, 3705, 3705, 1742, 3705, 3705, 1742,
     3705, 1742, 1742, 3705, 3705, 3705, 1742, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 1742, 1744, 1744, 1744, 3705, 3705,
     3705, 3705, 3705, 3705, 1744, 3705, 3705, 3705, 3705, 3705,
     1744, 3705, 3705, 3705, 3705, 3705, 3705, 1744, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1744, 2117, 2117, 2117, 3705,
     3705, 3705, 3705, 3705, 3705, 2117, 3705, 3705, 3705, 3705,
     3705, 2117, 2117, 3705, 3705, 3705, 3705, 3705, 2117, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 2117, 2118, 2118, 2118,
     2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 3705,
     2118, 2118, 3705, 2118, 2118, 2118, 2118, 2118, 2118, 2118,
     2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2120,

     2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120,
     2120, 2120, 2120, 2120, 3705, 2120, 2120, 2120, 2120, 2120,
     2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120, 2120,
     2120, 1745, 1745, 1745, 1745, 3705, 3705, 1745, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1745, 3705, 3705,
     3705, 3705, 3705, 1745, 3705, 3705, 3705, 3705, 3705, 3705,
     1745, 1745, 1149, 1149, 1149, 3705, 3705, 3705, 3705, 3705,
     3705, 1149, 3705, 3705, 3705, 3705, 3705, 1149, 1149, 3705,
     3705, 3705, 3705, 3705, 1149, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1149, 1159, 3705, 3705, 3705, 1159, 3705, 1159,

     3705, 3705, 1159, 3705, 3705, 3705, 1159, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1159, 2134, 2134, 2134, 2134, 3705,
     3705, 2134, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 2134, 3705, 3705, 3705, 3705, 3705, 2134, 3705, 3705,
     3705, 3705, 3705, 3705, 2134, 2134, 1763, 1763, 1763, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1763,
     3705, 1763, 1763, 3705, 3705, 3705, 3705, 3705, 1763, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1763, 1767, 1767, 1767,
     3705, 3705, 3705, 1767, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1767,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1767, 2136, 2136,
     2136, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 2136, 2136, 3705, 3705, 3705, 3705, 3705,
     2136, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2136, 2143,
     2143, 3705, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2143, 2143, 2143, 3705, 2143, 2143, 2143, 2143, 2143,
     2143, 1239, 1239, 1239, 1239, 3705, 3705, 1239, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1239, 3705, 3705,
     3705, 3705, 3705, 1239, 3705, 3705, 3705, 3705, 3705, 3705,

     1239, 1239, 1818, 1818, 1818, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1818, 3705, 3705,
     1818, 3705, 3705, 3705, 1818, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1818, 1822, 1822, 3705, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 2195, 2195, 2195, 3705, 3705,
     3705, 2195, 2195, 3705, 3705, 3705, 2195, 3705, 3705, 3705,
     3705, 2195, 3705, 3705, 3705, 3705, 3705, 2195, 3705, 3705,
     3705, 2195, 3705, 3705, 3705, 2195, 2198, 2198, 2198, 3705,

     3705, 3705, 2198, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 2198, 3705, 3705, 3705, 3705, 3705, 2198, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 2198, 2204, 2204, 2204,
     3705, 3705, 3705, 2204, 3705, 3705, 3705, 2204, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2204,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 2204, 1829, 1829,
     1829, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1829, 1829,
     3705, 3705, 3705, 1829, 1829, 3705, 1829, 3705, 3705, 3705,
     1829, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1829, 2206,
     3705, 3705, 3705, 3705, 3705, 3705, 2206, 3705, 3705, 3705,

     2206, 2206, 3705, 3705, 2206, 3705, 3705, 3705, 3705, 2206,
     3705, 2206, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
     2208, 2208, 2208, 2208, 3705, 2208, 2208, 3705, 2208, 2208,
     2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208,
     2208, 2208, 2208, 2208, 2214, 2214, 2214, 2214, 2214, 2214,
     2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 3705,
     2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214,
     2214, 2214, 2214, 2214, 2214, 2214, 1847, 1847, 1847, 3705,
     3705, 3705, 3705, 3705, 3705, 1847, 3705, 3705, 3705, 1847,
     3705, 1847, 3705, 3705, 3705, 3705, 3705, 3705, 1847, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 1847, 1265, 1265, 1265,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1265, 1265, 3705, 1265, 3705, 3705, 3705, 1265,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1265, 1904, 1904,
     1904, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 1904, 3705, 3705, 1904, 3705, 3705, 3705,
     1904, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1904, 1313,
     1313, 1313, 1313, 3705, 3705, 1313, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1313, 3705, 3705, 3705, 3705,
     3705, 1313, 3705, 3705, 3705, 3705, 3705, 3705, 1313, 1313,

     2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298,
     2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298,
     2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298,
     2298, 2298, 1360, 1360, 3705, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 2301, 2301, 3705, 2301, 2301, 2301,
     2301, 2301, 2301, 2301, 2301, 2301, 2301, 2301, 2301, 2301,
     2301, 2301, 2301, 2301, 2301, 2301, 2301, 2301, 2301, 3705,
     2301, 2301, 2301, 2301, 2301, 2301, 1945, 1945, 3705, 1945,

     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1950, 1950,
     1950, 3705, 3705, 3705, 1950, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1950, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1950, 2307,
     2307, 2307, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 2307, 3705, 2307, 2307, 3705, 3705, 3705, 3705,
     3705, 2307, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2307,
     1372, 1372, 1372, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 1372, 3705, 1372, 1372, 3705, 3705, 3705,
     3705, 3705, 1372, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1372, 1382, 1382, 1382, 1382, 3705, 3705, 1382, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1382, 3705, 3705,
     3705, 3705, 3705, 1382, 3705, 3705, 3705, 3705, 3705, 3705,
     1382, 1382, 2309, 2309, 3705, 2309, 2309, 2309, 2309, 2309,
     2309, 2309, 2309, 2309, 2309, 2309, 2309, 2309, 2309, 2309,
     2309, 2309, 2309, 2309, 2309, 2309, 2309, 3705, 2309, 2309,
     2309, 2309, 2309, 2309, 1439, 3705, 3705, 3705, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 3705, 1439, 3705, 3705,

     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 2321, 3705, 2321, 3705,
     3705, 3705, 3705, 3705, 3705, 2321, 3705, 2321, 3705, 3705,
     3705, 3705, 3705, 2321, 1976, 1976, 1976, 3705, 3705, 3705,
     1976, 3705, 3705, 3705, 3705, 1976, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1976, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1976, 2322, 2322, 2322, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2322, 3705,
     2322, 3705, 3705, 3705, 3705, 3705, 3705, 2322, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 2322, 1454, 1454, 1454, 3705,

     3705, 3705, 1454, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1454, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1454, 2003, 3705, 3705,
     3705, 3705, 3705, 3705, 2003, 3705, 3705, 3705, 2003, 2003,
     3705, 3705, 2003, 3705, 3705, 3705, 3705, 2003, 3705, 2003,
     1507, 1507, 3705, 1507, 3705, 3705, 3705, 1507, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1507, 2345, 2345, 3705, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2345, 3705, 2345, 2345, 2345, 2345, 2345, 2345, 2022, 2022,

     3705, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
     2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
     2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,
     2027, 2027, 2027, 3705, 3705, 3705, 2027, 3705, 3705, 3705,
     3705, 2027, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 2027, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     2027, 2350, 2350, 2350, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 2350, 2350, 3705, 3705,
     3705, 3705, 3705, 2350, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 2350, 1556, 1556, 1556, 1556, 3705, 3705, 1556, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1556, 3705,
     3705, 3705, 3705, 3705, 1556, 3705, 3705, 3705, 3705, 3705,
     3705, 1556, 1556, 2352, 2352, 3705, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 3705, 2352,
     2352, 2352, 2352, 2352, 2352, 2359, 2359, 3705, 2359, 2359,
     2359, 2359, 2359, 2359, 2359, 2359, 2359, 2359, 2359, 2359,
     2359, 2359, 2359, 2359, 2359, 2359, 2359, 2359, 2359, 2359,
     3705, 2359, 2359, 2359, 2359, 2359, 2359, 2362, 2362, 3705,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,

     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 3705, 2362, 2362, 2362, 2362, 2362, 2362, 2365,
     2365, 3705, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
     2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
     2365, 2365, 2365, 2365, 3705, 2365, 2365, 2365, 2365, 2365,
     2365, 2368, 2368, 3705, 2368, 2368, 2368, 2368, 2368, 2368,
     2368, 2368, 2368, 2368, 2368, 2368, 2368, 2368, 2368, 2368,
     2368, 2368, 2368, 2368, 2368, 2368, 3705, 2368, 2368, 2368,
     2368, 2368, 2368, 1600, 1600, 3705, 1600, 1600, 3705, 1600,
     1600, 1600, 3705, 1600, 1600, 1600, 1600, 1600, 3705, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 3705, 3705, 1600, 1600, 2374, 2374, 3705, 2374, 2374,
     2374, 2374, 2374, 2374, 2374, 2374, 2374, 2374, 2374, 2374,
     2374, 2374, 2374, 2374, 2374, 2374, 2374, 2374, 2374, 2374,
     3705, 2374, 2374, 2374, 2374, 2374, 2374, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 3705, 2387, 2387, 2387, 2387, 2387, 2387,
     3705, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2387, 2079,
     2079, 2079, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2079,
     3705, 2079, 3705, 3705, 2079, 3705, 3705, 3705, 3705, 3705,

     3705, 2079, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2079,
     2083, 2083, 2083, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 2083, 3705, 3705, 3705, 3705,
     3705, 3705, 2083, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     2083, 1678, 1678, 1678, 1678, 3705, 3705, 1678, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1678, 3705, 3705,
     3705, 3705, 3705, 1678, 3705, 3705, 3705, 3705, 3705, 3705,
     1678, 1678, 1696, 1696, 3705, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 3705, 1696, 1696, 3705, 1696, 1696,
     1696, 1696, 1696, 1696, 3705, 1696, 1696, 3705, 1696, 1696,

     1696, 1696, 1696, 1696, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 3705,
     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1717, 2115, 2115, 2115, 3705,
     3705, 3705, 3705, 3705, 3705, 2115, 3705, 3705, 2115, 3705,
     3705, 2115, 2115, 2115, 2115, 3705, 3705, 3705, 2115, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 2115, 2117, 2117, 2117,
     3705, 3705, 3705, 3705, 3705, 3705, 2117, 3705, 3705, 3705,
     3705, 3705, 2117, 2117, 3705, 3705, 3705, 3705, 3705, 2117,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 2117, 1149, 1149,

     1149, 3705, 3705, 3705, 3705, 3705, 3705, 1149, 3705, 3705,
     3705, 3705, 3705, 1149, 1149, 3705, 3705, 3705, 3705, 3705,
     1149, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1149, 1159,
     3705, 3705, 3705, 1159, 3705, 1159, 3705, 3705, 1159, 3705,
     3705, 3705, 1159, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1159, 2134, 2134, 2134, 2134, 3705, 3705, 2134, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 2134, 3705, 3705,
     3705, 3705, 3705, 2134, 3705, 3705, 3705, 3705, 3705, 3705,
     2134, 2134, 2416, 2416, 2416, 3705, 3705, 3705, 2416, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 2416, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 2416, 2420, 2420, 2420, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2420, 2420,
     3705, 3705, 3705, 3705, 3705, 2420, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 2420, 1763, 1763, 1763, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1763, 3705, 1763,
     1763, 3705, 3705, 3705, 3705, 3705, 1763, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1763, 2136, 2136, 2136, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     2136, 2136, 3705, 3705, 3705, 3705, 3705, 2136, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 2136, 1767, 1767, 1767, 3705,
     3705, 3705, 1767, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1767, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 1767, 2426, 2426, 3705,
     2426, 2426, 2426, 2426, 2426, 2426, 2426, 2426, 2426, 2426,
     2426, 2426, 2426, 2426, 2426, 2426, 2426, 2426, 2426, 2426,
     2426, 2426, 3705, 2426, 2426, 2426, 2426, 2426, 2426, 2195,
     2195, 2195, 3705, 3705, 3705, 2195, 2195, 3705, 3705, 3705,
     2195, 3705, 3705, 3705, 3705, 2195, 3705, 3705, 3705, 3705,
     3705, 2195, 3705, 3705, 3705, 2195, 3705, 3705, 3705, 2195,

     2478, 2478, 2478, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 2478, 2478, 3705, 2478, 3705,
     3705, 3705, 2478, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     2478, 2198, 2198, 2198, 3705, 3705, 3705, 2198, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 2198, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 2198, 2482, 2482, 2482, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 2482, 3705, 3705, 3705, 3705, 2482, 2482, 3705,
     2482, 3705, 3705, 3705, 2482, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 2482, 2204, 2204, 2204, 3705, 3705, 3705, 2204,

     3705, 3705, 3705, 2204, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 2204, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 2204, 2485, 3705, 3705, 3705, 2485, 3705,
     3705, 3705, 3705, 2485, 3705, 3705, 3705, 3705, 3705, 3705,
     2485, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2485, 2206,
     3705, 3705, 3705, 3705, 3705, 3705, 2206, 3705, 3705, 3705,
     2206, 2206, 3705, 3705, 2206, 3705, 3705, 3705, 3705, 2206,
     3705, 2206, 2486, 2486, 3705, 2486, 2486, 2486, 2486, 2486,
     2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486,
     2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486,

     2486, 2486, 2486, 2486, 2488, 2488, 3705, 2488, 2488, 2488,
     2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488,
     2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488,
     2488, 2488, 2488, 2488, 2488, 2488, 2491, 2491, 2491, 3705,
     3705, 3705, 3705, 3705, 3705, 2491, 3705, 3705, 3705, 2491,
     3705, 2491, 3705, 3705, 3705, 3705, 3705, 3705, 2491, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 2491, 1847, 1847, 1847,
     3705, 3705, 3705, 3705, 3705, 3705, 1847, 3705, 3705, 3705,
     1847, 3705, 1847, 3705, 3705, 3705, 3705, 3705, 3705, 1847,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1847, 1265, 1265,

     1265, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 1265, 1265, 3705, 1265, 3705, 3705, 3705,
     1265, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1265, 2298,
     2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298,
     2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298,
     2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298,
     2298, 1360, 1360, 3705, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 2570, 2570, 3705, 2570, 2570, 2570, 2570,

     2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570,
     2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570, 3705, 2570,
     2570, 2570, 2570, 2570, 2570, 2573, 2573, 2573, 2573, 2573,
     2573, 2573, 2573, 2573, 2573, 2573, 2573, 2573, 2573, 2573,
     2573, 3705, 2573, 2573, 2573, 2573, 2573, 2573, 3705, 2573,
     2573, 2573, 2573, 2573, 2573, 2573, 2573, 2307, 2307, 2307,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     2307, 3705, 2307, 2307, 3705, 3705, 3705, 3705, 3705, 2307,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 2307, 1372, 1372,
     1372, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 1372, 3705, 1372, 1372, 3705, 3705, 3705, 3705, 3705,
     1372, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1372, 2575,
     2575, 3705, 2575, 2575, 2575, 2575, 2575, 2575, 2575, 2575,
     2575, 2575, 2575, 2575, 2575, 2575, 2575, 2575, 2575, 2575,
     2575, 2575, 2575, 2575, 3705, 2575, 2575, 2575, 2575, 2575,
     2575, 1439, 3705, 3705, 3705, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 3705, 1439, 3705, 3705, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 2321, 3705, 2321, 3705, 3705, 3705, 3705,
     3705, 3705, 2321, 3705, 2321, 3705, 3705, 3705, 3705, 3705,

     2321, 2322, 2322, 2322, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 2322, 3705, 2322, 3705, 3705, 3705,
     3705, 3705, 3705, 2322, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 2322, 1507, 1507, 3705, 1507, 3705, 3705, 3705, 1507,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1507, 2602, 2602,
     3705, 2602, 2602, 2602, 2602, 2602, 2602, 2602, 2602, 2602,
     2602, 2602, 2602, 2602, 2602, 2602, 2602, 2602, 2602, 2602,
     2602, 2602, 2602, 3705, 2602, 2602, 2602, 2602, 2602, 2602,
     2350, 2350, 2350, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 2350, 2350, 3705, 3705, 3705,

     3705, 3705, 2350, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     2350, 2605, 2605, 3705, 2605, 2605, 2605, 2605, 2605, 2605,
     2605, 2605, 2605, 2605, 2605, 2605, 2605, 2605, 2605, 2605,
     2605, 2605, 2605, 2605, 2605, 2605, 3705, 2605, 2605, 2605,
     2605, 2605, 2605, 2608, 2608, 3705, 2608, 2608, 2608, 2608,
     2608, 2608, 2608, 2608, 2608, 2608, 2608, 2608, 2608, 2608,
     2608, 2608, 2608, 2608, 2608, 2608, 2608, 2608, 3705, 2608,
     2608, 2608, 2608, 2608, 2608, 2610, 2610, 3705, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,

     3705, 2610, 2610, 2610, 2610, 2610, 2610, 2612, 2612, 3705,
     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 3705, 2612, 2612, 2612, 2612, 2612, 2612, 2614,
     2614, 3705, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614,
     2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614,
     2614, 2614, 2614, 2614, 3705, 2614, 2614, 2614, 2614, 2614,
     2614, 1600, 1600, 3705, 1600, 1600, 1600, 1600, 1600, 1600,
     3705, 1600, 1600, 1600, 1600, 1600, 3705, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 3705,

     3705, 1600, 1600, 2618, 2618, 3705, 2618, 2618, 2618, 2618,
     2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618,
     2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 3705, 2618,
     2618, 2618, 2618, 2618, 2618, 2622, 2622, 2622, 2622, 2622,
     2622, 2622, 2622, 2622, 2622, 2622, 2622, 2622, 2622, 2622,
     2622, 3705, 2622, 2622, 2622, 2622, 2622, 2622, 3705, 2622,
     2622, 2622, 2622, 2622, 2622, 2622, 2622, 1669, 3705, 3705,
     3705, 3705, 3705, 1669, 1669, 3705, 3705, 3705, 1669, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1669,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1669, 1696, 1696,

     3705, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     3705, 1696, 1696, 3705, 1696, 1696, 1696, 1696, 1696, 1696,
     3705, 1696, 1696, 3705, 1696, 1696, 1696, 1696, 1696, 1696,
     2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643, 2643,
     2643, 2643, 2643, 2643, 2643, 2643, 3705, 2643, 2643, 2643,
     2643, 2643, 2643, 3705, 2643, 2643, 2643, 2643, 2643, 2643,
     2643, 2643, 1149, 1149, 1149, 3705, 3705, 3705, 3705, 3705,
     3705, 1149, 3705, 3705, 3705, 3705, 3705, 1149, 1149, 3705,
     3705, 3705, 3705, 3705, 1149, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 1149, 1159, 3705, 3705, 3705, 1159, 3705, 1159,

     3705, 3705, 1159, 3705, 3705, 3705, 1159, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1159, 2416, 2416, 2416, 3705, 3705,
     3705, 2416, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 2416, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 2416, 2420, 2420, 2420, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 2420, 2420, 3705, 3705, 3705, 3705, 3705, 2420, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 2420, 1763, 1763, 1763,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1763, 3705, 1763, 1763, 3705, 3705, 3705, 3705, 3705, 1763,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1763, 2195, 2195,
     2195, 3705, 3705, 3705, 2195, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 2195, 3705, 3705, 3705, 3705, 3705,
     2195, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2195, 2478,
     2478, 2478, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 2478, 2478, 3705, 2478, 3705, 3705,
     3705, 2478, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2478,
     2714, 3705, 3705, 3705, 3705, 3705, 3705, 2714, 3705, 3705,
     3705, 2714, 2714, 3705, 3705, 2714, 3705, 3705, 3705, 3705,
     2714, 3705, 2714, 2482, 2482, 2482, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 2482, 3705, 3705, 3705, 3705, 2482, 2482,
     3705, 2482, 3705, 3705, 3705, 2482, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 2482, 2485, 3705, 3705, 3705, 2485, 3705,
     3705, 3705, 3705, 2485, 3705, 3705, 3705, 3705, 3705, 3705,
     2485, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2485, 2486,
     2486, 3705, 2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486,
     2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486,
     2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486, 2486,
     2486, 2488, 2488, 3705, 2488, 2488, 2488, 2488, 2488, 2488,
     2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488,

     2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488, 2488,
     2488, 2488, 2488, 2491, 2491, 2491, 3705, 3705, 3705, 3705,
     3705, 3705, 2491, 3705, 3705, 3705, 2491, 3705, 2491, 3705,
     3705, 3705, 3705, 3705, 3705, 2491, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 2491, 1847, 1847, 1847, 3705, 3705, 3705,
     3705, 3705, 3705, 1847, 3705, 3705, 3705, 1847, 3705, 1847,
     3705, 3705, 3705, 3705, 3705, 3705, 1847, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1847, 1265, 1265, 1265, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     1265, 1265, 3705, 1265, 3705, 3705, 3705, 1265, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 1265, 1360, 1360, 3705, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1372, 1372,
     1372, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 1372, 3705, 1372, 1372, 3705, 3705, 3705, 3705, 3705,
     1372, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1372, 1433,
     1433, 1433, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 1433, 3705, 3705, 3705, 3705, 3705,
     3705, 1433, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1433,

     1439, 3705, 3705, 3705, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 3705, 1439, 3705, 3705, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1507, 1507, 3705, 1507, 3705, 3705, 3705, 1507,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 1507, 2027, 2027,
     2027, 3705, 3705, 3705, 2027, 3705, 3705, 3705, 3705, 2027,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     2027, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2027, 2814,
     2814, 3705, 2814, 2814, 3705, 2814, 2814, 2814, 2814, 2814,
     2814, 2814, 2814, 2814, 2814, 2814, 2814, 2814, 2814, 2814,

     2814, 2814, 2814, 2814, 2814, 2814, 2814, 2814, 2814, 2814,
     2814, 1696, 1696, 3705, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 3705, 1696, 1696, 3705, 1696, 1696, 1696,
     1696, 1696, 1696, 3705, 1696, 1696, 3705, 1696, 1696, 1696,
     1696, 1696, 1696, 1149, 1149, 1149, 3705, 3705, 3705, 3705,
     3705, 3705, 1149, 3705, 3705, 3705, 3705, 3705, 1149, 1149,
     3705, 3705, 3705, 3705, 3705, 1149, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 1149, 2134, 2134, 2134, 2134, 3705, 3705,
     2134, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     2134, 3705, 3705, 3705, 3705, 3705, 2134, 3705, 3705, 3705,

     3705, 3705, 3705, 2134, 2134, 1763, 1763, 1763, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 1763, 3705,
     1763, 1763, 3705, 3705, 3705, 3705, 3705, 1763, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 1763, 2195, 2195, 2195, 3705,
     3705, 3705, 2195, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 2195, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 2195, 3173, 3173, 3173,
     3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173,
     3173, 3173, 3173, 3705, 3173, 3173, 3173, 3173, 3173, 3173,
     3705, 3173, 3173, 3173, 3173, 3173, 3173, 3173, 3173, 3351,

     3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3351, 3351, 3351, 3351, 3705, 3351, 3351, 3351, 3351,
     3351, 3351, 3705, 3351, 3351, 3351, 3351, 3351, 3351, 3351,
     3351, 3478, 3478, 3478, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3478, 3705, 3705, 3705,
     3478, 3705, 3705, 3478, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3478,  253, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705
    } ;

static yyconst flex_int16_t yy_chk[28648] =
    {   0,
        0,    0,    1,    0,    2,    0,    1,    1,    2,    2,
      391,    1,    0,    2,  391,  259,  269,  269,    0,    1,
      259,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
      268,    5,    5,  390,  390,  268,    5,    6,    6,    6,
        6,   19,    6,    6,    5,   19,   19,    6,  290,  656,
       19,   19,   19,  290,  279,    6,   33,  279,   19,  303,
       33,   33,  554,  554,  303,   33,   19,   83,   19,  321,
       33,   83,   83,   33,  321,  261,   83,    5,  261,  325,
       33,  675,  325,  656,   83,  675,  261, 2390,    6,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   15,  433,   16,  331,   15,
       15,   16,   16,  331,   15,  743,   16,  282,  282,  282,
      282,   20,   15,  340,   16,   20,   20,  308,  340,  743,
       20,   20,   20,  308,   43,   43,   43,   43,   20,   43,
       43,  282,  308, 1242,   43,  348,   20, 1242,   20,  433,
      348,  749,   43,  749,   15, 2391,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   23,  496,   24,  368,   23,
       23,   24,   24,  368,   23,  496,   24,  288,  288,  288,
      288,   34,   23,   37,   24,   34,   34,   37,   37, 1072,
       34,  361,   37,  369,  361,   34,  369,   84,   34,  382,
       37,   84,   84, 1072,  382,   34,   84, 1506,   37, 1506,
      273,  273,  273,  273,   84, 1072,   23,  273,   24,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   29,   29,   29,
       29,  396,   29,   29,  573,  573,  396,   29,   30,   30,
       30,   30,  432,   30,   30,   29,  309,  432,   30,   31,
      447,  400,  309,   31,   31,  447,   30, 1501,   31,   31,
       32,  309,  400,   31,   32,   32,   31,  452,  388,   32,
       32,  388,  452,   31,   32, 1501,   38,   32,   49,  526,

       38,   38,   49,   49,   32,   38,  467,   49,   49,   49,
      653,  467,  653,   38,   50,   49,   29,  309,   50,   50,
     1226,   38,   29,   50,   50,   50,  519,   30,  653,  519,
     1226,   50, 2094,   30,   44,   44,   44,   44,  474,   44,
       44,  578,  578,  474,   44,  388,  388,   31,  280,  280,
      280,  280,   44,  526,  542,  280, 2094,  542,   32,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   45, 2392,   46,  480,   45,   45,   46,   46,  480,
       45,   45,   46,   46,  487,   45,  504,   46,   45,  487,
       46,  504,  993,  993,   45,   45,   46,   46,   47,   47,
       47,   47,  511,   47,   47, 1098,  521,  511,   47,   47,
       47,  521,  550,   47, 1098,  550,   47,   48,   48,   48,
       48,   51,   48,   48,  978,   51,   51,   48,   48,   48,
       51,  580,   48,  539,  580,   48,  539,   52,   51,  539,
      978,   52,   52,   55,  580,   51,   52,   55,   55,   45,
      586,   46,   55,   55,   52,  263,  263,  263,  263,  544,

       55,   52,  588, 1990,  544,   56,  553,   55,   55,   56,
       56,  553,  562,  263,   56,   56, 1990,  562,   85,   85,
      568,   85,   56,   85,   85,  568, 1087, 1087,   85,   56,
       56,   85,   86,   86, 1143,   86,   85,   86,   86,   51,
      586,  713,   86, 1143,  713,   86,  284,  284,  284,  284,
       86,  734,  588,  284,  734,   52,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       57,  577, 1153,   58,   57,   57,  577,   58,   58,   57,
     1099, 1153,   58,   59,   59,   59,   59,   57,   59,   59,
       58,  585,  746,   59, 1099,  746,  585,   60,   60,   60,
       60,   59,   60,   60,  589, 1400, 1400,   60,  264,  264,
      264,  264, 2178,   59,  549,   60, 2178,  549,  603,   57,
      549,   57,   58,  603,   58,  590,  264,   60,   61,   61,

       61,   61,  615,   61,   61, 1410, 1410,  615,   61,   62,
       62,   62,   62,  592,   62,   62,   61, 1412, 1412,   62,
       63,   63,   63,   63,  589,   63,   63,   62,   61,  623,
       63,   73,   59,   59,  623,   73,   73, 2393,   63,   62,
       73,  271,  271,  271,  271,  590,   60,   60,   73, 2395,
       63,   64,   64,   64,   64,   75,   64,   64,  271,   75,
       75,   64, 2396,  592,   75,  271,  634,   75,  591,   64,
       76,  634,   75,  905,   76,   76,  905,   61,   61,   76,
      591,   64,   76, 1336, 2400,  591,   91,   76,   62,   62,
       91,   91, 1336,  642, 1154,   91,   91,   91,  642,   63,

       63, 2402,   92,   91,  652,   75,   92,   92, 1154,  652,
       73,   92,   92,   92,  387,  387,  387,  387,  591,   92,
       76,  387,  393,  393,  393,  393,  466,  466,  466,  466,
       64,   64,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       69,   69,  672,   69,  685,   69,   69,  672,  687,  685,
       69,   70,   70,  687,   70,  692,   70,   70,   69,  701,
      692,   70,   71,   71,  701,   71,  710,   71,   71,   70,
       69,  710,   71,   74,  723, 1574, 2403,   74,   74,  723,
       71,   70,   74,  735,  272,  272,  272,  272,  735, 1574,
       74,   69,   71,   72,   72, 1447,   72, 1339,   72,   72,
       77,  272,   70,   72,   77,   77, 1339, 1515,  272,   77,
      773,   72,   77,   71, 2404,  773,  793,   77, 2405,   69,
       69,  793, 1515,   72,  281,  281,  281,  281,   78, 1447,
       70,   70,   78,   78,   79, 1787, 1787,   78,   79,   79,

       78,   71,   71,   79,   72,   78,  979, 2406,  281,  979,
       77,   79,   74,  358,  358,  358,  358,   80,   79,  979,
       87,   80,   80,   79,   87,   87,   80, 1106, 1125,   87,
     1106, 1125,   72,   72,   80,   81,   81,   87,   78,   81,
       81,   80,  805,  750,   81,  750,   80,  805, 1390,   82,
       82,   88,   81,   82,   82,   88,   88, 1390,   82,  785,
       88, 1419,  785,  281,  785,  751,   82,  751,   88,   89,
       87,   90,   79,   89,   89,   90,   90, 2422,   89,  443,
       90, 1042,  443, 1731, 1042,   81,   89,  750,   90,   99,
     2423,  816,  358,   99,   99,   80,  816, 1731,   99,   82,

     1042,   88,   93,   93,   93,   93,   99,   93,   93,  751,
     2424, 1419,   93,   94,   94,   94,   94,   95,   94,   94,
       93,   95,   95,   94,  825, 1218,   95,  837,   93,  825,
       93,   94,  837, 1218,   95, 1218,  443,  443,   99,   94,
       99,   94,   95, 1065,   95, 2425, 1065,   89,   89,   90,
       90,   96, 2426,   97,  846,   96,   96,   97,   97,  846,
       96,  859,   97,   97,   97,  403,  859, 1781,   96, 1065,
       97,  488,  488,  488,  488,   98,   96,  869,   96,   98,
       98, 1781,  869,  880,   98,   98,   98, 1421,  880,  100,
      488,  101,   98,  100,  100,  101,  101, 1507,  100, 1507,

      101,  283,  283,  283,  283,  102,  100,  121,  101,  102,
      102,  121,  121, 2427,  102,  403,  121,  374,  374,  374,
      374,  403,  102,  886,  121,  283,  403,  403,  886,  403,
     1170,  896,  121, 1170,  902,  374,  896, 1421,  100,  902,
      100,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  105, 1222,  106,  914,  105,
      105,  106,  106,  914,  105, 1222,  106,  459,  459,  459,
      459, 1222,  105, 1795,  106,  107,  107,  107,  107,  923,
      107,  107,  459, 1795,  923,  107,  108,  108,  108,  108,
      933,  108,  108,  107, 1449,  933,  108,  109,  109,  109,
      109,  943,  109,  109,  108, 2432,  943,  109,  123, 1422,
      109,  953,  123,  123,  109,  109,  953,  123, 1756,  960,
      294,  294,  294,  294,  960,  123, 1756,  109, 1449,  968,

     2433,  294,  107,  105,  968,  106,  110,  110,  110,  110,
      977,  110,  110,  108,  294,  977,  110,  122,  109,  110,
      986,  122,  122,  110,  110,  986,  122,  907,  124, 1422,
      907, 2434,  124,  124,  122,  131,  110,  124,  907,  131,
      131, 2435,  122, 2436,  131,  124,  436,  436,  436,  436,
      992,  998,  131,  436, 2437,  992,  998,  110,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  119, 1473,  120, 1008,  119,  119,

      120,  120, 1008,  119, 1473,  120,  375,  375,  375,  375,
      127,  119,  128,  120,  127,  127,  128,  128, 1021,  127,
     1033,  128, 2319, 1021,  375, 1033,  132,  127,  135,  128,
      132,  132,  135,  135,  127,  132,  128,  135, 1180,  135,
     2319, 1180,  136,  132, 1041,  135,  136,  136,  119, 1041,
      120,  136, 1052,  136,  119, 1197,  120, 1052, 1197,  136,
      516,  516,  516,  516,  119,  119,  120,  120,  517,  517,
      517,  517,  119,  119,  120,  120,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  139, 1057, 2438,  140,  139,  139, 1057,  140,
      140,  139, 1037,  139,  140, 1037,  140, 2439, 1059,  139,
      141, 1059,  140,  142,  141,  141,  145,  142,  142,  141,
      145,  145,  142, 1070, 2440,  145, 1059,  141, 1070, 1037,
      142, 1071, 1423,  145, 2441,  141, 1071,  146,  142,  143,
      145,  146,  146,  143,  143, 2442,  146, 1076,  143, 2443,
      143, 1783, 1076,  151,  146, 1077,  143,  151,  151, 1037,
     1077,  146,  151,  161,  151, 1783, 1085,  161,  161, 1972,
      151, 1085,  161,  161,  162, 1063, 1097, 1037,  162,  162,

      161, 1097, 1423,  162,  162,  163,  151, 1063, 2444,  163,
      163,  162, 1063,  143,  163,  143,  163,  151,  151,  143,
      151, 1198,  163, 1972, 1144,  143, 1198, 1144, 1144,  143,
      143, 2445,  152, 1204,  143,  144,  152,  152, 1204,  144,
      144,  152, 1144,  152,  144, 1088,  144, 1156, 1088,  152,
      164, 1206,  144, 1156,  164,  164, 1206, 1159, 1088,  164,
     1959,  164, 1156, 1159,  167,  152,  168,  164,  167,  167,
      168,  168, 1159,  167, 1959,  168,  152,  152,  167,  152,
      168,  167, 2447,  168,  381,  381,  381,  381,  167,  144,
      168,  144, 2448, 1811, 2449,  144,  503,  503,  503,  503,

     1216,  144,  381, 1216, 1224,  144,  144, 1224,  503, 1811,
      144,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  157,  157,  157,
      157,  173,  157,  157, 2450,  173,  173,  157,  157,  157,
      173,  173,  157,  157, 1359,  157, 1229, 1359,  173, 1835,
     1835, 1573,  157,  157, 1229,  157,  157,  157,  169, 1229,
     1573,  170,  169,  169, 2451,  170,  170,  169,  169,  169,
      170,  170,  170, 1092, 2040,  169, 1092,  157,  170,  157,

     1839, 1839, 2040,  169, 1092,  169,  170,  174,  170, 1394,
     1396,  174,  174, 1396, 1394, 2332,  174,  174,  270,  270,
      270,  270, 1481, 2332,  174, 1481,  157,  157,  158,  158,
      158,  158,  245,  158,  158,  270,  245,  245,  158,  158,
      158,  245,  270,  158,  158, 1402,  158, 1469, 1209,  245,
     1402, 1209, 1469,  158,  158,  175,  158,  158,  158,  175,
      175, 1800, 1703, 1800,  175,  175,  175,  515,  515,  515,
      515, 1800,  175,  515,  385,  385,  385,  385,  158, 2452,
      158,  177,  177,  177,  177,  195,  177,  177, 1703,  195,
      195,  177,  177,  177,  195,  195,  195,  270,  385,  177,

     1494, 2453,  195, 1494,  175, 1209, 1209,  158,  158,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  176, 1471, 2454,  181,  176,  176, 1471,  181,  181,
      176,  176,  176,  181,  178,  178,  178,  178,  176,  178,
      178,  181, 1962, 2455,  178,  178,  178,  181,  179,  179,
      179,  179,  178,  179,  179, 2038, 1962, 1340,  179,  179,

     1340, 1340,  180,  180,  180,  180,  179,  180,  180, 2038,
      176, 2456,  180,  180,  179, 1340,  179,  182, 1572, 1211,
      180,  182,  182, 1572, 1211, 1211,  182, 1211,  180, 1505,
      180, 2388, 1505, 2457,  182,  524,  524,  524,  524, 2388,
      182,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  187,
     1511,  188, 1511,  187,  187,  188,  188, 2458,  187, 1537,
      188,  187, 1537,  188, 1537,  189,  187,  190,  188,  189,
      189,  190,  190, 1699,  189, 1646,  190,  189, 1699,  190,
     1730,  191,  189,  192,  190,  191,  191,  192,  192, 1730,
      191, 1511,  192,  191, 1093,  192, 2093, 1093,  191,  187,
      192,  188,  193, 1780,  194, 1093,  193,  193,  194,  194,
     2093,  193, 1780,  194,  193,  189,  194,  190,  196,  193,
     1646,  194,  196,  196, 2459, 1718, 2460,  196,  196,  196,
     1718,  191,  197,  192,  198,  196,  197,  197,  198,  198,

     2461,  197, 2462,  198,  295,  295,  295,  295, 1646,  197,
     1782,  198,  193,  199,  194,  295,  200,  199,  199, 1782,
      200,  200,  199,  199,  199,  200,  200,  200,  295, 1414,
      199,  201, 1414,  200,  202,  201,  201, 1958,  202,  202,
      201, 1799, 1414,  202,  203,  203, 1958,  203,  201,  203,
      203,  202, 2463, 1799,  203,  203,  203, 1799, 1095,  246,
      295, 1095,  203,  246,  246, 2006, 2464, 2006,  246, 1095,
      197,  197,  198,  198,  204,  204,  246,  204,  215,  204,
      204, 2464,  215,  215,  204,  204,  204,  215,  209,  209,
      209,  209,  204,  209,  209,  215, 2006, 1807,  209,  209,

      209, 1386, 1807,  209, 1386, 1075,  209, 1386, 1075,  201,
      201, 2465,  202,  202,  205,  205,  205,  205, 1075,  205,
      205, 2466, 1161, 1075,  205,  205,  205,  215, 1161,  215,
     1639, 1075,  205,  210,  210,  210,  210, 1161,  210,  210,
      205, 2467,  205,  210,  210,  210, 1961, 1319,  210,  211,
     1319,  210,  212,  211,  211, 1961,  212,  212,  211, 1395,
      211,  212, 1395,  212, 2469, 1395,  211,  221, 2470,  212,
     1161,  221,  221, 1639, 2471, 2109,  221,  221,  221,  274,
      274,  274,  274,  274,  221, 2110,  274,  205,  206,  206,
      206,  206, 1320,  206,  206, 1320, 2210, 2210,  206,  206,

      206, 2109, 1639,  274, 1319, 1319,  206,  213,  213,  213,
      213, 2110,  213,  213,  206, 2472,  206,  213,  213,  213,
     1686, 1407,  213, 1686, 1407,  213,  214,  214,  214,  214,
     1391,  214,  214, 1391, 1391, 2474,  214,  214,  214, 1407,
     1691,  214,  222, 1691,  214, 2475,  222,  222, 1391, 1320,
     1320,  222,  222,  222,  598,  598,  598,  598, 1691,  222,
      274,  206,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  216, 1510,  217, 1510,
      216,  216,  217,  217, 2005,  216, 2005,  217,  383,  383,
      383,  383,  218,  216,  219,  217,  218,  218,  219,  219,
     2479,  218, 1604,  219, 1474, 1604,  383, 1474, 1474,  218,
     2480,  219,  220, 1604,  223, 2037,  220,  220,  223,  223,
     1510,  220, 1474,  223, 2037,  216, 2486,  216,  217,  220,

     1708,  223, 2005,  323,  323,  323,  323, 1789, 2489,  223,
     1789,  223,  218,  224,  219, 1726,  225,  224,  224, 2153,
      225,  225,  224, 2512, 2153,  225, 1608,  323,  225, 1608,
      224,  323,  220,  225,  460,  460,  460,  460,  224, 2513,
      224,  226,  226, 1708,  226,  225,  226,  226,  227,  460,
     1608,  226,  227,  227,  226, 2217, 2217,  227,  228,  226,
     1726, 2121,  228,  228,  229,  227,  225,  228,  229,  229,
     2121,  226, 1708,  229,  230,  228, 2537,  227,  230,  230,
      231,  229, 2407,  230,  231,  231, 2538,  228, 1726,  231,
      232,  230,  226,  229,  232,  232, 2487,  231,  227,  232,

      243, 2487, 2321,  230,  243,  243, 2407,  232,  228,  243,
     1631,  243, 1697, 1631,  229, 1697,  244,  243, 2408, 1020,
      244,  244, 1020, 1631,  230,  244, 1020,  244, 1020, 2552,
      247,  231, 1020,  244,  247,  247, 2321, 2553, 1697,  247,
      248,  232, 2408, 1719,  248,  248, 1719,  247,  231,  248,
      599,  599,  599,  599, 2554, 2555, 1719,  248,  232,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,

      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  237, 2556,  238,
     2557,  237,  237,  238,  238, 2558,  237,  237,  238,  238,
     2216, 2559,  249,  249,  237,  249,  238,  249,  249, 2216,
     1682, 1685,  249, 1682, 1685,  249,  278,  278,  278,  278,
      249,  386,  386,  386,  386, 2560, 2562,  278,  249, 1682,
     1685,  278,  249,  278,  394,  394,  394,  394, 2314, 2563,
      278,  278,  278, 2089, 2564,  386, 2089, 2314,  534,  534,
      534,  534,  394,  249,  237,  534,  238,  239,  239,  239,

      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  241,  241, 2566,  241, 1250,  241,  241, 1250, 1250,
     2570,  241,  242,  242, 2571,  242, 2572,  242,  242,  241,

     2410, 2575,  242, 1250,  637,  637,  637,  637,  241, 2410,
      242,  250,  250, 2576,  250, 1250,  250,  250, 2583,  242,
     2189,  250,  251, 2189,  250, 2189,  251,  251,  251,  250,
     1692,  251, 1748, 1692,  251, 1748, 1250,  250,  241,  251,
     2584,  250,  296,  296,  296,  296, 2585,  251, 1692,  242,
     1748,  251, 2587,  296,  241, 1666,  241, 2588, 1666, 2589,
      241,  637,  250, 2129, 1666,  242,  296,  242, 1666, 2129,
     2590,  242,  251,  251,  252,  252, 2591,  252, 2129,  252,
      252,  252, 2592, 2338,  252, 2338, 2593,  252,  275,  275,
      275,  275,  252, 2468, 2594,  275,  351,  351,  351,  351,

      252,  296, 2468,  351,  252,  275,  285,  285,  285,  285,
      285, 2129, 2595,  285,  359,  359,  359,  359, 2598, 2600,
      392,  392,  392,  392, 2602,  252,  252,  392, 2603,  392,
      285,  359, 2338,  392,  399,  399,  399,  399,  359, 2605,
      404,  404,  404,  404,  392, 2606, 2608, 1724,  409,  409,
      409,  409,  399,  434,  434,  434,  434, 1724, 2609,  351,
      435,  435,  435,  435,  404,  359,  404, 1921, 2610,  275,
     1921, 1724,  409,  392,  409,  351, 2611,  434,  645,  645,
      645,  645, 2612, 1724,  435, 1921, 2613,  285,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,

      352,  352,  352,  352,  409,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352, 2614,  352,
      352,  352,  353,  353,  353,  353, 2596, 2615, 2596,  353,
      389,  389,  389,  389,  389, 2617, 2618,  389,  405,  405,
      405,  405,  408,  408,  408,  408, 2413,  410,  410,  410,

      410, 2619, 2413, 2620,  389,  411,  411,  411,  411, 2621,
     2059, 2413,  405, 2059,  405, 2623,  408, 1727,  408, 1668,
     1727,  410, 1668,  410,  412,  412,  412,  412, 1668,  411,
     1727,  411, 1668, 1681, 2059,  353, 1681, 2624,  440,  440,
      440,  440,  405, 2625,  440, 2597,  408, 2597,  412, 2626,
      412,  353,  384,  384,  384,  384,  440, 2627,  384, 2628,
     1681,  389,  410, 2599,  411,  410, 2599, 2629,  411,  413,
      413,  413,  413, 2339, 2630, 2339,  384,  646,  646,  646,
      646,  412,  384, 2631, 2597,  441,  441,  441,  441, 2300,
     1681,  412, 2300,  413, 2300,  413,  384, 2632, 2633,  412,

     2634,  412,  384,  441, 2635, 2636,  384,  384, 1681,  384,
      384,  384, 2637, 2640, 2642,  384,  384,  384,  384,  384,
     2644,  384, 2339,  384,  384,  384,  384,  384,  414,  414,
      414,  414,  415,  415,  415,  415,  416,  416,  416,  416,
      413,  417,  417,  417,  417, 2645,  418,  418,  418,  418,
     2646, 2647,  414, 1761,  414, 2648,  415, 2650,  415, 1761,
      416, 2371,  416, 2651, 2371,  417, 2371,  417, 1761, 2652,
      418, 2649,  418, 2653,  419,  419,  419,  419,  442,  442,
      442,  442,  420,  420,  420,  420, 1832,  414, 2654, 1832,
      416,  421,  421,  421,  421, 2649,  442, 2655,  419,  415,

      419, 2656, 2657, 2663,  417,  418,  420, 2664,  420,  422,
      422,  422,  422, 1761,  418,  421, 1832,  421, 2666, 2669,
      418,  423,  423,  423,  423,  424,  424,  424,  424,  419,
     2670, 2107, 2671,  422, 2107,  422, 2672, 1832,  425,  425,
      425,  425, 2674, 2638, 2107,  423, 2638,  423, 2675,  424,
      421,  424, 2108,  420, 2673, 2108,  420,  439,  439,  439,
      439, 2676,  425, 2673,  425, 2108,  437,  437,  437,  437,
      437, 2677,  422,  437, 2678, 2680,  446,  446,  446,  446,
      423,  439,  422,  439,  457,  457,  457,  457, 2682, 2685,
      437, 2686,  424,  425,  446, 1833, 2687,  424, 1833,  423,

     2688,  425,  457, 2689, 2691, 2692,  425,  530,  530,  530,
      530,  531,  531,  531,  531,  532,  532,  532,  532,  533,
      533,  533,  533, 2389,  530, 1833, 2389, 2693,  531, 2694,
     2389,  530, 2389, 2690, 2639,  531, 2389, 2639, 2695,  532,
     2690, 2696, 2697,  533, 2698, 2639, 1833,  437,  483,  483,
      483,  483,  535,  535,  535,  535,  535, 2699, 2700,  535,
      537,  537,  537,  537, 2701, 2702,  531,  548,  548,  548,
      548,  555,  555,  555,  555,  483,  535,  638,  638,  638,
      638, 2703, 2704, 2705,  537,  548, 2708, 2709, 2710,  555,
      659,  659,  659,  659,  661,  661,  661,  661,  662,  662,

      662,  662, 2711,  483, 2714,  483, 2716,  659,  663,  663,
      663,  663, 2717, 2738, 2707,  483,  483, 2739, 2761,  483,
      483,  483, 2762,  483,  695,  695,  695,  695,  700,  700,
      700,  700, 2777,  535,  638, 2778,  702,  702,  702,  702,
     2780, 2781,  695, 2782, 2784,  661,  700,  714,  714,  714,
      714, 2785, 2787,  662,  702,  726,  726,  726,  726,  728,
      728,  728,  728,  663,  764,  764,  764,  764,  765,  765,
      765,  765,  726,  771,  771,  771,  771,  774,  774,  774,
      774, 2793,  764,  728, 2707, 2794,  765,  781,  781,  781,
      781,  771, 2798, 2799,  781,  774,  782,  782,  782,  782,

     2800, 2803, 2804,  782,  783,  783,  783,  783, 2805, 2806,
     2808,  783,  784,  784,  784,  784, 2811,  787,  787,  787,
      787, 2813, 2814, 2815,  787,  784,  787, 2817, 2818, 2819,
      787,  788,  788,  788,  788, 2820, 2821, 2822,  788, 1323,
      788, 2823, 1323, 1323,  788,  789,  789,  789,  789, 2824,
     2825, 2810,  789, 2810,  789, 2826, 2827, 1323,  789,  790,
      790,  790,  790, 2828, 2812, 2829,  790, 2812,  790, 1323,
     2830, 2812,  790,  792,  792,  792,  792,  794,  794,  794,
      794,  796,  796,  796,  796,  807,  807,  807,  807, 2831,
     1323,  792, 2810, 2835, 2837,  794,  807,  809,  809,  809,

      809,  810,  810,  810,  810,  811,  811,  811,  811,  807,
     2838, 2816,  811,  807, 2816,  814,  814,  814,  814,  814,
     2832,  809,  814, 2832, 2839,  810,  818,  818,  818,  818,
     2840,  796,  824,  824,  824,  824, 2841, 2842, 2844,  814,
      827,  827,  827,  827,  824,  830,  830,  830,  830, 2845,
      818,  827,  831,  831,  831,  831,  836,  836,  836,  836,
      916,  916,  916,  916, 2846,  827,  917,  917,  917,  917,
      942,  942,  942,  942,  836, 2847,  945,  945,  945,  945,
     2848,  942,  946,  946,  946,  946,  952,  952,  952,  952,
      827,  945, 2849, 2850, 2853,  942,  814,  946,  980,  980,

      980,  980, 2857, 2833,  987,  987, 2833,  987, 2862,  987,
     2863,  980,  987,  987, 2833, 2864,  980, 2865, 2866, 2867,
      942, 2868,  987, 2869,  987, 1002, 1002, 1002, 1002, 2870,
     2871, 2872, 1002, 1003, 1003, 1003, 1003, 2874, 2876, 2878,
     1003, 1010, 1010, 1010, 1010, 1012, 1012, 1012, 1012,  942,
     2879, 2881, 1012, 1010, 2883, 2884, 1010, 1013, 1013, 1013,
     1013, 2886, 2887, 2889, 1013, 1015, 1015, 1015, 1015, 1024,
     1024, 1024, 1024, 2890, 2891, 1002, 1015, 1025, 1025, 1025,
     1025, 1073, 2892, 1003, 1026, 1026, 1026, 1026, 2893, 2895,
     2898, 1026, 2899, 1024, 2902, 1029, 1029, 1029, 1029, 1029,

     2901, 1025, 1029, 1035, 1035, 1035, 1035, 1714, 1073, 1073,
     1714, 1073, 2903, 1073, 2904, 2901, 1073, 1073, 2906, 1029,
     1714, 1834, 2921, 1074, 1834, 1714, 1073, 1035, 1073, 1074,
     1074, 2922, 1074, 1714, 1074, 2926, 2927, 1074, 1074, 1089,
     1089, 1089, 1089, 1096, 1096, 1096, 1096, 1074, 2931, 1074,
     2953, 1834, 1089, 1102, 1102, 1102, 1102, 1089, 2954, 2955,
     2963, 1096, 1103, 1103, 1103, 1103, 1104, 1104, 1104, 1104,
     1102, 2964, 1834, 1104, 2969, 2970, 1029, 1102, 2974, 1103,
     2975, 2976, 2981, 1104, 2982, 2985, 1103, 1107, 1107, 1107,
     1107, 2986, 2987, 2988, 1107, 1108, 1108, 1108, 1108, 2989,

     2990, 2991, 1108, 1109, 1109, 1109, 1109, 1110, 1110, 1110,
     1110, 2992, 2994, 1837, 1109, 2997, 1837, 2999, 1109, 1111,
     1111, 1111, 1111, 3001, 2998, 3002, 1111, 2998, 1109, 1109,
     3003, 1110, 1102, 1113, 1113, 1113, 1113, 3004, 1114, 1114,
     1114, 1114, 3005, 1837, 1113, 1114, 3000, 1104, 1113, 3000,
     1113, 1116, 1116, 1116, 1116, 1114, 3006, 1113, 1113, 1113,
     1115, 1115, 1115, 1115, 1837, 3007, 3008, 1115, 1116, 1117,
     1117, 1117, 1117, 3009, 3010, 3011, 1117, 1115, 1118, 1118,
     1118, 1118, 1118, 3014, 3015, 1118, 1119, 1119, 1119, 1119,
     1126, 1126, 1126, 1126, 3016, 3017, 3018, 1126, 2993, 3019,

     2993, 1119, 1118, 1119, 3020, 1122, 1122, 1122, 1122, 3022,
     1119, 1119, 1119, 3024, 2995, 3025, 1122, 2995, 3026, 1114,
     1122, 2995, 1122, 3027, 3028, 1127, 1127, 1127, 1127, 1122,
     1122, 1122, 1127, 2993, 3031, 1128, 1128, 1128, 1128, 3035,
     3036, 1115, 1129, 1129, 1129, 1129, 1128, 3037, 3038, 3039,
     1128, 1130, 1130, 1130, 1130, 1133, 1133, 1133, 1133, 1118,
     1128, 1128, 1134, 1134, 1134, 1134, 1129, 1136, 1136, 1136,
     1136, 3040, 3042, 3043, 1136, 1130, 3044, 3045, 3047, 1133,
     1137, 1137, 1137, 1137, 3048, 3049, 1134, 1137, 1138, 1138,
     1138, 1138, 3051, 1139, 1139, 1139, 1139, 3053, 3054, 1138,

     1139, 1141, 1141, 1141, 1141, 1142, 1142, 1142, 1142, 3061,
     3064, 3063, 1141, 1145, 1145, 1145, 1145, 1145, 3067, 3068,
     1145, 1129, 3073, 3074, 3076, 1141, 3063, 1147, 1147, 1147,
     1147, 1149, 1149, 1149, 1149, 3077, 3092, 1145, 1147, 3096,
     3097, 3101, 1149, 1150, 1150, 1150, 1150, 1151, 1151, 1151,
     1151, 1147, 3102, 3103, 1150, 1149, 3105, 3125, 1151, 1167,
     1167, 1167, 1167, 1175, 1175, 1175, 1175, 1150, 3100, 3126,
     1175, 1151, 1176, 1176, 1176, 1176, 3132, 3100, 3133, 1176,
     3137, 3138, 3139, 1167, 1177, 1177, 1177, 1177, 3143, 3146,
     3147, 1177, 3148, 3150, 1145, 1178, 1178, 1178, 1178, 3152,

     3153, 3155, 1151, 1179, 1179, 1179, 1179, 1183, 1183, 1183,
     1183, 3157, 1178, 3158, 1183, 1150, 3158, 3160, 3161, 1178,
     1179, 1184, 1184, 1184, 1184, 3162, 1175, 1179, 3163, 1187,
     1187, 1187, 1187, 3158, 3158, 1176, 1187, 3164, 1184, 3165,
     3166, 3167, 1175, 3170, 3171, 1184, 1202, 1202, 1202, 1202,
     3172, 1176, 1230, 1230, 1230, 1230, 3174, 3168, 3169, 1230,
     3168, 3169, 3175, 1177, 1248, 1248, 1248, 1248, 3168, 1179,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1183, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     3176, 1181, 1181, 1181, 1185, 1185, 1185, 1185, 1186, 1186,
     1186, 1186, 1188, 1188, 1188, 1188, 1190, 1190, 1190, 1190,
     3177, 1185, 3178, 3183, 3184, 1186, 3185, 3187, 1185, 3188,
     3190, 3191, 1186, 1192, 1192, 1192, 1192, 3192, 3195, 3196,
     1190, 3199, 1203, 1203, 1203, 1203, 1205, 1205, 1205, 1205,

     1192, 1208, 1208, 1208, 1208, 3204, 3207, 1192, 3208, 1186,
     1203, 3209, 3211, 3212, 1205, 1231, 1231, 1231, 1231, 3213,
     1185, 3218, 1231, 3231, 3232, 1208, 1232, 1232, 1232, 1232,
     1236, 1236, 1236, 1236, 1192, 3236, 1233, 3237, 3238, 1233,
     3239, 1188, 1207, 1207, 1207, 1207, 3256, 1526, 1207, 3260,
     1526, 1526, 1232, 3262, 1236, 1233, 1233, 1233, 1233, 1233,
     1237, 1237, 1237, 1237, 3263, 1526, 1207, 1237, 1325, 1325,
     1325, 1325, 1207, 1258, 1258, 1258, 1258, 1526, 1239, 1239,
     1239, 1239, 3259, 1325, 1258, 3259, 1207, 3265, 3274, 3279,
     1258, 3280, 1207, 1233, 1233, 3284, 1207, 1207, 1526, 1207,

     1207, 1207, 1239, 3285, 1239, 1207, 1207, 1207, 1207, 1207,
     3286, 1207, 3287, 1207, 1207, 1207, 1207, 1207, 1243, 1243,
     1243, 1243, 3288, 3281, 3281, 1243, 3281, 1243, 3289, 3293,
     3294, 1243, 1244, 1244, 1244, 1244, 3295, 3296, 3297, 1244,
     1836, 1244, 1243, 1836, 3298, 1244, 1245, 1245, 1245, 1245,
     1247, 1247, 1247, 1247, 3303, 1245, 1244, 1245, 1836, 1245,
     3304, 3307, 1247, 1247, 1249, 3310, 1906, 1249, 1249, 1906,
     1836, 1243, 2016, 3312, 1247, 2016, 1247, 1249, 3320, 1253,
     1253, 1253, 1253, 1253, 3321, 1244, 1253, 1259, 1259, 1259,
     1259, 1836, 1906, 3322, 1249, 3325, 1906, 3292, 1259, 1245,

     3292, 3326, 2016, 1253, 1259, 1260, 1260, 1260, 1260, 1261,
     1261, 1261, 1261, 3339, 3343, 1249, 1260, 1906, 3282, 3282,
     1261, 3282, 1260, 2016, 3344, 3345, 1261, 1262, 1262, 1262,
     1262, 1263, 1263, 1263, 1263, 3346, 3290, 3291, 1262, 3290,
     3291, 3353, 1263, 3354, 1262, 3369, 3370, 3290, 1263, 3291,
     3371, 3372, 1259, 1264, 1264, 1264, 1264, 3375, 3382, 3383,
     1253, 1265, 1265, 1265, 1265, 1267, 1267, 1267, 1267, 3384,
     3385, 1260, 1260, 1269, 1269, 1269, 1269, 1264, 1261, 1264,
     1270, 1270, 1270, 1270, 3386, 1265, 3389, 1265, 3390, 1267,
     1263, 1267, 1271, 1271, 1271, 1271, 3376, 3377, 1262, 3376,

     3377, 1262, 3378, 3378, 1270, 3378, 1270, 1267, 1267, 3391,
     3392, 1267, 1272, 1272, 1272, 1272, 1271, 3393, 1271, 1273,
     1273, 1273, 1273, 3397, 1274, 1274, 1274, 1274, 1275, 1275,
     1275, 1275, 1269, 3403, 3380, 3380, 1272, 3380, 1272, 1276,
     1276, 1276, 1276, 1273, 3404, 1273, 3409, 3410, 1274, 1270,
     1274, 3414, 1275, 3415, 1275, 1277, 1277, 1277, 1277, 1278,
     1278, 1278, 1278, 1276, 1271, 1276, 3416, 1272, 1279, 1279,
     1279, 1279, 1280, 1280, 1280, 1280, 1273, 3417, 3423, 1277,
     3424, 1277, 3425, 1278, 1274, 1278, 1273, 1281, 1281, 1281,
     1281, 3427, 1279, 3428, 1279, 3445, 1280, 3446, 1280, 3447,

     1275, 1276, 1282, 1282, 1282, 1282, 1283, 1283, 1283, 1283,
     3450, 1281, 3451, 1281, 1284, 1284, 1284, 1284, 1278, 1285,
     1285, 1285, 1285, 3452, 3387, 1279, 1282, 3387, 1282, 1277,
     1283, 3453, 1283, 3454, 3455, 1280, 3387, 1279, 1284, 3448,
     1284, 1279, 3448, 1285, 3459, 1285, 3448, 1286, 1286, 1286,
     1286, 3462, 3463, 3464, 1281, 1287, 1287, 1287, 1287, 1282,
     1288, 1288, 1288, 1288, 1283, 1282, 3467, 1282, 3468, 3449,
     1284, 1286, 3449, 1286, 3469, 1282, 3449, 3474, 3475, 1287,
     2019, 1287, 2209, 2019, 1288, 2209, 1288, 1289, 1289, 1289,
     1289, 3476, 1285, 1290, 1290, 1290, 1290, 1291, 1291, 1291,

     1291, 1292, 1292, 1292, 1292, 1286, 1293, 1293, 1293, 1293,
     2019, 1289, 2209, 1289, 3491, 3492, 3496, 1290, 3492, 1290,
     3497, 1291, 3492, 1291, 3500, 1292, 1288, 1292, 1287, 3501,
     1293, 2019, 1293, 2209, 1294, 1294, 1294, 1294, 3502, 1295,
     1295, 1295, 1295, 3504, 1296, 1296, 1296, 1296, 3505, 1290,
     1289, 1306, 1306, 1306, 1306, 1289, 3506, 1291, 1294, 3511,
     1294, 1293, 1292, 1295, 3512, 1295, 3521, 1291, 1296, 3526,
     1296, 1297, 1297, 1297, 1297, 1306, 3527, 1293, 1298, 1298,
     1298, 1298, 3530, 3531, 3533, 1299, 1299, 1299, 1299, 1300,
     1300, 1300, 1300, 3534, 3538, 1297, 3494, 1297, 3541, 3494,

     1294, 3542, 1298, 3494, 1298, 3546, 3550, 1296, 1295, 1299,
     3554, 1299, 3573, 1300, 3574, 1300, 1308, 1308, 1308, 1308,
     3577, 3768, 3779, 1308, 1309, 1309, 1309, 1309, 2385, 3768,
     3779, 1309, 2384, 2383, 1297, 1310, 1310, 1310, 1310, 1311,
     1311, 1311, 1311, 1298, 2382, 3781, 1311, 1313, 1313, 1313,
     1313, 2381, 1907, 3781, 1300, 1907, 1299, 1315, 1315, 1315,
     1315, 1310, 1314, 1314, 1314, 1314, 1314, 1838, 2379, 1314,
     1838, 1313, 2378, 1313, 1316, 1316, 1316, 1316, 1907, 2377,
     1838, 1315, 1907, 1315, 3784, 2374, 1314, 1318, 1318, 1318,
     1318, 1322, 3784, 1318, 1322, 1322, 2373, 1838, 1316, 2368,

     1316, 2365, 2362, 1907, 1322, 1318, 1326, 1326, 1326, 1326,
     1327, 1327, 1327, 1327, 1329, 1329, 1329, 1329, 1838, 2359,
     2355, 1322, 1341, 1341, 1341, 1341, 1342, 1342, 1342, 1342,
     2352, 2351, 3786, 1329, 2345, 2344, 1353, 1353, 1353, 1353,
     3786, 1341, 1322, 1314, 1328, 1328, 1328, 1328, 1353, 1354,
     1354, 1354, 1354, 1357, 1357, 1357, 1357, 2343, 3788, 1357,
     1354, 1358, 1358, 1358, 1358, 1361, 3788, 2213, 1361, 2342,
     2213, 1328, 2340, 2335, 2334, 1354, 1363, 1363, 1363, 1363,
     1364, 1364, 1364, 1364, 1361, 1361, 1361, 1361, 1361, 1367,
     1367, 1367, 1367, 1371, 1371, 1371, 1371, 2213, 2333, 1328,

     1371, 1328, 2331, 1369, 1369, 1369, 1369, 1370, 1370, 1370,
     1370, 1328, 1328, 2330, 3780, 1328, 1328, 1328, 2213, 1328,
     1369, 3780, 3791, 2328, 1370, 2325, 2324, 1369, 2320, 3780,
     3791, 1370, 1372, 1372, 1372, 1372, 1374, 1374, 1374, 1374,
     1375, 1375, 1375, 1375, 1377, 1377, 1377, 1377, 3785, 1372,
     3806, 1377, 2318, 1374, 3787, 3785, 1372, 2317, 3806, 2316,
     1374, 3787, 1367, 3785, 1375, 1378, 1378, 1378, 1378, 3787,
     3808, 3813, 1378, 1380, 1380, 1380, 1380, 2315, 3808, 3813,
     1380, 1382, 1382, 1382, 1382, 1383, 1383, 1383, 1383, 1383,
     2313, 3789, 1383, 1384, 1384, 1384, 1384, 2312, 3789, 3825,

     1387, 3807, 1374, 1387, 2309, 1382, 3789, 3825, 3807, 1383,
     1389, 1389, 1389, 1389, 2304, 2301, 3807, 1384, 2298, 1387,
     1387, 1387, 1387, 1387, 1393, 1393, 1393, 1393, 1401, 1401,
     1401, 1401, 1425, 1425, 1425, 1425, 1436, 1436, 1436, 1436,
     2297, 2215, 1393, 2294, 2215, 2293, 1401, 1440, 1440, 1440,
     1440, 1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451, 2292,
     1452, 1452, 1452, 1452, 2291, 2289, 1383, 1452, 1450, 2288,
     2287, 2215, 1451, 1452, 1453, 1453, 1453, 1453, 1454, 1454,
     1454, 1454, 1455, 1455, 1455, 1455, 1456, 1456, 1456, 1456,
     3828, 1453, 2215, 1436, 1457, 1457, 1457, 1457, 3828, 2285,

     2284, 1457, 1458, 1458, 1458, 1458, 1470, 1470, 1470, 1470,
     1482, 1482, 1482, 1482, 1487, 1487, 1487, 1487, 2283, 3809,
     3826, 1470, 1488, 1488, 1488, 1488, 3809, 3826, 3830, 1454,
     2282, 2280, 2279, 1455, 3809, 3826, 3830, 1456, 1487, 1488,
     1490, 1490, 1490, 1490, 1491, 1491, 1491, 1491, 1523, 1523,
     1523, 1523, 1525, 2276, 2275, 1525, 1525, 1458, 2220, 1531,
     1531, 1531, 1531, 2219, 2212, 1525, 1531, 3832, 1491, 1532,
     1532, 1532, 1532, 3834, 2206, 3832, 1532, 1533, 1533, 1533,
     1533, 3834, 1525, 1534, 1534, 1534, 1534, 2203, 2194, 1482,
     1533, 1536, 1536, 1536, 1536, 3835, 1534, 2191, 1539, 1539,

     1539, 1539, 3835, 1525, 1536, 1539, 3793, 1539, 3798, 3837,
     3835, 1539, 1540, 1540, 1540, 1540, 2190, 3837, 2188, 1540,
     2187, 1540, 3793, 3839, 3798, 1540, 1541, 1541, 1541, 1541,
     3793, 3839, 3798, 1541, 2186, 1541, 2185, 2184, 2183, 1541,
     1542, 1542, 1542, 1542, 1543, 1543, 1543, 1543, 1544, 1544,
     1544, 1544, 1546, 1546, 1546, 1546, 2182, 1547, 1547, 1547,
     1547, 3799, 2181, 1546, 1547, 1549, 1549, 1549, 1549, 2180,
     1547, 1551, 1551, 1551, 1551, 3842, 1546, 3799, 1551, 1552,
     1552, 1552, 1552, 3842, 3845, 3799, 1552, 2179, 3840, 1549,
     1542, 2177, 3845, 2176, 1543, 3840, 3848, 3850, 1544, 1554,

     1554, 1554, 1554, 3840, 3848, 3850, 1554, 1556, 1556, 1556,
     1556, 1557, 1557, 1557, 1557, 1557, 2175, 2174, 1557, 1558,
     1558, 1558, 1558, 2173, 1559, 1559, 1559, 1559, 2172, 2171,
     2170, 1556, 2169, 3852, 3854, 1557, 1559, 1560, 1560, 1560,
     1560, 3852, 3854, 1558, 1561, 1561, 1561, 1561, 1560, 1568,
     1568, 1568, 1568, 2168, 2167, 1561, 1570, 1570, 1570, 1570,
     1571, 1571, 1571, 1571, 1591, 1591, 1591, 1591, 2166, 1561,
     1596, 1596, 1596, 1596, 1599, 1599, 1599, 1599, 1571, 1602,
     1602, 1602, 1602, 1603, 3843, 3867, 1603, 1606, 1606, 1606,
     1606, 3843, 1557, 3867, 1561, 1612, 1612, 1612, 1612, 3843,

     2165, 2164, 1603, 1603, 1603, 1603, 1603, 1614, 1614, 1614,
     1614, 1618, 1618, 1618, 1618, 2163, 3851, 3869, 1614, 1619,
     1619, 1619, 1619, 3851, 2162, 3869, 1618, 1620, 1620, 1620,
     1620, 3851, 1614, 1632, 1632, 1632, 1632, 1633, 1633, 1633,
     1633, 1648, 1648, 1648, 1648, 3881, 1632, 3890, 1648, 1649,
     1649, 1649, 1649, 3881, 2161, 3890, 1649, 1614, 1650, 1650,
     1650, 1650, 1652, 1652, 1652, 1652, 1653, 1653, 1653, 1653,
     1650, 3894, 3908, 1650, 1652, 2160, 2159, 1652, 1653, 3894,
     3908, 1653, 1654, 1654, 1654, 1654, 1614, 1658, 1658, 1658,
     1658, 1648, 1656, 1656, 1656, 1656, 3921, 2158, 3853, 1649,

     1661, 1661, 1661, 1661, 1656, 3853, 3917, 1656, 1659, 1659,
     1659, 1659, 3921, 3853, 3917, 1659, 1660, 1660, 1660, 1660,
     3921, 2157, 2156, 1660, 1662, 1662, 1662, 1662, 1663, 1663,
     1663, 1663, 2155, 2154, 2152, 1662, 2151, 2150, 2147, 1663,
     1665, 1665, 1665, 1665, 1671, 1671, 1671, 1671, 2146, 3855,
     3868, 1665, 1673, 1673, 1673, 1673, 3855, 3868, 3939, 1673,
     1674, 1674, 1674, 1674, 3855, 3868, 3939, 1674, 1671, 1676,
     1676, 1676, 1676, 2143, 2142, 2141, 1676, 1678, 1678, 1678,
     1678, 1679, 1679, 1679, 1679, 1679, 2140, 3922, 1679, 1680,
     1680, 1680, 1680, 1728, 1728, 1728, 1728, 1729, 1729, 1729,

     1729, 1678, 2139, 3922, 3944, 1679, 1728, 1733, 1733, 1733,
     1733, 3922, 3944, 1680, 1734, 1734, 1734, 1734, 1859, 1859,
     1859, 1859, 1733, 3870, 3870, 1734, 2137, 2133, 2128, 1734,
     3870, 2127, 1733, 1733, 1735, 1735, 1735, 1735, 3870, 1734,
     1734, 1738, 1738, 1738, 1738, 1735, 2119, 2111, 1738, 1735,
     1736, 1736, 1736, 1736, 1737, 1737, 1737, 1737, 1735, 1735,
     1735, 3946, 1679, 1739, 1739, 1739, 1739, 1736, 3931, 3946,
     1739, 1737, 1741, 1741, 1741, 1741, 1741, 1859, 3883, 1741,
     1742, 1742, 1742, 1742, 3931, 3883, 1743, 1743, 1743, 1743,
     2106, 1742, 3931, 3883, 3951, 1742, 1741, 1743, 1744, 1744,

     1744, 1744, 3951, 2105, 3932, 1742, 1742, 2104, 2103, 1744,
     1745, 1745, 1745, 1745, 2102, 1751, 1751, 1751, 1751, 1751,
     3932, 1745, 1751, 2101, 1753, 1753, 1753, 1753, 3932, 3964,
     1754, 1754, 1754, 1754, 1745, 1753, 2099, 3964, 2098, 1751,
     2095, 1754, 1762, 1762, 1762, 1762, 1762, 3976, 1753, 1762,
     2092, 2091, 2090, 1741, 1754, 1763, 1763, 1763, 1763, 1764,
     1764, 1764, 1764, 3976, 2086, 2085, 1762, 1765, 1765, 1765,
     1765, 3976, 1763, 3919, 1765, 3924, 1764, 2084, 2078, 1763,
     3919, 4005, 3924, 1764, 1766, 1766, 1766, 1766, 3919, 4005,
     3924, 1766, 2076, 2075, 2074, 1754, 1751, 1753, 1767, 1767,

     1767, 1767, 1770, 1770, 1770, 1770, 1779, 2073, 2072, 1770,
     1785, 1785, 1785, 1785, 2071, 1779, 1779, 1779, 1779, 2069,
     2068, 2067, 1767, 1762, 1817, 1817, 1817, 1817, 1764, 1784,
     1784, 1784, 1784, 2066, 1785, 1784, 1786, 1786, 1786, 1786,
     1786, 3925, 3926, 1786, 1818, 1818, 1818, 1818, 3925, 3926,
     1817, 2064, 2062, 1784, 2061, 1819, 3925, 3926, 1819, 1784,
     1786, 1825, 1825, 1825, 1825, 3945, 2060, 2056, 1825, 2054,
     1818, 2052, 3945, 1784, 1819, 1819, 1819, 1819, 1819, 1784,
     3945, 2050, 3933, 1784, 1784, 1825, 1784, 1784, 1784, 3933,
     2048, 3933, 1784, 1784, 1784, 1784, 1784, 3933, 1784, 2046,

     1784, 1784, 1784, 1784, 1784, 1823, 1823, 1823, 1823, 1924,
     1924, 1924, 1924, 2044, 1823, 4039, 1823, 1786, 1823, 1824,
     1824, 1824, 1824, 4039, 2042, 2041, 1824, 2039, 1824, 2035,
     2033, 2023, 1824, 1826, 1826, 1826, 1826, 1827, 1827, 1827,
     1827, 2022, 2021, 1824, 2018, 1826, 1826, 4043, 1827, 1828,
     1828, 1828, 1828, 2014, 2012, 4043, 1828, 1826, 1823, 2011,
     2010, 1828, 1829, 1829, 1829, 1829, 1841, 1841, 1841, 1841,
     1841, 2009, 1824, 1841, 1829, 1829, 1844, 1844, 1844, 1844,
     1847, 1847, 1847, 1847, 4063, 2008, 1829, 1844, 1829, 2007,
     1841, 1847, 4063, 1848, 1848, 1848, 1848, 1847, 1849, 1849,

     1849, 1849, 2004, 2003, 1848, 1850, 1850, 1850, 1850, 1849,
     1848, 1927, 1927, 1927, 1927, 1849, 1850, 1851, 1851, 1851,
     1851, 2002, 1850, 2001, 1852, 1852, 1852, 1852, 1851, 1853,
     1853, 1853, 1853, 2000, 1851, 1852, 1856, 1856, 1856, 1856,
     1853, 1852, 1854, 1854, 1854, 1854, 1853, 1841, 1848, 1857,
     1857, 1857, 1857, 1854, 1999, 1858, 1858, 1858, 1858, 1854,
     1856, 1998, 1856, 1903, 1903, 1903, 1903, 1849, 1856, 1942,
     1942, 1942, 1942, 1857, 4064, 1857, 3953, 1997, 1850, 1858,
     4071, 1858, 4064, 3953, 1996, 1853, 1995, 1852, 4071, 1903,
     1851, 3953, 1852, 1858, 1857, 1861, 1861, 1861, 1861, 1862,

     1862, 1862, 1862, 1863, 1863, 1863, 1863, 1994, 1864, 1864,
     1864, 1864, 1854, 1865, 1865, 1865, 1865, 1993, 4104, 1861,
     4133, 1861, 4158, 1862, 1992, 1862, 4104, 1863, 4133, 1863,
     4158, 1989, 1864, 1988, 1864, 1987, 1983, 1865, 1982, 1865,
     1866, 1866, 1866, 1866, 1867, 1867, 1867, 1867, 1970, 1969,
     1868, 1868, 1868, 1868, 1869, 1869, 1869, 1869, 1870, 1870,
     1870, 1870, 1968, 4174, 1866, 1967, 1866, 1966, 1867, 1861,
     1867, 4174, 1862, 1864, 1868, 1863, 1868, 1965, 1869, 1964,
     1869, 1963, 1870, 1960, 1870, 1865, 1871, 1871, 1871, 1871,
     1872, 1872, 1872, 1872, 1956, 1873, 1873, 1873, 1873, 1932,

     1932, 1932, 1932, 1866, 1874, 1874, 1874, 1874, 1954, 4179,
     1871, 1947, 1871, 1867, 1872, 1946, 1872, 4179, 1868, 1873,
     1869, 1873, 1940, 1932, 1938, 1870, 1936, 1933, 1874, 1931,
     1874, 1930, 1875, 1875, 1875, 1875, 1876, 1876, 1876, 1876,
     1877, 1877, 1877, 1877, 1929, 1871, 1878, 1878, 1878, 1878,
     1944, 1944, 1944, 1944, 1873, 1872, 1875, 4194, 1875, 4229,
     1876, 1928, 1876, 1874, 1877, 4194, 1877, 4229, 1926, 1925,
     1878, 1923, 1878, 1879, 1879, 1879, 1879, 1918, 1880, 1880,
     1880, 1880, 1881, 1881, 1881, 1881, 1882, 1882, 1882, 1882,
     1917, 1875, 1883, 1883, 1883, 1883, 3954, 1879, 1916, 1879,

     3963, 1876, 1880, 3954, 1880, 1915, 1881, 3963, 1881, 1878,
     1882, 3954, 1882, 1877, 1908, 3963, 1883, 1908, 1883, 1884,
     1884, 1884, 1884, 1885, 1885, 1885, 1885, 3973, 1886, 1886,
     1886, 1886, 1879, 1914, 3973, 1880, 1887, 1887, 1887, 1887,
     1908, 1913, 3973, 1884, 1908, 1884, 1912, 1885, 1882, 1885,
     1911, 1910, 1886, 1881, 1886, 1888, 1888, 1888, 1888, 1902,
     1887, 1901, 1887, 1860, 1846, 1908, 1883, 1889, 1889, 1889,
     1889, 1843, 1842, 3981, 1884, 1890, 1890, 1890, 1890, 1888,
     3981, 1888, 1885, 1831, 1891, 1891, 1891, 1891, 3981, 1830,
     1821, 1889, 1820, 1889, 1816, 1892, 1892, 1892, 1892, 1890,

     1815, 1890, 1814, 1886, 1813, 1887, 1812, 1810, 1891, 1887,
     1891, 1893, 1893, 1893, 1893, 1894, 1894, 1894, 1894, 1892,
     1888, 1892, 1895, 1895, 1895, 1895, 1896, 1896, 1896, 1896,
     1897, 1897, 1897, 1897, 1809, 1893, 1808, 1893, 1806, 1894,
     3984, 1894, 1979, 1979, 1979, 1979, 1895, 3984, 1895, 1890,
     1896, 1891, 1896, 1805, 1897, 3984, 1897, 1904, 1904, 1904,
     1904, 1804, 1898, 1898, 1898, 1898, 1803, 1802, 1892, 1899,
     1899, 1899, 1899, 1801, 1900, 1900, 1900, 1900, 1798, 1797,
     1941, 1895, 1796, 1904, 1894, 1893, 1898, 1794, 1898, 1941,
     1941, 1941, 1941, 1899, 1896, 1899, 1909, 1897, 1900, 1909,

     1900, 1905, 1905, 1905, 1905, 1905, 1793, 1792, 1905, 1909,
     1791, 4047, 1934, 1934, 1934, 1934, 4086, 1948, 1948, 1948,
     1948, 1790, 1909, 1934, 1948, 1905, 1909, 4047, 1788, 1900,
     1937, 1778, 4086, 1937, 1776, 4047, 1898, 1775, 1934, 1774,
     4086, 1773, 1899, 1950, 1950, 1950, 1950, 1909, 1772, 1937,
     1937, 1937, 1937, 1937, 1949, 1949, 1949, 1949, 1771, 3986,
     1950, 1949, 1951, 1951, 1951, 1951, 3986, 1950, 1953, 1953,
     1953, 1953, 1953, 1769, 3986, 1953, 3992, 1760, 1957, 1951,
     1755, 1752, 1905, 3992, 1750, 1732, 1951, 1957, 1957, 1957,
     1957, 3992, 1953, 1973, 1973, 1973, 1973, 1725, 3993, 1716,

     1973, 1974, 1974, 1974, 1974, 3993, 1973, 4109, 1974, 1976,
     1976, 1976, 1976, 3993, 1974, 1977, 1977, 1977, 1977, 1715,
     1713, 1951, 1977, 4109, 1712, 1711, 1976, 1978, 1978, 1978,
     1978, 4109, 1710, 1709, 1978, 1985, 1985, 1985, 1985, 1986,
     1986, 1986, 1986, 2015, 2017, 2020, 1707, 2017, 2020, 1953,
     1985, 1706, 2015, 2015, 2015, 2015, 2024, 2024, 2024, 2024,
     1705, 1704, 1698, 2024, 1695, 2025, 2025, 2025, 2025, 2024,
     2017, 2020, 2025, 1694, 2017, 2020, 1693, 1690, 2025, 2026,
     2026, 2026, 2026, 2027, 2027, 2027, 2027, 2030, 2030, 2030,
     2030, 2030, 2026, 2036, 2030, 2017, 2020, 2031, 2031, 2031,

     2031, 1689, 2036, 2036, 2036, 2036, 2045, 2027, 2031, 2058,
     2049, 2030, 2058, 1688, 2053, 2045, 2045, 2045, 2045, 2049,
     2049, 2049, 2049, 2053, 2053, 2053, 2053, 2057, 2058, 2058,
     2058, 2058, 2058, 2065, 1687, 1684, 2057, 2057, 2057, 2057,
     1683, 1672, 2065, 2065, 2065, 2065, 2079, 2079, 2079, 2079,
     2080, 2080, 2080, 2080, 2081, 2081, 2081, 2081, 2079, 1670,
     1669, 2079, 2082, 2082, 2082, 2082, 1657, 1651, 2030, 2083,
     2083, 2083, 2083, 2088, 2088, 2088, 2088, 2088, 1647, 1645,
     2088, 2114, 2114, 2114, 2114, 4119, 1644, 2115, 2115, 2115,
     2115, 1643, 2117, 2117, 2117, 2117, 2114, 2088, 2115, 1642,

     1641, 4119, 2115, 2117, 1640, 2114, 2114, 2114, 3994, 4119,
     1638, 2115, 2115, 2115, 1637, 3994, 2117, 2131, 2131, 2131,
     2131, 4222, 4223, 3994, 2131, 2134, 2134, 2134, 2134, 2136,
     2136, 2136, 2136, 2138, 2138, 2138, 2138, 4222, 4223, 1630,
     2138, 2196, 2196, 2196, 2196, 4222, 4223, 1629, 2196, 2134,
     1611, 1609, 1601, 2136, 2088, 2097, 2097, 2097, 2097, 2097,
     2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097,
     2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097,
     2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097,
     2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097,

     2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097,
     2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097,
     2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097,
     2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2123,
     2123, 2123, 2123, 2124, 2124, 2124, 2124, 1598, 1595, 1590,
     2123, 1580, 1579, 1578, 2124, 2130, 2130, 2130, 2130, 2130,
     1569, 1565, 2130, 2123, 1550, 1548, 1545, 2124, 2132, 2132,
     2132, 2132, 2132, 1522, 1517, 2132, 2145, 1516, 1514, 2130,
     2135, 2135, 2135, 2135, 1509, 2145, 2145, 2145, 2145, 1508,
     1504, 1503, 2132, 2149, 2149, 2149, 2149, 2135, 2199, 2199,

     2199, 2199, 2124, 1502, 2135, 2192, 2192, 2192, 2192, 2199,
     2123, 1500, 2192, 1499, 2192, 1498, 4004, 2149, 2192, 2193,
     2193, 2193, 2193, 4004, 1497, 1489, 2193, 4011, 2193, 2192,
     1467, 4004, 2193, 1466, 4011, 1465, 2130, 2195, 2195, 2195,
     2195, 1464, 4011, 2193, 1463, 2135, 1462, 4012, 4012, 2132,
     2148, 2148, 2148, 2148, 4012, 1459, 2148, 1448, 2192, 1446,
     1445, 2195, 4012, 2195, 2197, 2197, 2197, 2197, 1444, 1438,
     1437, 2197, 2193, 1435, 2148, 2198, 2198, 2198, 2198, 1434,
     2148, 2201, 2201, 2201, 2201, 1415, 1411, 2198, 2201, 2281,
     2281, 2281, 2281, 2201, 2148, 2222, 2222, 2222, 2222, 2198,

     2148, 2198, 1409, 4025, 2148, 2148, 2222, 2148, 2148, 2148,
     4025, 1408, 2222, 2148, 2148, 2148, 2148, 2148, 4025, 2148,
     1399, 2148, 2148, 2148, 2148, 2148, 2202, 2202, 2202, 2202,
     2204, 1388, 1376, 2202, 1373, 2204, 1368, 1362, 2202, 1352,
     1351, 1350, 2204, 2204, 2204, 2204, 2204, 2205, 2205, 2205,
     2205, 1349, 1348, 1347, 2205, 1346, 2205, 1345, 1344, 1337,
     2205, 2207, 2207, 2207, 2207, 2223, 2223, 2223, 2223, 1335,
     1334, 2205, 1333, 2207, 4040, 4040, 2223, 2224, 2224, 2224,
     2224, 4040, 2223, 1332, 1331, 2207, 1330, 1307, 2224, 4040,
     2225, 2225, 2225, 2225, 2224, 2226, 2226, 2226, 2226, 1305,

     2205, 2225, 2227, 2227, 2227, 2227, 2226, 2225, 2290, 2290,
     2290, 2290, 2226, 2227, 2228, 2228, 2228, 2228, 1304, 2227,
     1268, 2229, 2229, 2229, 2229, 2228, 1266, 2231, 2231, 2231,
     2231, 2228, 2229, 2230, 2230, 2230, 2230, 2223, 2229, 1255,
     1254, 1246, 2224, 1235, 2230, 2233, 2233, 2233, 2233, 2225,
     2230, 2231, 1234, 2231, 2232, 2232, 2232, 2232, 2226, 2234,
     2234, 2234, 2234, 1228, 1227, 1225, 2231, 1223, 1221, 2233,
     1220, 2233, 1219, 2235, 2235, 2235, 2235, 2227, 2232, 1217,
     2232, 1215, 2233, 2234, 1214, 2234, 2229, 2228, 2236, 2236,
     2236, 2236, 2237, 2237, 2237, 2237, 2232, 2235, 4042, 2235,

     2238, 2238, 2238, 2238, 1213, 4042, 1212, 2230, 2239, 2239,
     2239, 2239, 2236, 4042, 2236, 2234, 2237, 1210, 2237, 2240,
     2240, 2240, 2240, 1201, 2238, 1200, 2238, 2242, 2242, 2242,
     2242, 1199, 2239, 1196, 2239, 2244, 2244, 2244, 2244, 2250,
     2250, 2250, 2250, 2240, 2235, 2240, 1195, 2237, 1194, 1193,
     1191, 2242, 1168, 2242, 2243, 2243, 2243, 2243, 1162, 2244,
     2236, 2244, 1160, 2250, 4054, 2250, 2295, 2295, 2295, 2295,
     1158, 4054, 1157, 2238, 1146, 2239, 1135, 1131, 2243, 4054,
     2243, 1105, 2240, 2241, 2241, 2241, 2241, 2241, 2241, 2241,
     2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241,

     2241, 2241, 2241, 1101, 2244, 1086, 2242, 2250, 2241, 1084,
     2241, 2241, 2241, 2241, 2241, 2245, 2245, 2245, 2245, 2246,
     2246, 2246, 2246, 2248, 2248, 2248, 2248, 2243, 2247, 2247,
     2247, 2247, 1062, 4065, 2241, 2241, 2241, 2241, 4065, 2245,
     4065, 2245, 1061, 2246, 1060, 2246, 1058, 2248, 4065, 2248,
     1045, 1044, 2247, 1043, 2247, 2249, 2249, 2249, 2249, 2251,
     2251, 2251, 2251, 2241, 2241, 2241, 2241, 2252, 2252, 2252,
     2252, 1034, 2253, 2253, 2253, 2253, 1022, 4085, 2245, 2249,
     1011, 2249, 1000, 2251, 4085, 2251, 2254, 2254, 2254, 2254,
     2246, 2252, 4085, 2252, 2248, 2247, 2253,  976, 2253, 2255,

     2255, 2255, 2255,  932, 2256, 2256, 2256, 2256,  926,  925,
     2254,  924, 2254, 2258, 2258, 2258, 2258,  901, 2257, 2257,
     2257, 2257,  893, 2255,  885, 2255, 2251,  877, 2256, 2249,
     2256, 2259, 2259, 2259, 2259,  868,  858, 2258, 2252, 2258,
     2253, 2254, 2257,  852, 2257,  847, 2260, 2260, 2260, 2260,
      834, 2261, 2261, 2261, 2261, 2259,  828, 2259, 2262, 2262,
     2262, 2262,  817, 2263, 2263, 2263, 2263, 2255,  806, 2256,
     2260,  778, 2260,  777, 2257, 2261,  776, 2261, 2264, 2264,
     2264, 2264, 2262,  775, 2262, 2258, 2259, 2263,  772, 2263,
     2265, 2265, 2265, 2265, 2286, 2286, 2286, 2286, 2266, 2266,

     2266, 2266, 2264,  768, 2264, 2260, 2267, 2267, 2267, 2267,
     2261,  758,  757,  756, 2265,  755, 2265,  744, 2286,  742,
     2263, 2262, 2266,  741, 2266, 2268, 2268, 2268, 2268,  740,
     2267, 4072, 2267, 4072,  739, 2263, 2269, 2269, 2269, 2269,
     4072, 2264,  738,  707,  682, 2265,  676,  674, 4072, 2268,
      673, 2268, 2270, 2270, 2270, 2270, 2271, 2271, 2271, 2271,
     2269, 2266, 2269, 2267,  650, 2272, 2272, 2272, 2272, 2273,
     2273, 2273, 2273,  643,  628,  627, 2270,  584, 2270,  572,
     2271, 4091, 2271, 2274, 2274, 2274, 2274,  561, 4091, 2272,
     2268, 2272,  545, 2273, 2269, 2273, 4091, 2299, 2299, 2299,

     2299, 2303,  543, 2269,  536,  522,  520, 2274, 2299, 2274,
     2303, 2303, 2303, 2303,  506,  497,  495, 2271,  494, 2270,
     2306, 2306, 2306, 2306, 2272, 2307, 2307, 2307, 2307, 2308,
     2308, 2308, 2308, 2322, 2322, 2322, 2322, 2306, 2323, 2323,
     2323, 2323, 2307, 2273, 2306,  493, 2308,  492, 2311, 2307,
     2322,  491,  490, 2308,  438,  406, 2274, 2311, 2311, 2311,
     2311, 2326, 2326, 2326, 2326, 2347, 2348, 2348, 2348, 2348,
     2349, 2349, 2349, 2349, 2347, 2347, 2347, 2347, 2354, 2348,
     2350, 2350, 2350, 2350,  402, 4099, 2361, 2354, 2354, 2354,
     2354,  398, 4099,  397, 2349, 2361, 2361, 2361, 2361, 2364,

     4099, 2308,  372, 2367, 2350,  370,  360, 2370, 2364, 2364,
     2364, 2364, 2367, 2367, 2367, 2367, 2370, 2370, 2370, 2370,
     2376, 2414, 2414, 2414, 2414,  356,  322,  311, 2414, 2376,
     2376, 2376, 2376, 2386, 2386,  293,  291,  276, 2386,  253,
        0, 2386, 2386, 2415, 2415, 2415, 2415,    0,    0,    0,
     2415, 2386,    0, 2386, 2398, 2398, 2398, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,

     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2398, 2398, 2409, 2409,
        0,    0,    0, 2409,    0,    0, 2409, 2409, 2411, 2411,
     2411, 2411, 2412, 2412, 2412, 2412, 2409,    0, 2409, 2411,
        0,    0,    0, 2412, 2417, 2417, 2417, 2417, 2420, 2420,
     2420, 2420, 2411,    0,    0, 4102, 2412, 2419, 2419, 2419,
     2419, 2419, 4102,    0, 2419,    0,    0,    0, 2417,    0,
     4102,    0, 2420, 4073, 2421, 2421, 2421, 2421,    0,    0,

     4073, 2419, 4073, 2411, 2431, 2431, 2431, 2431, 4073, 4116,
     2412, 2421, 2446, 2446, 2446, 2446, 4116,    0, 2421, 2476,
     2476, 2476, 2476,    0, 4116,    0, 2476,    0, 2431,    0,
     2477, 2477, 2477, 2477, 2561, 2561, 2561, 2561,    0, 2481,
     2481, 2481, 2481, 2476, 2478, 2478, 2478, 2478,    0,    0,
        0, 2481,    0, 2421, 2477,    0,    0,    0, 2419, 2430,
     2430, 2430, 2430, 2481, 2484, 2430,    0,    0, 2478, 2484,
     2478,    0, 2482, 2482, 2482, 2482, 2484, 2484, 2484, 2484,
     2484,    0,    0, 2430, 2482, 2579, 2579, 2579, 2579, 2430,
        0, 2446, 2485,    0,    0,    0, 2482, 2485, 2482, 2565,

     2565, 2565, 2565, 2430, 2485, 2485, 2485, 2485, 2485, 2430,
     2565,    0, 4130, 2430, 2430,    0, 2430, 2430, 2430, 4130,
        0,    0, 2430, 2430, 2430, 2430, 2430, 4130, 2430,    0,
     2430, 2430, 2430, 2430, 2430, 2491, 2491, 2491, 2491, 2492,
     2492, 2492, 2492, 4221,    0, 4231, 2491, 4232,    0, 4221,
     2492, 4231, 2491, 4232,    0,    0, 2492, 2493, 2493, 2493,
     2493, 2494, 2494, 2494, 2494, 4221,    0, 4231, 2493, 4232,
        0, 2565, 2494, 4221, 2493, 4231,    0, 4232, 2494, 2495,
     2495, 2495, 2495, 2496, 2496, 2496, 2496,    0,    0,    0,
     2495, 4129, 4129,    0, 2496,    0, 2495,    0, 4129,    0,

     2496, 2497, 2497, 2497, 2497,    0, 4129, 2500, 2500, 2500,
     2500, 2492, 2497,    0,    0,    0, 2493,    0, 2497, 2498,
     2498, 2498, 2498, 2499, 2499, 2499, 2499,    0,    0,    0,
     2498, 2500, 2494, 2500, 2499,    0, 2498,    0, 2496,    0,
     2499,    0, 2500, 2665, 2665, 2665, 2665, 2495, 2501, 2501,
     2501, 2501, 2502, 2502, 2502, 2502, 2567, 2567, 2567, 2567,
     2497, 2503, 2503, 2503, 2503,    0, 4136, 2567,    0, 2497,
        0,    0, 2501, 4136, 2501, 4146, 2502, 4146, 2502,    0,
        0, 4136, 2498,    0, 4146, 2503, 2499, 2503,    0,    0,
        0, 2501, 4146, 2502, 2504, 2504, 2504, 2504, 2505, 2505,

     2505, 2505,    0, 2506, 2506, 2506, 2506, 2507, 2507, 2507,
     2507, 2508, 2508, 2508, 2508,    0,    0,    0, 2504,    0,
     2504, 4162, 2505,    0, 2505,    0, 2503, 2506, 4162, 2506,
        0, 2507,    0, 2507,    0, 2508, 4162, 2508, 2509, 2509,
     2509, 2509, 2511, 2511, 2511, 2511,    0,    0,    0, 2504,
     2514, 2514, 2514, 2514, 2515, 2515, 2515, 2515, 2517, 2517,
     2517, 2517, 2509,    0, 2509,    0, 2511,    0, 2511,    0,
     2508,    0,    0,    0, 2514, 2506, 2514, 2505, 2515,    0,
     2515,    0, 2517,    0, 2517,    0, 2518, 2518, 2518, 2518,
     2519, 2519, 2519, 2519, 2520, 2520, 2520, 2520, 2521, 2521,

     2521, 2521,    0,    0,    0, 2509, 2522, 2522, 2522, 2522,
     2518, 2515, 2518,    0, 2519,    0, 2519,    0, 2520,    0,
     2520,    0, 2521,    0, 2521,    0, 2515,    0,    0,    0,
     2522,    0, 2522,    0, 2523, 2523, 2523, 2523, 2524, 2524,
     2524, 2524, 2525, 2525, 2525, 2525,    0, 2519, 2526, 2526,
     2526, 2526, 2527, 2527, 2527, 2527, 2521,    0, 2523, 2518,
     2523, 2520, 2524,    0, 2524,    0, 2525,    0, 2525, 2522,
        0,    0, 2526,    0, 2526,    0, 2527,    0, 2527,    0,
     2528, 2528, 2528, 2528,    0, 2529, 2529, 2529, 2529,    0,
        0,    0, 2523, 2530, 2530, 2530, 2530, 2580, 2580, 2580,

     2580, 2525,    0,    0, 2528, 2524, 2528,    0, 2526, 2529,
        0, 2529,    0, 4139,    0, 2526,    0, 2530, 4139, 2530,
     4139, 2527, 2531, 2531, 2531, 2531,    0,    0, 4139, 2532,
     2532, 2532, 2532, 2533, 2533, 2533, 2533, 2534, 2534, 2534,
     2534,    0,    0, 2529,    0,    0, 2531, 4170, 2531,    0,
        0, 2528, 2530, 2532, 4170, 2532,    0, 2533,    0, 2533,
     2580, 2534, 4170, 2534, 2535, 2535, 2535, 2535, 2536, 2536,
     2536, 2536,    0, 2539, 2539, 2539, 2539, 2540, 2540, 2540,
     2540, 2541, 2541, 2541, 2541,    0,    0, 2531, 2535, 4193,
     2535,    0, 2536,    0, 2536,    0, 4193, 2539, 2532, 2539,

        0, 2540,    0, 2540, 4193, 2541, 2533, 2541, 2534, 2542,
     2542, 2542, 2542, 2543, 2543, 2543, 2543, 2544, 2544, 2544,
     2544, 2535,    0,    0,    0, 2536, 2545, 2545, 2545, 2545,
        0,    0,    0, 2542,    0, 2542,    0, 2543, 2541, 2543,
        0, 2544, 2540, 2544, 2539, 2546, 2546, 2546, 2546,    0,
     2545,    0, 2545, 2547, 2547, 2547, 2547,    0,    0, 2548,
     2548, 2548, 2548, 2549, 2549, 2549, 2549,    0, 2543, 2546,
        0, 2546, 2550, 2550, 2550, 2550, 2544, 2547,    0, 2547,
        0, 2545, 2542, 2548,    0, 2548,    0, 2549, 4207, 2549,
     2574, 2574, 2574, 2574,    0, 4207, 2550,    0, 2550, 2604,

     2604, 2604, 2604, 4207,    0,    0, 2604, 2574, 2679, 2679,
     2679, 2679, 2604,    0, 2574,    0, 4217,    0, 2549, 2658,
     2658, 2658, 2658, 4217, 2546, 2659, 2659, 2659, 2659,    0,
     2658, 4217, 2548,    0,    0, 2550, 2659, 2661, 2661, 2661,
     2661, 2661,    0, 2658, 2661, 2662, 2662, 2662, 2662, 2659,
     2668, 2668, 2668, 2668, 2681, 2681, 2681, 2681,    0, 2574,
     4224, 2661, 2662, 2684, 2684, 2684, 2684, 4224,    0, 2662,
     2683, 2683, 2683, 2683, 2668, 4224, 2658, 2706, 2706, 2706,
     2706, 2712, 2712, 2712, 2712,    0,    0, 2679, 2712,    0,
        0,    0, 2713, 2713, 2713, 2713,    0,    0,    0, 2713,

        0, 2713,    0,    0, 2659, 2713, 2715, 2715, 2715, 2715,
        0, 2662, 2718, 2718, 2718, 2718, 2713, 4226, 2661, 2667,
     2667, 2667, 2667, 2718, 4226, 2667,    0, 2683,    0, 2718,
     2715,    0, 4226, 2719, 2719, 2719, 2719, 2720, 2720, 2720,
     2720,    0, 2683, 2667, 2719, 2713, 4227,    0, 2720, 2667,
     2719,    0,    0, 4227, 2720, 4233, 2706, 2779, 2779, 2779,
     2779, 4227, 4233, 2667, 2721, 2721, 2721, 2721,    0, 2667,
     4233,    0, 4234, 2667, 2667, 2721, 2667, 2667, 2667, 4234,
        0, 2721, 2667, 2667, 2667, 2667, 2667, 4234, 2667,    0,
     2667, 2667, 2667, 2667, 2667,    0,    0, 2720,    0, 2719,

     2722, 2722, 2722, 2722, 2723, 2723, 2723, 2723,    0,    0,
        0, 2722,    0,    0,    0, 2723,    0, 2722,    0,    0,
        0, 2723, 2724, 2724, 2724, 2724, 2725, 2725, 2725, 2725,
        0, 2721,    0, 2724,    0,    0,    0, 2725,    0, 2724,
        0,    0,    0, 2725,    0, 2726, 2726, 2726, 2726,    0,
        0, 2727, 2727, 2727, 2727,    0, 2726, 2786, 2786, 2786,
     2786, 2723, 2726, 2728, 2728, 2728, 2728,    0, 2729, 2729,
     2729, 2729,    0, 2722,    0, 2727,    0, 2727,    0, 2724,
        0,    0,    0, 2725, 2727,    0,    0, 2728,    0, 2728,
        0,    0, 2729,    0, 2729,    0,    0,    0, 2728, 2729,

     2730, 2730, 2730, 2730, 2731, 2731, 2731, 2731, 2732, 2732,
     2732, 2732, 2734, 2734, 2734, 2734, 2726, 2735, 2735, 2735,
     2735,    0,    0,    0, 2730,    0, 2730,    0, 2731,    0,
     2731,    0, 2732,    0, 2732,    0, 2734,    0, 2734,    0,
        0, 2735,    0, 2735, 2736, 2736, 2736, 2736,    0, 2737,
     2737, 2737, 2737,    0,    0, 2736, 2740, 2740, 2740, 2740,
        0, 2731,    0, 2730,    0,    0,    0, 2735, 2736,    0,
     2736,    0,    0, 2737, 2735, 2737, 2735,    0,    0,    0,
     2740,    0, 2740,    0, 2734, 2741, 2741, 2741, 2741, 2735,
        0, 2735, 2742, 2742, 2742, 2742,    0, 2743, 2743, 2743,

     2743,    0, 2743, 2744, 2744, 2744, 2744,    0,    0, 2741,
        0, 2741, 2745, 2745, 2745, 2745, 2742,    0, 2742,    0,
        0, 2743, 2737, 2743,    0,    0,    0, 2744,    0, 2744,
     2746, 2746, 2746, 2746,    0,    0, 2745,    0, 2745, 2747,
     2747, 2747, 2747,    0, 2748, 2748, 2748, 2748, 2741,    0,
     2749, 2749, 2749, 2749, 2746, 2742, 2746, 2750, 2750, 2750,
     2750,    0,    0, 2747,    0, 2747,    0,    0, 2748, 2745,
     2748,    0,    0,    0, 2749,    0, 2749, 2751, 2751, 2751,
     2751, 2750,    0, 2750, 2752, 2752, 2752, 2752,    0, 2746,
        0, 2753, 2753, 2753, 2753, 2754, 2754, 2754, 2754,    0,

        0, 2751,    0, 2751, 2747, 2749,    0,    0, 2752,    0,
     2752,    0, 2750,    0,    0, 2753,    0, 2753,    0, 2754,
        0, 2754, 2755, 2755, 2755, 2755,    0, 2756, 2756, 2756,
     2756, 2757, 2757, 2757, 2757, 2758, 2758, 2758, 2758,    0,
     2759, 2759, 2759, 2759,    0,    0, 2755,    0, 2755,    0,
        0, 2756,    0, 2756,    0, 2757,    0, 2757,    0, 2758,
        0, 2758, 2752, 2753, 2759,    0, 2759, 2760, 2760, 2760,
     2760, 2763, 2763, 2763, 2763, 2764, 2764, 2764, 2764,    0,
        0, 2755, 2756, 2765, 2765, 2765, 2765,    0,    0,    0,
     2757, 2760,    0, 2760,    0, 2763,    0, 2763,    0, 2764,

        0, 2764, 2766, 2766, 2766, 2766,    0, 2765, 2758, 2765,
        0, 2760,    0, 2759, 2767, 2767, 2767, 2767, 2768, 2768,
     2768, 2768, 2769, 2769, 2769, 2769, 2766,    0, 2766,    0,
     2763, 2770, 2770, 2770, 2770,    0,    0,    0, 2767, 2760,
     2767,    0, 2768,    0, 2768,    0, 2769, 2764, 2769, 2772,
     2772, 2772, 2772,    0,    0, 2770,    0, 2770, 2773, 2773,
     2773, 2773,    0,    0,    0, 2774, 2774, 2774, 2774, 2775,
     2775, 2775, 2775, 2772,    0, 2772,    0,    0, 2768,    0,
        0, 2766, 2773,    0, 2773,    0,    0, 2767, 2769, 2774,
        0, 2774,    0, 2775,    0, 2775, 2776, 2776, 2776, 2776,

     2783, 2783, 2783, 2783,    0, 2788, 2788, 2788, 2788,    0,
        0, 2783,    0,    0,    0, 2773, 2788,    0,    0,    0,
     2776,    0, 2776, 2789, 2789, 2789, 2789,    0,    0,    0,
     2773,    0,    0,    0, 2775, 2790, 2790, 2790, 2790, 2792,
     2792, 2792, 2792, 2774,    0,    0, 2790, 2795, 2795, 2795,
     2795, 2797, 2797, 2797, 2797, 2851, 2851, 2851, 2851,    0,
        0, 2776,    0,    0, 2795,    0, 2851, 2852, 2852, 2852,
     2852, 2795, 2783, 2855, 2855, 2855, 2855,    0, 2852, 2851,
     2856, 2856, 2856, 2856, 2858, 2858, 2858, 2858,    0,    0,
     2855, 2852, 2859, 2859, 2859, 2859,    0, 2855, 2860, 2860,

     2860, 2860, 2795, 2861, 2861, 2861, 2861, 2873, 2873, 2873,
     2873, 2875, 2875, 2875, 2875,    0, 2797, 2877, 2877, 2877,
     2877, 2880, 2880, 2880, 2880,    0,    0, 2861, 2851,    0,
        0,    0, 2855, 2882, 2882, 2882, 2882,    0, 2885, 2885,
     2885, 2885, 2888, 2888, 2888, 2888, 2852, 2894, 2894, 2894,
     2894, 2896, 2896, 2896, 2896, 2897, 2897, 2897, 2897,    0,
        0, 2875, 2885, 2900, 2900, 2900, 2900,    0, 2875,    0,
     2875, 2894,    0, 2907, 2907, 2907, 2907,    0, 2908, 2908,
     2908, 2908,    0, 2875, 2907, 2875,    0,    0,    0, 2908,
     2907, 2894,    0,    0,    0, 2908, 2909, 2909, 2909, 2909,

     2910, 2910, 2910, 2910,    0,    0,    0, 2909,    0,    0,
        0, 2910,    0, 2909,    0,    0,    0, 2910,    0, 2894,
     2911, 2911, 2911, 2911, 2912, 2912, 2912, 2912,    0,    0,
        0, 2911, 2907, 2908, 2897, 2912,    0, 2911,    0,    0,
        0, 2912,    0, 2913, 2913, 2913, 2913, 2914, 2914, 2914,
     2914, 2909,    0,    0, 2913,    0,    0,    0, 2914, 2910,
     2913,    0,    0,    0, 2914, 2915, 2915, 2915, 2915,    0,
     2916, 2916, 2916, 2916, 2917, 2917, 2917, 2917, 2918, 2918,
     2918, 2918,    0, 2919, 2919, 2919, 2919,    0,    0, 2915,
        0, 2915, 2912, 2911, 2916,    0, 2916,    0, 2917,    0,

     2917,    0, 2918,    0, 2918,    0, 2914, 2919,    0, 2919,
        0,    0, 2915,    0, 2917, 2916, 2920, 2920, 2920, 2920,
     2923, 2923, 2923, 2923, 2924, 2924, 2924, 2924,    0, 2924,
        0, 2923,    0,    0, 2924, 2925, 2925, 2925, 2925,    0,
     2920,    0, 2920,    0, 2923,    0, 2923,    0,    0,    0,
     2918, 2928, 2928, 2928, 2928,    0, 2919,    0,    0, 2925,
        0, 2925, 2929, 2929, 2929, 2929, 2930, 2930, 2930, 2930,
        0, 2930,    0,    0,    0, 2928,    0, 2928,    0, 2932,
     2932, 2932, 2932,    0,    0,    0, 2929,    0, 2929,    0,
     2930,    0, 2930,    0, 2925,    0, 2933, 2933, 2933, 2933,

        0,    0,    0, 2932,    0, 2932,    0,    0, 2935, 2935,
     2935, 2935,    0, 2936, 2936, 2936, 2936,    0,    0, 2928,
     2933,    0, 2933, 2937, 2937, 2937, 2937,    0, 2940, 2940,
     2940, 2940, 2935,    0, 2935, 2929, 2932, 2936,    0, 2936,
     2968, 2968, 2968, 2968,    0,    0,    0, 2937,    0, 2937,
        0, 2932, 2940, 2932, 2934, 2934, 2934, 2934, 2934, 2934,
     2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934, 2934,
     2934, 2934, 2934, 2934, 2938, 2938, 2938, 2938,    0, 2934,
     2937, 2934, 2934, 2934, 2934, 2934, 2935, 2939, 2939, 2939,
     2939, 2941, 2941, 2941, 2941,    0,    0,    0, 2938,    0,

     2938, 2942, 2942, 2942, 2942, 2934, 2934, 2934, 2934, 2934,
        0, 2939,    0, 2939,    0, 2941,    0, 2941, 2943, 2943,
     2943, 2943,    0,    0,    0, 2942,    0, 2942, 2944, 2944,
     2944, 2944,    0,    0, 2934, 2934, 2934, 2934,    0, 2938,
        0,    0, 2943,    0, 2943, 2945, 2945, 2945, 2945,    0,
        0,    0, 2944,    0, 2944, 2946, 2946, 2946, 2946, 2947,
     2947, 2947, 2947,    0, 2948, 2948, 2948, 2948,    0, 2945,
        0, 2945, 2949, 2949, 2949, 2949,    0,    0,    0, 2946,
        0, 2946,    0, 2947,    0, 2947,    0,    0, 2948,    0,
     2948, 2950, 2950, 2950, 2950,    0, 2949,    0, 2949, 2946,

        0,    0, 2945,    0, 2951, 2951, 2951, 2951, 2952, 2952,
     2952, 2952,    0,    0,    0, 2950, 2949, 2956, 2956, 2956,
     2956,    0, 2947, 2948,    0,    0,    0, 2946, 2951,    0,
     2951,    0, 2952,    0, 2952,    0,    0, 2947,    0,    0,
        0, 2956,    0, 2956, 2949, 2957, 2957, 2957, 2957,    0,
     2958, 2958, 2958, 2958, 2960, 2960, 2960, 2960, 2951, 2961,
     2961, 2961, 2961, 2962, 2962, 2962, 2962,    0,    0, 2957,
        0, 2957,    0, 2952, 2958,    0, 2958,    0, 2960,    0,
     2960,    0,    0, 2961,    0, 2961,    0, 2962,    0, 2962,
     2965, 2965, 2965, 2965, 2966, 2966, 2966, 2966,    0, 2967,

     2967, 2967, 2967,    0, 2971, 2971, 2971, 2971, 2972, 2972,
     2972, 2972,    0, 2960, 2965, 2971, 2965,    0, 2966,    0,
     2966,    0, 2962, 2967,    0, 2967, 2973, 2973, 2973, 2973,
     2977, 2977, 2977, 2977, 2979, 2979, 2979, 2979,    0,    0,
        0, 2977, 2980, 2980, 2980, 2980, 2983, 2983, 2983, 2983,
     2984, 2984, 2984, 2984, 3029, 3029, 3029, 3029, 2967, 2965,
        0,    0,    0, 2983, 3030, 3030, 3030, 3030,    0,    0,
     2983, 3029, 3032, 3032, 3032, 3032,    0,    0, 3029, 3033,
     3033, 3033, 3033, 3034, 3034, 3034, 3034, 3041, 3041, 3041,
     3041, 3046, 3046, 3046, 3046, 3050, 3050, 3050, 3050, 3052,

     3052, 3052, 3052, 2983,    0,    0,    0, 3034,    0, 2984,
     3055, 3055, 3055, 3055, 3056, 3056, 3056, 3056,    0,    0,
        0, 3029, 3057, 3057, 3057, 3057, 3058, 3058, 3058, 3058,
     3059, 3059, 3059, 3059, 3055, 3060, 3060, 3060, 3060, 3062,
     3062, 3062, 3062, 3065, 3065, 3065, 3065,    0,    0,    0,
     3058, 3066, 3066, 3066, 3066, 3069, 3069, 3069, 3069, 3070,
     3070, 3070, 3070, 3062,    0,    0,    0, 3065, 3071, 3071,
     3071, 3071, 3072, 3072, 3072, 3072,    0,    0,    0, 3069,
        0,    0,    0, 3062,    0,    0,    0, 3065, 3075, 3075,
     3075, 3075, 3078, 3078, 3078, 3078, 3079, 3079, 3079, 3079,

        0,    0,    0, 3078,    0,    0,    0, 3079,    0, 3078,
        0, 3062,    0, 3079,    0, 3065, 3080, 3080, 3080, 3080,
     3081, 3081, 3081, 3081,    0,    0,    0, 3080,    0,    0,
        0, 3081,    0, 3080,    0,    0,    0, 3081, 3082, 3082,
     3082, 3082,    0, 3083, 3083, 3083, 3083,    0,    0, 3082,
        0,    0,    0, 3079, 3083, 3082,    0,    0,    0, 3078,
     3083, 3084, 3084, 3084, 3084, 3085, 3085, 3085, 3085,    0,
        0,    0, 3084,    0,    0,    0, 3085, 3086, 3086, 3086,
     3086, 3080, 3085, 3087, 3087, 3087, 3087, 3088, 3088, 3088,
     3088, 3089, 3089, 3089, 3089,    0,    0, 3082,    0,    0,

        0, 3086,    0, 3086,    0,    0,    0, 3087, 3083, 3087,
        0, 3088,    0, 3088,    0, 3089,    0, 3089, 3090, 3090,
     3090, 3090,    0, 3085, 3091, 3091, 3091, 3091,    0,    0,
     3087,    0,    0, 3088,    0, 3093, 3093, 3093, 3093,    0,
     3093,    0, 3090,    0, 3090, 3093,    0,    0, 3091,    0,
     3091,    0,    0, 3089, 3095, 3095, 3095, 3095,    0, 3098,
     3098, 3098, 3098, 3099, 3099, 3099, 3099, 3104, 3104, 3104,
     3104, 3106, 3106, 3106, 3106,    0,    0,    0, 3095,    0,
     3095,    0,    0, 3098,    0, 3098,    0, 3099,    0, 3099,
        0, 3104,    0, 3104,    0, 3106,    0, 3106, 3107, 3107,

     3107, 3107,    0, 3108, 3108, 3108, 3108, 3109, 3109, 3109,
     3109, 3110, 3110, 3110, 3110,    0, 3111, 3111, 3111, 3111,
        0,    0, 3107,    0, 3107, 3095, 3098, 3108,    0, 3108,
        0, 3109,    0, 3109, 3112, 3112, 3112, 3112,    0, 3106,
     3111,    0, 3111, 3113, 3113, 3113, 3113, 3114, 3114, 3114,
     3114, 3115, 3115, 3115, 3115,    0,    0,    0, 3112,    0,
     3112,    0, 3108, 3116, 3116, 3116, 3116, 3113,    0, 3113,
        0, 3114,    0, 3114,    0, 3115,    0, 3115, 3117, 3117,
     3117, 3117,    0, 3118, 3118, 3118, 3118, 3116, 3119, 3119,
     3119, 3119,    0,    0,    0, 3115, 3120, 3120, 3120, 3120,

        0,    0, 3117,    0, 3117,    0, 3114, 3118,    0, 3118,
        0,    0, 3119,    0, 3119, 3121, 3121, 3121, 3121,    0,
     3120,    0, 3120, 3115, 3122, 3122, 3122, 3122, 3123, 3123,
     3123, 3123, 3117, 3124, 3124, 3124, 3124,    0,    0, 3121,
        0, 3121, 3127, 3127, 3127, 3127,    0, 3119, 3118,    0,
        0,    0, 3123,    0, 3123,    0,    0, 3124,    0, 3124,
     3128, 3128, 3128, 3128,    0,    0, 3127,    0, 3127, 3129,
     3129, 3129, 3129, 3121, 3123,    0, 3130, 3130, 3130, 3130,
     3131, 3131, 3131, 3131, 3128,    0, 3128, 3134, 3134, 3134,
     3134,    0,    0, 3129, 3135, 3135, 3135, 3135,    0,    0,

     3130, 3124, 3130,    0, 3131,    0, 3131,    0,    0,    0,
     3127, 3134,    0, 3134, 3136, 3136, 3136, 3136, 3135,    0,
     3135, 3140, 3140, 3140, 3140,    0, 3130, 3141, 3141, 3141,
     3141,    0,    0, 3130,    0, 3130, 3142, 3142, 3142, 3142,
     3144, 3144, 3144, 3144,    0,    0, 3134,    0, 3130,    0,
     3130, 3130, 3159, 3159, 3159, 3159,    0, 3144, 3179, 3179,
     3179, 3179,    0,    0, 3144, 3180, 3180, 3180, 3180, 3181,
     3181, 3181, 3181,    0,    0, 3179,    0,    0,    0, 3136,
        0,    0, 3179, 3182, 3182, 3182, 3182, 3186, 3186, 3186,
     3186, 3189, 3189, 3189, 3189, 3193, 3193, 3193, 3193, 3144,

     3194, 3194, 3194, 3194,    0,    0,    0, 3182, 3197, 3197,
     3197, 3197, 3198, 3198, 3198, 3198, 3200, 3200, 3200, 3200,
     3201, 3201, 3201, 3201, 3202, 3202, 3202, 3202,    0,    0,
        0, 3179, 3203, 3203, 3203, 3203, 3205, 3205, 3205, 3205,
     3200, 3206, 3206, 3206, 3206,    0,    0,    0, 3202, 3210,
     3210, 3210, 3210, 3214, 3214, 3214, 3214,    0,    0,    0,
     3205, 3215, 3215, 3215, 3215, 3216, 3216, 3216, 3216, 3217,
     3217, 3217, 3217, 3219, 3219, 3219, 3219, 3214,    0,    0,
     3205, 3220, 3220, 3220, 3220, 3221, 3221, 3221, 3221,    0,
        0,    0, 3220,    0,    0,    0, 3221,    0, 3220,    0,

        0,    0, 3221, 3222, 3222, 3222, 3222,    0, 3205,    0,
     3223, 3223, 3223, 3223, 3222, 3216, 3224, 3224, 3224, 3224,
     3222, 3223, 3216,    0, 3216,    0,    0, 3224,    0, 3227,
     3227, 3227, 3227, 3224,    0,    0,    0, 3216,    0, 3216,
     3216,    0,    0,    0, 3221, 3225, 3225, 3225, 3225, 3226,
     3226, 3226, 3226, 3227, 3220, 3227, 3225,    0,    0,    0,
     3226,    0, 3225,    0,    0,    0, 3226, 3228, 3228, 3228,
     3228,    0,    0,    0, 3224,    0,    0,    0, 3227, 3229,
     3229, 3229, 3229, 3230, 3230, 3230, 3230, 3233, 3233, 3233,
     3233, 3228,    0, 3228, 3234, 3234, 3234, 3234, 3235, 3235,

     3235, 3235,    0, 3229,    0, 3229,    0, 3230,    0, 3230,
        0, 3233,    0, 3233, 3241, 3241, 3241, 3241, 3234,    0,
     3234, 3242, 3242, 3242, 3242,    0, 3228, 3243, 3243, 3243,
     3243, 3244, 3244, 3244, 3244,    0,    0,    0, 3241,    0,
     3241,    0,    0, 3230,    0, 3242,    0, 3242,    0,    0,
        0, 3243,    0, 3243,    0, 3244,    0, 3244, 3245, 3245,
     3245, 3245, 3247, 3247, 3247, 3247,    0, 3255, 3255, 3255,
     3255, 3258, 3258, 3258, 3258,    0,    0, 3235,    0,    0,
        0, 3241, 3245, 3246, 3246, 3246, 3246, 3246, 3246, 3246,
     3246, 3246, 3246, 3246, 3246, 3246, 3246, 3246, 3246, 3246,

     3246, 3246, 3246, 3248, 3248, 3248, 3248,    0, 3246, 3246,
     3246, 3246, 3246, 3246, 3246, 3249, 3249, 3249, 3249, 3250,
     3250, 3250, 3250, 3266, 3266, 3266, 3266, 3248,    0, 3248,
     3251, 3251, 3251, 3251, 3246, 3246, 3246, 3246,    0, 3249,
        0, 3249,    0, 3250,    0, 3250, 3255,    0,    0, 3248,
     3252, 3252, 3252, 3252, 3251,    0, 3251,    0, 3253, 3253,
     3253, 3253,    0, 3246, 3246, 3246, 3246,    0,    0, 3254,
     3254, 3254, 3254,    0, 3252,    0, 3252, 3257, 3257, 3257,
     3257,    0, 3253, 3249, 3253, 3261, 3261, 3261, 3261,    0,
        0, 3250,    0, 3254, 3252, 3254,    0,    0, 3253,    0,

        0, 3257,    0, 3257, 3264, 3264, 3264, 3264,    0, 3261,
        0, 3261, 3267, 3267, 3267, 3267, 3268, 3268, 3268, 3268,
        0,    0, 3252, 3269, 3269, 3269, 3269,    0, 3264,    0,
     3264, 3270, 3270, 3270, 3270, 3271, 3271, 3271, 3271,    0,
        0,    0, 3254,    0, 3257, 3272, 3272, 3272, 3272, 3273,
     3273, 3273, 3273, 3283, 3283, 3283, 3283, 3299, 3299, 3299,
     3299, 3300, 3300, 3300, 3300,    0, 3273, 3301, 3301, 3301,
     3301,    0,    0, 3273, 3299, 3302, 3302, 3302, 3302,    0,
        0, 3299, 3305, 3305, 3305, 3305, 3306, 3306, 3306, 3306,
     3308, 3308, 3308, 3308, 3309, 3309, 3309, 3309,    0, 3302,

     3311, 3311, 3311, 3311, 3313, 3313, 3313, 3313, 3314, 3314,
     3314, 3314, 3315, 3315, 3315, 3315, 3316, 3316, 3316, 3316,
     3317, 3317, 3317, 3317, 3318, 3318, 3318, 3318,    0, 3299,
     3319, 3319, 3319, 3319, 3323, 3323, 3323, 3323, 3324, 3324,
     3324, 3324,    0,    0, 3317, 3327, 3327, 3327, 3327, 3328,
     3328, 3328, 3328, 3329, 3329, 3329, 3329, 3330, 3330, 3330,
     3330,    0, 3324,    0, 3329,    0,    0,    0, 3330,    0,
     3329,    0,    0,    0, 3330, 3331, 3331, 3331, 3331,    0,
        0,    0, 3324,    0,    0,    0, 3331, 3332, 3332, 3332,
     3332, 3333, 3333, 3333, 3333,    0,    0,    0, 3332,    0,

        0,    0, 3333,    0, 3332,    0,    0,    0, 3329,    0,
     3324, 3334, 3334, 3334, 3334, 3335, 3335, 3335, 3335,    0,
        0,    0, 3334, 3336, 3336, 3336, 3336, 3337, 3337, 3337,
     3337, 3338, 3338, 3338, 3338, 3340, 3340, 3340, 3340, 3335,
        0, 3335, 3341, 3341, 3341, 3341,    0, 3336,    0, 3336,
        0, 3337,    0, 3337, 3347, 3347, 3347, 3347,    0, 3340,
        0, 3340, 3348, 3348, 3348, 3348, 3349, 3349, 3349, 3349,
     3350, 3350, 3350, 3350, 3355, 3355, 3355, 3355, 3347,    0,
     3347, 3336, 3337,    0,    0,    0, 3348,    0, 3348,    0,
     3349,    0, 3349, 3356, 3356, 3356, 3356,    0, 3355,    0,

     3355, 3358, 3358, 3358, 3358, 3360, 3360, 3360, 3360,    0,
     3338, 3347, 3365, 3365, 3365, 3365,    0, 3356,    0, 3356,
        0, 3341,    0, 3349,    0, 3358,    0, 3358,    0, 3360,
        0,    0,    0, 3356, 3373, 3373, 3373, 3373, 3349, 3352,
     3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352,
     3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3395,
     3395, 3395, 3395,    0, 3352, 3352, 3352, 3352, 3352, 3352,
     3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352,
     3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352,
     3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352,

     3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352,
     3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352, 3352,
     3352, 3352, 3352, 3357, 3357, 3357, 3357, 3359, 3359, 3359,
     3359, 3361, 3361, 3361, 3361, 3362, 3362, 3362, 3362, 3363,
     3363, 3363, 3363, 3364, 3364, 3364, 3364, 3357,    0, 3357,
        0, 3359,    0, 3359,    0, 3361,    0, 3361,    0, 3362,
        0, 3362,    0, 3363,    0, 3363,    0, 3364,    0, 3364,
        0, 3359, 3367, 3367, 3367, 3367,    0, 3368, 3368, 3368,
     3368, 3363,    0,    0,    0, 3361,    0, 3374, 3374, 3374,
     3374,    0, 3394, 3394, 3394, 3394, 3357,    0,    0, 3359,

     3362, 3368,    0, 3368, 3374, 3396, 3396, 3396, 3396, 3394,
        0, 3374,    0,    0,    0, 3364, 3394, 3398, 3398, 3398,
     3398, 3399, 3399, 3399, 3399, 3400, 3400, 3400, 3400, 3396,
     3401, 3401, 3401, 3401, 3368, 3402, 3402, 3402, 3402, 3405,
     3405, 3405, 3405, 3406, 3406, 3406, 3406, 3407, 3407, 3407,
     3407, 3367, 3408, 3408, 3408, 3408, 3411, 3411, 3411, 3411,
        0, 3412, 3412, 3412, 3412, 3413, 3413, 3413, 3413,    0,
     3418, 3418, 3418, 3418,    0, 3419, 3419, 3419, 3419,    0,
     3411, 3418,    0,    0,    0, 3412, 3419, 3418, 3420, 3420,
     3420, 3420, 3421, 3421, 3421, 3421,    0,    0,    0, 3420,

     3422, 3422, 3422, 3422, 3407, 3412, 3426, 3426, 3426, 3426,
     3430, 3430, 3430, 3430,    0,    0, 3421,    0, 3421, 3407,
     3431, 3431, 3431, 3431, 3432, 3432, 3432, 3432,    0,    0,
     3426,    0, 3426, 3412,    0,    0,    0, 3430, 3433, 3433,
     3433, 3433,    0, 3418,    0,    0,    0, 3431, 3432, 3421,
     3432, 3434, 3434, 3434, 3434, 3435, 3435, 3435, 3435,    0,
        0,    0, 3433,    0, 3433, 3426, 3432, 3436, 3436, 3436,
     3436, 3437, 3437, 3437, 3437, 3434,    0, 3434,    0, 3435,
     3438, 3438, 3438, 3438,    0, 3439, 3439, 3439, 3439, 3440,
     3440, 3440, 3440,    0,    0, 3437,    0, 3437, 3441, 3441,

     3441, 3441,    0,    0, 3438,    0, 3438,    0,    0, 3439,
     3433, 3439,    0, 3440,    0, 3440,    0, 3437, 3443, 3443,
     3443, 3443, 3444, 3444, 3444, 3444, 3456, 3456, 3456, 3456,
        0,    0, 3439, 3457, 3457, 3457, 3457, 3458, 3458, 3458,
     3458,    0, 3443,    0, 3443,    0,    0,    0, 3438,    0,
     3456, 3460, 3460, 3460, 3460, 3461, 3461, 3461, 3461,    0,
        0, 3458, 3465, 3465, 3465, 3465, 3466, 3466, 3466, 3466,
     3470, 3470, 3470, 3470,    0,    0,    0, 3443, 3471, 3471,
     3471, 3471, 3473, 3473, 3473, 3473, 3465,    0,    0, 3471,
     3472, 3472, 3472, 3472, 3470, 3471, 3477, 3477, 3477, 3477,

        0, 3444, 3478, 3478, 3478, 3478, 3480, 3480, 3480, 3480,
     3481, 3481, 3481, 3481, 3472,    0, 3472, 3482, 3482, 3482,
     3482,    0,    0, 3477, 3483, 3483, 3483, 3483,    0, 3478,
     3480,    0, 3480,    0, 3481,    0, 3481, 3484, 3484, 3484,
     3484, 3471, 3485, 3485, 3485, 3485,    0,    0, 3483, 3472,
     3483,    0,    0, 3480, 3486, 3486, 3486, 3486,    0,    0,
        0, 3484,    0, 3484, 3483,    0, 3485,    0, 3485, 3487,
     3487, 3487, 3487, 3488, 3488, 3488, 3488,    0, 3486,    0,
     3486, 3490, 3490, 3490, 3490,    0,    0,    0, 3485, 3498,
     3498, 3498, 3498, 3487, 3499, 3499, 3499, 3499, 3503, 3503,

     3503, 3503, 3507, 3507, 3507, 3507, 3508, 3508, 3508, 3508,
     3484,    0, 3509, 3509, 3509, 3509,    0,    0, 3499,    0,
        0,    0, 3503, 3509,    0,    0, 3507,    0,    0, 3509,
     3510, 3510, 3510, 3510,    0, 3513, 3513, 3513, 3513, 3514,
     3514, 3514, 3514, 3515, 3515, 3515, 3515, 3516, 3516, 3516,
     3516, 3517, 3517, 3517, 3517, 3518, 3518, 3518, 3518, 3513,
     3490, 3513,    0, 3514,    0, 3514,    0, 3515,    0,    0,
        0, 3516,    0, 3516,    0, 3517,    0, 3517,    0,    0,
     3509, 3513, 3519, 3519, 3519, 3519,    0,    0,    0, 3516,
     3524, 3524, 3524, 3524, 3525, 3525, 3525, 3525, 3528, 3528,

     3528, 3528, 3529, 3529, 3529, 3529,    0,    0, 3532, 3532,
     3532, 3532, 3535, 3535, 3535, 3535,    0,    0, 3525, 3532,
        0,    0, 3528, 3517,    0, 3532, 3536, 3536, 3536, 3536,
     3537, 3537, 3537, 3537, 3539, 3539, 3539, 3539, 3540, 3540,
     3540, 3540, 3543, 3543, 3543, 3543, 3544, 3544, 3544, 3544,
     3536,    0, 3536,    0, 3537,    0, 3537, 3544, 3545, 3545,
     3545, 3545, 3540, 3544,    0,    0, 3543, 3547, 3547, 3547,
     3547,    0,    0, 3536,    0, 3532, 3548, 3548, 3548, 3548,
     3549, 3549, 3549, 3549, 3551, 3551, 3551, 3551,    0,    0,
        0, 3547,    0, 3547, 3552, 3552, 3552, 3552,    0,    0,

     3548,    0, 3548,    0, 3549, 3553, 3553, 3553, 3553, 3555,
     3555, 3555, 3555, 3547, 3556, 3556, 3556, 3556, 3552, 3557,
     3557, 3557, 3557, 3558, 3558, 3558, 3558,    0,    0,    0,
     3557,    0,    0, 3555,    0,    0,    0, 3545, 3560, 3560,
     3560, 3560, 3561, 3561, 3561, 3561, 3562, 3562, 3562, 3562,
     3563, 3563, 3563, 3563, 3564, 3564, 3564, 3564, 3565, 3565,
     3565, 3565, 3566, 3566, 3566, 3566, 3568, 3568, 3568, 3568,
        0,    0,    0, 3562, 3569, 3569, 3569, 3569, 3564, 3569,
     3570, 3570, 3570, 3570, 3569, 3571, 3571, 3571, 3571, 3572,
     3572, 3572, 3572, 3568, 3572, 3575, 3575, 3575, 3575, 3572,

     3576, 3576, 3576, 3576, 3578, 3578, 3578, 3578,    0, 3571,
     3579, 3579, 3579, 3579,    0,    0,    0, 3560, 3580, 3580,
     3580, 3580,    0, 3580, 3576,    0,    0,    0, 3580, 3581,
     3581, 3581, 3581,    0, 3579, 3582, 3582, 3582, 3582, 3583,
     3583, 3583, 3583, 3569,    0,    0, 3580, 3584, 3584, 3584,
     3584, 3586, 3586, 3586, 3586,    0,    0,    0, 3572, 3582,
     3587, 3587, 3587, 3587,    0,    0,    0, 3583, 3588, 3588,
     3588, 3588,    0,    0,    0, 3584, 3589, 3589, 3589, 3589,
     3590, 3590, 3590, 3590, 3587, 3591, 3591, 3591, 3591, 3592,
     3592, 3592, 3592, 3593, 3593, 3593, 3593,    0,    0,    0,

     3589, 3594, 3594, 3594, 3594, 3595, 3595, 3595, 3595, 3591,
     3596, 3596, 3596, 3596,    0,    0,    0, 3593, 3597, 3597,
     3597, 3597, 3598, 3598, 3598, 3598,    0,    0,    0, 3595,
     3599, 3599, 3599, 3599, 3600, 3600, 3600, 3600, 3601, 3601,
     3601, 3601, 3597, 3602, 3602, 3602, 3602, 3603, 3603, 3603,
     3603,    0,    0,    0, 3599, 3604, 3604, 3604, 3604,    0,
        0,    0, 3601, 3605, 3605, 3605, 3605, 3606, 3606, 3606,
     3606, 3603, 3607, 3607, 3607, 3607, 3608, 3608, 3608, 3608,
     3609, 3609, 3609, 3609,    0,    0,    0, 3605, 3610, 3610,
     3610, 3610, 3611, 3611, 3611, 3611, 3607, 3612, 3612, 3612,

     3612,    0,    0,    0, 3609, 3613, 3613, 3613, 3613, 3614,
     3614, 3614, 3614,    0,    0,    0, 3611, 3615, 3615, 3615,
     3615, 3616, 3616, 3616, 3616, 3617, 3617, 3617, 3617, 3613,
     3618, 3618, 3618, 3618, 3619, 3619, 3619, 3619,    0,    0,
        0, 3615, 3620, 3620, 3620, 3620,    0,    0,    0, 3617,
     3621, 3621, 3621, 3621, 3622, 3622, 3622, 3622, 3619, 3623,
     3623, 3623, 3623, 3624, 3624, 3624, 3624, 3625, 3625, 3625,
     3625,    0,    0,    0, 3621, 3626, 3626, 3626, 3626, 3627,
     3627, 3627, 3627, 3623, 3628, 3628, 3628, 3628,    0,    0,
        0, 3625, 3629, 3629, 3629, 3629, 3630, 3630, 3630, 3630,

        0,    0,    0, 3627, 3631, 3631, 3631, 3631, 3632, 3632,
     3632, 3632, 3633, 3633, 3633, 3633, 3629, 3634, 3634, 3634,
     3634, 3635, 3635, 3635, 3635,    0,    0,    0, 3631, 3636,
     3636, 3636, 3636,    0,    0,    0, 3633, 3637, 3637, 3637,
     3637, 3638, 3638, 3638, 3638, 3635, 3639, 3639, 3639, 3639,
     3640, 3640, 3640, 3640, 3641, 3641, 3641, 3641,    0,    0,
        0, 3637, 3642, 3642, 3642, 3642, 3643, 3643, 3643, 3643,
     3639, 3644, 3644, 3644, 3644,    0,    0,    0, 3641, 3645,
     3645, 3645, 3645, 3646, 3646, 3646, 3646,    0,    0,    0,
     3643, 3647, 3647, 3647, 3647, 3648, 3648, 3648, 3648, 3649,

     3649, 3649, 3649, 3645, 3650, 3650, 3650, 3650, 3651, 3651,
     3651, 3651,    0,    0,    0, 3647, 3652, 3652, 3652, 3652,
        0,    0,    0, 3649, 3653, 3653, 3653, 3653, 3654, 3654,
     3654, 3654, 3651, 3655, 3655, 3655, 3655, 3656, 3656, 3656,
     3656, 3657, 3657, 3657, 3657,    0,    0,    0, 3653, 3658,
     3658, 3658, 3658, 3659, 3659, 3659, 3659, 3655, 3660, 3660,
     3660, 3660,    0,    0,    0, 3657, 3661, 3661, 3661, 3661,
     3662, 3662, 3662, 3662,    0,    0,    0, 3659, 3663, 3663,
     3663, 3663, 3664, 3664, 3664, 3664, 3665, 3665, 3665, 3665,
     3661, 3666, 3666, 3666, 3666, 3667, 3667, 3667, 3667,    0,

        0,    0, 3663, 3668, 3668, 3668, 3668,    0,    0,    0,
     3665, 3669, 3669, 3669, 3669, 3670, 3670, 3670, 3670, 3667,
     3671, 3671, 3671, 3671, 3672, 3672, 3672, 3672, 3673, 3673,
     3673, 3673,    0,    0,    0, 3669, 3674, 3674, 3674, 3674,
     3675, 3675, 3675, 3675, 3671, 3676, 3676, 3676, 3676,    0,
        0,    0, 3673, 3677, 3677, 3677, 3677, 3678, 3678, 3678,
     3678,    0,    0,    0, 3675, 3679, 3679, 3679, 3679, 3680,
     3680, 3680, 3680, 3681, 3681, 3681, 3681, 3677, 3682, 3682,
     3682, 3682, 3683, 3683, 3683, 3683,    0,    0,    0, 3679,
     3684, 3684, 3684, 3684,    0,    0,    0, 3681, 3685, 3685,

     3685, 3685, 3686, 3686, 3686, 3686, 3683, 3687, 3687, 3687,
     3687, 3688, 3688, 3688, 3688, 3689, 3689, 3689, 3689,    0,
        0,    0, 3685, 3690, 3690, 3690, 3690, 3691, 3691, 3691,
     3691, 3687, 3692, 3692, 3692, 3692,    0,    0,    0, 3689,
     3693, 3693, 3693, 3693, 3694, 3694, 3694, 3694,    0,    0,
        0, 3691, 3695, 3695, 3695, 3695, 3696, 3696, 3696, 3696,
     3697, 3697, 3697, 3697, 3693, 3698, 3698, 3698, 3698, 3699,
     3699, 3699, 3699,    0,    0,    0, 3695, 3700, 3700, 3700,
     3700,    0,    0,    0, 3697, 3701, 3701, 3701, 3701, 3702,
     3702, 3702, 3702, 3699, 3703, 3703, 3703, 3703, 3704, 3704,

     3704, 3704,    0,    0,    0,    0,    0,    0,    0, 3701,
        0,    0,    0,    0,    0,    0,    0,    0, 3703, 3706,
     3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706,
     3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706,
     3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706,
     3706, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707,
     3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707,
     3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707, 3707,
     3707, 3707, 3707, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,

     3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708, 3708,
     3708, 3708, 3708, 3708, 3708, 3709, 3709, 3709, 3709, 3709,
     3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709,
     3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709, 3709,
     3709, 3709, 3709, 3709, 3709, 3709, 3709, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3711,
     3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711,
     3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711,

     3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711, 3711,
     3711, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712,
     3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712,
     3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712,
     3712, 3712, 3712, 3713, 3713, 3713, 3713, 3713, 3713, 3713,
     3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713,
     3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713,
     3713, 3713, 3713, 3713, 3713, 3714, 3714, 3714, 3714, 3714,
     3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714,
     3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714,

     3714, 3714, 3714, 3714, 3714, 3714, 3714, 3715, 3715, 3715,
     3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715,
     3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715,
     3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3716,
     3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716,
     3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716,
     3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716,
     3716, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717,
     3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717,
     3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717,

     3717, 3717, 3717, 3718, 3718, 3718, 3718, 3718, 3718, 3718,
     3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718,
     3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718,
     3718, 3718, 3718, 3718, 3718, 3719, 3719, 3719, 3719, 3719,
     3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719,
     3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719,
     3719, 3719, 3719, 3719, 3719, 3719, 3719, 3720, 3720, 3720,
     3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720,
     3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720,
     3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3721,

     3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721,
     3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721,
     3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721,
     3721, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722,
     3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722,
     3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722, 3722,
     3722, 3722, 3722, 3723, 3723, 3723, 3723, 3723, 3723, 3723,
     3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723,
     3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723, 3723,
     3723, 3723, 3723, 3723, 3723, 3724, 3724, 3724, 3724, 3724,

     3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724,
     3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724, 3724,
     3724, 3724, 3724, 3724, 3724, 3724, 3724, 3725, 3725, 3725,
     3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725,
     3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725,
     3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3726,
     3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726,
     3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726,
     3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726, 3726,
     3726, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727,

     3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727,
     3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727, 3727,
     3727, 3727, 3727, 3728, 3728, 3728, 3728, 3728, 3728, 3728,
     3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728,
     3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728, 3728,
     3728, 3728, 3728, 3728, 3728, 3729, 3729, 3729, 3729, 3729,
     3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729,
     3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729, 3729,
     3729, 3729, 3729, 3729, 3729, 3729, 3729, 3730, 3730, 3730,
     3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730,

     3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730,
     3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3731,
     3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731,
     3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731,
     3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731,
     3731, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732,
     3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732,
     3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732, 3732,
     3732, 3732, 3732, 3733, 3733, 3733, 3733, 3733, 3733, 3733,
     3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733,

     3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733,
     3733, 3733, 3733, 3733, 3733, 3734, 3734, 3734, 3734, 3734,
     3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734,
     3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734, 3734,
     3734, 3734, 3734, 3734, 3734, 3734, 3734, 3735, 3735, 3735,
     3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735,
     3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735,
     3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735, 3735, 3736,
     3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736,
     3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736,

     3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736,
     3736, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737,
     3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737,
     3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737, 3737,
     3737, 3737, 3737, 3738, 3738, 3738, 3738, 3738, 3738, 3738,
     3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738,
     3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738, 3738,
     3738, 3738, 3738, 3738, 3738, 3739, 3739, 3739, 3739, 3739,
     3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739,
     3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739,

     3739, 3739, 3739, 3739, 3739, 3739, 3739, 3740, 3740, 3740,
     3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740,
     3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740,
     3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3740, 3741,
     3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741,
     3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741,
     3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741, 3741,
     3741, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742,
     3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742,
     3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742, 3742,

     3742, 3742, 3742, 3743, 3743, 3743, 3743, 3743, 3743, 3743,
     3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743,
     3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743, 3743,
     3743, 3743, 3743, 3743, 3743, 3744, 3744, 3744, 3744, 3744,
     3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744,
     3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744, 3744,
     3744, 3744, 3744, 3744, 3744, 3744, 3744, 3745, 3745, 3745,
     3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745,
     3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745,
     3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3746,

     3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746,
     3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746,
     3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746,
     3746, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747,
     3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747,
     3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747, 3747,
     3747, 3747, 3747, 3748, 3748, 3748, 3748, 3748, 3748, 3748,
     3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748,
     3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748,
     3748, 3748, 3748, 3748, 3748, 3749, 3749, 3749, 3749, 3749,

     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3750, 3750, 3750,
     3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750,
     3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750,
     3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750, 3750, 3751,
     3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751,
     3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751,
     3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751, 3751,
     3751, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752,

     3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752,
     3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752, 3752,
     3752, 3752, 3752, 3753, 3753, 3753, 3753, 3753, 3753, 3753,
     3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753,
     3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753,
     3753, 3753, 3753, 3753, 3753, 3754, 3754, 3754, 3754, 3754,
     3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754,
     3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754,
     3754, 3754, 3754, 3754, 3754, 3754, 3754, 3755, 3755, 3755,
     3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755,

     3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755,
     3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3756,
     3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756,
     3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756,
     3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756, 3756,
     3756, 3757, 3757, 3757, 3757, 3757, 3757, 3757, 3757, 3757,
     3757, 3757, 3757, 3757, 3757, 3757, 3757, 3757, 3757, 3757,
     3757, 3757, 3757, 3757, 3757, 3757, 3757, 3757, 3757, 3757,
     3757, 3757, 3757, 3758, 3758, 3758, 3758, 3758, 3758, 3758,
     3758, 3758, 3758, 3758, 3758, 3758, 3758, 3758, 3758, 3758,

     3758, 3758, 3758, 3758, 3758, 3758, 3758, 3758, 3758, 3758,
     3758, 3758, 3758, 3758, 3758, 3759, 3759, 3759, 3759, 3759,
     3759, 3759, 3759, 3759, 3759, 3759, 3759, 3759, 3759, 3759,
     3759, 3759, 3759, 3759, 3759, 3759, 3759, 3759, 3759, 3759,
     3759, 3759, 3759, 3759, 3759, 3759, 3759, 3760, 3760, 3760,
     3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760,
     3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760,
     3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3761,
     3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761,
     3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761,

     3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761,
     3761, 3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762,
     3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762,
     3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762,
     3762, 3762, 3762, 3763, 3763, 3763, 3763, 3763, 3763, 3763,
     3763, 3763, 3763, 3763, 3763, 3763, 3763, 3763, 3763, 3763,
     3763, 3763, 3763, 3763, 3763, 3763, 3763, 3763, 3763, 3763,
     3763, 3763, 3763, 3763, 3763, 3764, 3764, 3764, 3764, 3764,
     3764, 3764, 3764, 3764, 3764, 3764, 3764, 3764, 3764, 3764,
     3764, 3764, 3764, 3764, 3764, 3764, 3764, 3764, 3764, 3764,

     3764, 3764, 3764, 3764, 3764, 3764, 3764, 3765, 3765, 3765,
     3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765,
     3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765,
     3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765, 3766,
     3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766,
     3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766,
     3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766,
     3766, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767,
     3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767,
     3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767,

     3767, 3767, 3767, 3769,    0,    0,    0,    0,    0,    0,
        0,    0, 3769,    0,    0,    0,    0,    0, 3769,    0,
        0,    0,    0,    0,    0, 3769,    0,    0,    0,    0,
        0,    0,    0, 3769, 3770, 3770, 3770,    0,    0,    0,
     3770,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3770,    0,    0,    0,
        0,    0,    0,    0, 3770, 3771, 3771, 3771, 3771,    0,
        0, 3771,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3771,    0,    0,    0,    0,    0, 3771,    0,    0,
        0,    0,    0,    0, 3771, 3771, 3772, 3772, 3772,    0,

        0,    0, 3772,    0,    0,    0,    0,    0,    0, 3772,
        0,    0,    0,    0,    0,    0,    0,    0, 3772,    0,
        0,    0,    0,    0,    0, 3772, 3772, 3773, 3773, 3773,
        0,    0,    0,    0,    0,    0, 3773,    0,    0, 3773,
     3773,    0, 3773, 3773, 3773, 3773,    0,    0,    0, 3773,
        0,    0,    0,    0,    0,    0,    0, 3773, 3774, 3774,
     3774,    0,    0,    0, 3774,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3774,    0,    0,    0,    0,    0,    0,    0, 3774, 3775,
     3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775,

     3775, 3775,    0, 3775, 3775, 3775, 3775, 3775, 3775, 3775,
     3775, 3775, 3775, 3775, 3775, 3775, 3775,    0, 3775, 3775,
     3775, 3776, 3776, 3776,    0,    0,    0, 3776,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3776,    0,    0,    0,    0,    0,    0,
        0, 3776, 3777, 3777, 3777, 3777,    0,    0, 3777,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3777,    0,
        0,    0,    0,    0, 3777,    0,    0,    0,    0,    0,
        0, 3777, 3777, 3778, 3778, 3778,    0,    0,    0,    0,
        0,    0, 3778,    0,    0,    0,    0,    0, 3778, 3778,

        0,    0,    0,    0,    0, 3778,    0,    0,    0,    0,
        0,    0,    0, 3778, 3782,    0,    0,    0, 3782,    0,
     3782,    0,    0, 3782,    0,    0,    0, 3782,    0,    0,
        0,    0,    0,    0,    0, 3782, 3783, 3783,    0, 3783,
     3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783,
     3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783,
     3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783, 3790, 3790,
     3790,    0,    0,    0, 3790,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3790,    0,    0,    0,    0, 3790,    0,    0, 3790, 3792,

     3792, 3792,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3792,    0, 3792, 3792,    0,    0,    0,    0,
        0, 3792,    0, 3792,    0,    0,    0,    0,    0, 3792,
     3794, 3794,    0, 3794, 3794, 3794, 3794, 3794, 3794,    0,
     3794, 3794, 3794, 3794, 3794, 3794, 3794, 3794, 3794, 3794,
     3794, 3794, 3794, 3794, 3794, 3794, 3794, 3794, 3794, 3794,
     3794, 3794, 3795, 3795, 3795,    0,    0,    0, 3795,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3795,    0,    0,    0,    0,    0,
        0,    0, 3795, 3796, 3796, 3796, 3796,    0,    0, 3796,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 3796,
        0,    0,    0,    0,    0, 3796,    0,    0,    0,    0,
        0,    0, 3796, 3796, 3797, 3797, 3797,    0,    0,    0,
     3797, 3797,    0,    0,    0, 3797,    0,    0,    0,    0,
     3797,    0,    0,    0,    0,    0, 3797,    0,    0,    0,
     3797,    0,    0,    0, 3797, 3800, 3800, 3800,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3800, 3800,    0, 3800,    0,    0,    0, 3800,    0,    0,
        0,    0,    0,    0,    0, 3800, 3801, 3801, 3801, 3801,
     3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801,

     3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801,
     3801, 3801, 3801, 3801, 3801, 3801, 3801, 3801, 3802, 3802,
        0, 3802, 3802, 3802, 3802, 3802, 3802, 3802, 3802, 3802,
     3802, 3802, 3802, 3802, 3802, 3802, 3802,    0, 3802, 3802,
     3802, 3802, 3802, 3802, 3802, 3802, 3802, 3802, 3802, 3802,
     3803, 3803, 3803,    0,    0,    0, 3803,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3803,    0,    0,    0,    0,    0,    0,    0,
     3803, 3804, 3804, 3804, 3804,    0,    0, 3804,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3804,    0,    0,

        0,    0,    0, 3804,    0,    0,    0,    0,    0,    0,
     3804, 3804, 3805, 3805, 3805,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3805, 3805,    0,
     3805,    0,    0,    0, 3805,    0,    0,    0,    0,    0,
        0,    0, 3805, 3810, 3810,    0,    0, 3810,    0,    0,
     3810, 3810,    0, 3810, 3810, 3810, 3810, 3810,    0, 3810,
     3810, 3810, 3810, 3810, 3810,    0, 3810, 3810, 3810, 3810,
     3810,    0,    0, 3810, 3810, 3811, 3811,    0, 3811, 3811,
     3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811,
     3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811, 3811,

     3811, 3811, 3811, 3811, 3811, 3811, 3811, 3812, 3812,    0,
     3812, 3812, 3812, 3812, 3812, 3812,    0, 3812, 3812, 3812,
     3812, 3812, 3812, 3812, 3812, 3812, 3812, 3812, 3812, 3812,
     3812, 3812, 3812, 3812, 3812, 3812, 3812, 3812, 3812, 3814,
     3814, 3814,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3814,    0, 3814, 3814,    0,    0,    0,    0,
        0, 3814,    0,    0,    0,    0,    0,    0,    0, 3814,
     3815, 3815, 3815,    0,    0,    0, 3815,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3815,    0,    0,    0,    0,    0,    0,    0,

     3815, 3816, 3816, 3816, 3816,    0,    0, 3816,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3816,    0,    0,
        0,    0,    0, 3816,    0,    0,    0,    0,    0,    0,
     3816, 3816, 3817, 3817, 3817,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3817, 3817,    0,
        0,    0,    0,    0, 3817,    0,    0,    0,    0,    0,
        0,    0, 3817, 3818, 3818,    0, 3818, 3818,    0,    0,
     3818, 3818,    0, 3818, 3818, 3818, 3818, 3818,    0, 3818,
     3818, 3818, 3818, 3818, 3818,    0, 3818, 3818,    0, 3818,
     3818,    0,    0, 3818, 3818, 3819, 3819,    0, 3819, 3819,

     3819, 3819, 3819, 3819,    0, 3819, 3819, 3819, 3819, 3819,
     3819, 3819, 3819, 3819, 3819, 3819, 3819, 3819, 3819, 3819,
     3819, 3819, 3819, 3819, 3819, 3819, 3819, 3820, 3820,    0,
     3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820,
     3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820,
     3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820, 3821,
     3821,    0, 3821, 3821, 3821, 3821, 3821, 3821, 3821, 3821,
     3821,    0, 3821, 3821, 3821, 3821, 3821, 3821, 3821, 3821,
     3821, 3821, 3821, 3821, 3821, 3821, 3821, 3821, 3821, 3821,
     3821, 3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822,

     3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822,
     3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822, 3822,
     3822, 3822, 3822, 3823, 3823,    0, 3823, 3823,    0, 3823,
     3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823,
     3823, 3823, 3823, 3823, 3823, 3823, 3823,    0, 3823,    0,
     3823, 3823, 3823, 3823, 3823, 3824, 3824,    0, 3824, 3824,
     3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
     3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
     3824, 3824, 3824, 3824, 3824, 3824, 3824, 3827,    0,    0,
        0, 3827, 3827, 3827, 3827, 3827, 3827, 3827, 3827,    0,

     3827,    0,    0, 3827, 3827, 3827, 3827, 3827, 3827, 3827,
     3827, 3827, 3827, 3827, 3827, 3827, 3827, 3827, 3827, 3829,
        0, 3829,    0,    0,    0,    0,    0,    0, 3829,    0,
     3829,    0,    0,    0,    0,    0, 3829, 3831, 3831, 3831,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3831,    0, 3831,    0,    0,    0,    0,    0,    0, 3831,
        0,    0,    0,    0,    0,    0,    0, 3831, 3833, 3833,
     3833,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3833,    0,    0,    0,    0,    0,    0,
     3833,    0, 3833,    0,    0,    0,    0,    0, 3833, 3836,

     3836,    0, 3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836,
     3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836,
     3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836, 3836,
     3836, 3838,    0,    0,    0, 3838,    0,    0,    0,    0,
        0,    0, 3838,    0,    0,    0,    0,    0,    0, 3838,
        0,    0,    0,    0,    0,    0,    0, 3838, 3841, 3841,
        0, 3841, 3841,    0, 3841, 3841, 3841, 3841, 3841, 3841,
     3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841,
     3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841,
     3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844,

     3844,    0, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844,
     3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844,
     3844, 3844, 3846, 3846, 3846,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3846, 3846,    0,
        0,    0,    0,    0, 3846,    0,    0,    0,    0,    0,
        0,    0, 3846, 3847, 3847, 3847, 3847, 3847, 3847, 3847,
     3847, 3847, 3847, 3847,    0, 3847, 3847, 3847, 3847, 3847,
     3847, 3847, 3847, 3847, 3847, 3847, 3847, 3847, 3847, 3847,
     3847, 3847, 3847, 3847, 3847, 3849, 3849,    0, 3849,    0,
        0,    0, 3849,    0,    0,    0,    0,    0,    0,    0,

     3849, 3856, 3856,    0, 3856, 3856, 3856, 3856, 3856, 3856,
        0, 3856, 3856, 3856, 3856, 3856, 3856, 3856, 3856, 3856,
     3856, 3856, 3856, 3856, 3856, 3856, 3856, 3856, 3856, 3856,
     3856, 3856, 3856, 3857, 3857, 3857,    0,    0,    0, 3857,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3857,    0,    0,    0,    0,
        0,    0,    0, 3857, 3858, 3858, 3858,    0,    0,    0,
        0,    0,    0,    0,    0, 3858,    0,    0,    0, 3858,
        0,    0,    0,    0,    0,    0, 3858,    0,    0,    0,
        0,    0,    0,    0, 3858, 3859, 3859, 3859,    0,    0,

        0, 3859, 3859,    0,    0,    0, 3859,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3859,    0,    0,
        0,    0,    0,    0,    0, 3859, 3860, 3860, 3860,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3860,    0,    0,    0,    0,    0,    0, 3860, 3860,
        0,    0,    0,    0,    0,    0, 3860, 3861, 3861, 3861,
        0,    0,    0, 3861,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3861,
        0,    0,    0,    0,    0,    0,    0, 3861, 3862, 3862,
     3862, 3862,    0,    0, 3862,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 3862,    0,    0,    0,    0,    0,
     3862,    0,    0,    0,    0,    0,    0, 3862, 3862, 3863,
     3863, 3863,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3863, 3863,    0,    0,    0,    0,
        0, 3863,    0,    0,    0,    0,    0,    0,    0, 3863,
     3864, 3864,    0, 3864, 3864, 3864, 3864, 3864, 3864, 3864,
     3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864,
     3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864,
     3864, 3864, 3865,    0,    0,    0, 3865,    0,    0, 3865,
     3865,    0,    0,    0, 3865, 3865, 3865,    0, 3865, 3865,

     3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865, 3865,
     3865, 3865, 3865, 3865, 3866, 3866,    0, 3866, 3866, 3866,
     3866, 3866, 3866,    0, 3866, 3866, 3866, 3866, 3866, 3866,
     3866, 3866, 3866, 3866, 3866, 3866, 3866, 3866, 3866, 3866,
     3866, 3866, 3866, 3866, 3866, 3866, 3871, 3871,    0, 3871,
     3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871,
     3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871,
     3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3872, 3872,
        0, 3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872,
     3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872,

     3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872,
     3873, 3873,    0, 3873, 3873,    0, 3873, 3873, 3873,    0,
        0,    0, 3873, 3873, 3873, 3873, 3873, 3873, 3873, 3873,
     3873, 3873, 3873, 3873, 3873, 3873, 3873, 3873, 3873, 3873,
     3873, 3873, 3874, 3874,    0, 3874, 3874, 3874, 3874, 3874,
     3874,    0, 3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874,
     3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874, 3874,
     3874, 3874, 3874, 3874, 3875, 3875,    0, 3875, 3875,    0,
     3875, 3875, 3875,    0, 3875, 3875, 3875, 3875, 3875,    0,
     3875, 3875, 3875, 3875, 3875, 3875, 3875, 3875, 3875, 3875,

     3875, 3875,    0,    0, 3875, 3875, 3876, 3876,    0, 3876,
     3876, 3876, 3876, 3876, 3876,    0, 3876, 3876, 3876, 3876,
     3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876,
     3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876, 3877, 3877,
        0, 3877, 3877,    0, 3877, 3877, 3877,    0,    0,    0,
     3877, 3877, 3877,    0, 3877, 3877, 3877, 3877, 3877, 3877,
     3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877,
     3878, 3878,    0, 3878, 3878, 3878, 3878, 3878, 3878,    0,
     3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878,
     3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878,

     3878, 3878, 3879, 3879,    0, 3879, 3879,    0, 3879, 3879,
     3879,    0, 3879, 3879, 3879, 3879, 3879,    0, 3879, 3879,
     3879, 3879, 3879, 3879, 3879, 3879, 3879, 3879, 3879, 3879,
        0,    0, 3879, 3879, 3880, 3880,    0, 3880, 3880, 3880,
     3880, 3880, 3880,    0, 3880, 3880, 3880, 3880, 3880, 3880,
     3880, 3880, 3880, 3880, 3880, 3880, 3880, 3880, 3880, 3880,
     3880, 3880, 3880, 3880, 3880, 3880, 3882, 3882,    0, 3882,
     3882, 3882, 3882, 3882, 3882,    0, 3882, 3882, 3882, 3882,
     3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882,
     3882, 3882, 3882, 3882, 3882, 3882, 3882, 3882, 3884, 3884,

        0, 3884, 3884,    0, 3884, 3884, 3884,    0, 3884, 3884,
     3884, 3884, 3884, 3884, 3884, 3884, 3884, 3884, 3884, 3884,
     3884, 3884, 3884,    0, 3884, 3884, 3884, 3884, 3884, 3884,
     3885, 3885,    0, 3885, 3885, 3885, 3885, 3885, 3885, 3885,
     3885, 3885, 3885, 3885, 3885, 3885, 3885, 3885, 3885, 3885,
     3885, 3885, 3885, 3885, 3885, 3885, 3885, 3885, 3885, 3885,
     3885, 3885, 3886, 3886,    0, 3886, 3886,    0, 3886, 3886,
     3886,    0,    0,    0, 3886, 3886, 3886,    0, 3886, 3886,
     3886, 3886, 3886, 3886, 3886, 3886, 3886, 3886, 3886, 3886,
     3886, 3886, 3886, 3886, 3887, 3887,    0, 3887, 3887, 3887,

     3887, 3887, 3887, 3887, 3887, 3887,    0, 3887, 3887, 3887,
     3887, 3887, 3887, 3887, 3887, 3887,    0, 3887, 3887,    0,
     3887, 3887, 3887, 3887, 3887, 3887, 3888, 3888,    0, 3888,
     3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888,
     3888, 3888, 3888, 3888, 3888, 3888, 3888, 3888,    0, 3888,
     3888,    0, 3888, 3888, 3888, 3888, 3888, 3888, 3889, 3889,
     3889,    0,    0,    0, 3889,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3889, 3889,    0,    0,    0,    0,    0,    0, 3889, 3891,
     3891, 3891,    0,    0,    0,    0,    0,    0,    0, 3891,

        0, 3891,    0,    0, 3891,    0,    0,    0,    0,    0,
        0, 3891,    0,    0,    0,    0,    0,    0,    0, 3891,
     3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892,
     3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892,
     3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892,
     3892, 3892, 3893, 3893, 3893,    0,    0,    0, 3893,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3893,    0,    0,    0,    0,    0,
        0,    0, 3893, 3895, 3895, 3895,    0,    0,    0,    0,
        0,    0, 3895,    0,    0,    0,    0,    0, 3895,    0,

        0,    0,    0,    0,    0, 3895,    0,    0,    0,    0,
        0,    0,    0, 3895, 3896,    0,    0,    0,    0,    0,
     3896, 3896,    0,    0,    0, 3896,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3896,    0,    0,    0,
        0,    0,    0,    0, 3896, 3897, 3897, 3897,    0,    0,
        0, 3897,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3897,    0,    0,
        0,    0,    0,    0,    0, 3897, 3898, 3898, 3898, 3898,
        0,    0, 3898,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3898,    0,    0,    0,    0,    0, 3898,    0,

        0,    0,    0,    0,    0, 3898, 3898, 3899, 3899, 3899,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3899, 3899,    0,    0,    0,    0,    0, 3899,
        0,    0,    0,    0,    0,    0,    0, 3899, 3900, 3900,
     3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900,
     3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900,
     3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900,
     3901, 3901,    0, 3901, 3901, 3901, 3901, 3901, 3901, 3901,
     3901, 3901,    0, 3901, 3901,    0, 3901, 3901, 3901, 3901,
     3901, 3901,    0, 3901, 3901,    0, 3901, 3901, 3901, 3901,

     3901, 3901, 3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902,
     3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902,
     3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902,
     3902, 3902, 3902, 3902, 3903, 3903,    0, 3903, 3903, 3903,
     3903,    0, 3903, 3903, 3903, 3903,    0, 3903, 3903,    0,
     3903, 3903, 3903,    0, 3903, 3903,    0, 3903, 3903,    0,
        0, 3903, 3903, 3903, 3903, 3903, 3904,    0,    0,    0,
        0,    0,    0,    0,    0, 3904,    0,    0,    0,    0,
        0, 3904,    0,    0,    0,    0,    0,    0, 3904,    0,
        0,    0,    0,    0,    0,    0, 3904, 3905, 3905, 3905,

        0,    0,    0, 3905,    0,    0,    0,    0,    0,    0,
     3905,    0,    0,    0,    0,    0,    0,    0,    0, 3905,
        0,    0,    0,    0,    0,    0, 3905, 3905, 3906, 3906,
     3906,    0,    0,    0, 3906,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3906,    0,    0,    0,    0,    0,    0,    0, 3906, 3907,
     3907, 3907,    0,    0,    0,    0,    0,    0, 3907,    0,
        0, 3907,    0,    0, 3907,    0, 3907, 3907,    0,    0,
        0, 3907,    0,    0,    0,    0,    0,    0,    0, 3907,
     3909, 3909, 3909,    0,    0,    0,    0,    0,    0, 3909,

        0,    0, 3909, 3909,    0, 3909, 3909, 3909, 3909,    0,
        0,    0, 3909,    0,    0,    0,    0,    0,    0,    0,
     3909, 3910, 3910, 3910,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3910,    0, 3910,    0,    0,    0,
        0,    0,    0, 3910,    0,    0,    0,    0,    0,    0,
        0, 3910, 3911, 3911, 3911,    0,    0,    0, 3911,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3911,    0,    0,    0,    0,    0,
        0,    0, 3911, 3912, 3912, 3912,    0,    0,    0, 3912,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 3912,    0,    0,    0,    0,
        0,    0,    0, 3912, 3913, 3913, 3913,    0,    0,    0,
        0,    0,    0, 3913,    0,    0, 3913,    0,    0, 3913,
        0, 3913, 3913,    0,    0,    0, 3913,    0,    0,    0,
        0,    0,    0,    0, 3913, 3914, 3914, 3914, 3914, 3914,
     3914, 3914, 3914, 3914, 3914, 3914, 3914, 3914,    0, 3914,
     3914, 3914, 3914, 3914, 3914, 3914, 3914, 3914, 3914, 3914,
     3914, 3914, 3914,    0, 3914, 3914, 3914, 3915, 3915, 3915,
        0,    0,    0, 3915,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3915,

        0,    0,    0,    0,    0,    0,    0, 3915, 3916, 3916,
     3916,    0,    0,    0,    0,    0,    0, 3916,    0,    0,
        0,    0,    0, 3916,    0,    0,    0,    0,    0,    0,
     3916,    0,    0,    0,    0,    0,    0,    0, 3916, 3918,
     3918, 3918,    0,    0,    0,    0,    0,    0, 3918,    0,
        0,    0,    0,    0, 3918, 3918,    0,    0,    0,    0,
        0, 3918,    0,    0,    0,    0,    0,    0,    0, 3918,
     3920,    0,    0,    0, 3920,    0, 3920,    0,    0, 3920,
        0,    0,    0, 3920,    0,    0,    0,    0,    0,    0,
        0, 3920, 3923, 3923,    0, 3923, 3923, 3923, 3923, 3923,

     3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923,
     3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923,
     3923, 3923, 3923, 3923, 3927, 3927, 3927,    0,    0,    0,
     3927,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3927,    0,    0,    0,
        0, 3927,    0,    0, 3927, 3928, 3928, 3928,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3928,    0,
     3928, 3928,    0,    0,    0,    0,    0, 3928,    0,    0,
        0,    0,    0,    0,    0, 3928, 3929, 3929, 3929,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3929,

        0, 3929, 3929,    0,    0,    0,    0,    0, 3929,    0,
     3929,    0,    0,    0,    0,    0, 3929, 3930, 3930, 3930,
        0,    0,    0, 3930,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3930,
        0,    0,    0,    0,    0,    0,    0, 3930, 3934, 3934,
        0, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934,
     3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934,
     3934, 3934, 3934,    0, 3934, 3934, 3934, 3934, 3934, 3934,
     3935, 3935,    0, 3935, 3935, 3935, 3935, 3935, 3935, 3935,
     3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935,

     3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935,
     3935, 3935, 3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936,
     3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936,
     3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936,
     3936, 3936, 3936, 3936, 3937, 3937, 3937,    0,    0,    0,
     3937,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3937,    0,    0,    0,
        0,    0,    0,    0, 3937, 3938, 3938, 3938,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3938,    0,    0, 3938,    0,    0,    0, 3938,    0,    0,

        0,    0,    0,    0,    0, 3938, 3940, 3940, 3940,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3940, 3940,    0, 3940,    0,    0,    0, 3940,    0,
        0,    0,    0,    0,    0,    0, 3940, 3941, 3941,    0,
     3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941,
     3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941,
     3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3942,
     3942, 3942,    0,    0,    0, 3942, 3942,    0,    0,    0,
     3942,    0,    0,    0,    0, 3942,    0,    0,    0,    0,
        0, 3942,    0,    0,    0, 3942,    0,    0,    0, 3942,

     3943, 3943, 3943,    0,    0,    0,    0,    0,    0,    0,
     3943, 3943,    0,    0,    0, 3943, 3943,    0, 3943,    0,
        0,    0, 3943,    0,    0,    0,    0,    0,    0,    0,
     3943, 3947, 3947, 3947,    0,    0,    0,    0,    0,    0,
     3947,    0,    0,    0, 3947,    0, 3947,    0,    0,    0,
        0,    0,    0, 3947,    0,    0,    0,    0,    0,    0,
        0, 3947, 3948, 3948,    0, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948,
     3948,    0, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3948, 3948, 3949, 3949, 3949,    0,    0,    0,

     3949,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3949,    0,    0,    0,
        0,    0,    0,    0, 3949, 3950, 3950, 3950,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3950,    0,    0, 3950,    0,    0,    0, 3950,    0,    0,
        0,    0,    0,    0,    0, 3950, 3952, 3952, 3952,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3952, 3952,    0, 3952,    0,    0,    0, 3952,    0,
        0,    0,    0,    0,    0,    0, 3952, 3955, 3955,    0,
        0, 3955,    0,    0, 3955, 3955,    0, 3955, 3955, 3955,

     3955, 3955,    0, 3955, 3955, 3955, 3955, 3955, 3955,    0,
     3955, 3955, 3955, 3955, 3955,    0,    0, 3955, 3955, 3956,
     3956,    0, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
     3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
     3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
     3956, 3957, 3957,    0, 3957, 3957, 3957, 3957, 3957, 3957,
     3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957,
     3957, 3957, 3957, 3957, 3957, 3957,    0, 3957, 3957, 3957,
     3957, 3957, 3957, 3958, 3958,    0, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958,

     3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3959, 3959,    0, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3960, 3960, 3960,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3960,    0, 3960, 3960,    0,    0,    0,    0,    0, 3960,
        0,    0,    0,    0,    0,    0,    0, 3960, 3961, 3961,
     3961,    0,    0,    0, 3961,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     3961,    0,    0,    0,    0,    0,    0,    0, 3961, 3962,
     3962, 3962,    0,    0,    0, 3962,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3962,    0,    0,    0,    0,    0,    0,    0, 3962,
     3965, 3965, 3965,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3965, 3965,    0,    0,    0,
        0,    0, 3965,    0,    0,    0,    0,    0,    0,    0,
     3965, 3966, 3966,    0, 3966, 3966,    0,    0, 3966, 3966,
        0, 3966, 3966, 3966, 3966, 3966,    0, 3966, 3966, 3966,
     3966, 3966, 3966,    0, 3966, 3966,    0, 3966, 3966,    0,

        0, 3966, 3966, 3967, 3967,    0, 3967, 3967, 3967, 3967,
     3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
     3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,    0, 3967,
     3967, 3967, 3967, 3967, 3967, 3968, 3968,    0, 3968, 3968,
     3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968,
     3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968,
     3968, 3968, 3968, 3968, 3968, 3968, 3968, 3969, 3969,    0,
     3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969,    0,
     3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969,
     3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3970,

     3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970,
     3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970,
     3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970,
     3970, 3971, 3971,    0, 3971, 3971,    0, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971,    0, 3971,    0, 3971, 3971,
     3971, 3971, 3971, 3972, 3972,    0, 3972, 3972, 3972, 3972,
     3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972,
     3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972,
     3972, 3972, 3972, 3972, 3972, 3974,    0,    0,    0, 3974,

     3974, 3974, 3974, 3974, 3974, 3974, 3974,    0, 3974,    0,
        0, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3975,    0, 3975,
        0,    0,    0,    0,    0,    0, 3975,    0, 3975,    0,
        0,    0,    0,    0, 3975, 3977, 3977, 3977,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3977,    0,
     3977,    0,    0,    0,    0,    0,    0, 3977,    0,    0,
        0,    0,    0,    0,    0, 3977, 3978, 3978, 3978,    0,
        0,    0, 3978,    0,    0,    0,    0, 3978,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3978,    0,

        0,    0,    0,    0,    0,    0, 3978, 3979, 3979, 3979,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3979,    0,    0,    0,    0,    0,    0, 3979,
        0, 3979,    0,    0,    0,    0,    0, 3979, 3980, 3980,
     3980,    0,    0,    0, 3980,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3980,    0,    0,    0,    0,    0,    0,    0, 3980, 3982,
     3982,    0, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982,
     3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982,
     3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982,

     3982, 3983,    0,    0,    0, 3983,    0,    0,    0,    0,
        0,    0, 3983,    0,    0,    0,    0,    0,    0, 3983,
        0,    0,    0,    0,    0,    0,    0, 3983, 3985, 3985,
        0, 3985, 3985,    0, 3985, 3985, 3985, 3985, 3985, 3985,
     3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985,
     3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985,
     3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987,
     3987,    0, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987,
     3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987,
     3987, 3987, 3988, 3988, 3988,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 3988, 3988,    0,
        0,    0,    0,    0, 3988,    0,    0,    0,    0,    0,
        0,    0, 3988, 3989, 3989, 3989, 3989, 3989, 3989, 3989,
     3989, 3989, 3989, 3989,    0, 3989, 3989, 3989, 3989, 3989,
     3989, 3989, 3989, 3989, 3989, 3989, 3989, 3989, 3989, 3989,
     3989, 3989, 3989, 3989, 3989, 3990, 3990,    0, 3990,    0,
        0,    0, 3990,    0,    0,    0,    0,    0,    0,    0,
     3990, 3991,    0,    0,    0,    0,    0,    0, 3991,    0,
        0,    0, 3991, 3991,    0,    0, 3991,    0,    0,    0,
        0, 3991,    0, 3991, 3995, 3995,    0, 3995, 3995, 3995,

     3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995,
     3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995,    0,
     3995, 3995, 3995, 3995, 3995, 3995, 3996, 3996,    0, 3996,
     3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996,
     3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996,
     3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3997, 3997,
     3997,    0,    0,    0, 3997,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3997,    0,    0,    0,    0,    0,    0,    0, 3997, 3998,
     3998, 3998,    0,    0,    0,    0,    0,    0,    0,    0,

     3998,    0,    0,    0, 3998,    0,    0,    0,    0,    0,
        0, 3998,    0,    0,    0,    0,    0,    0,    0, 3998,
     3999, 3999, 3999,    0,    0,    0, 3999, 3999,    0,    0,
        0, 3999,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3999,    0,    0,    0,    0,    0,    0,    0,
     3999, 4000, 4000, 4000,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4000,    0,    0,    0,
        0,    0,    0, 4000, 4000,    0,    0,    0,    0,    0,
        0, 4000, 4001, 4001,    0, 4001, 4001, 4001, 4001, 4001,
     4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001,

     4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001,
     4001, 4001, 4001, 4001, 4002, 4002, 4002,    0,    0,    0,
     4002,    0,    0,    0,    0, 4002,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4002,    0,    0,    0,
        0,    0,    0,    0, 4002, 4003, 4003, 4003,    0,    0,
        0, 4003,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4003,    0,    0,
        0,    0,    0,    0,    0, 4003, 4006, 4006, 4006,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4006, 4006,    0,    0,    0,    0,    0, 4006,    0,

        0,    0,    0,    0,    0,    0, 4006, 4007, 4007,    0,
     4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007,
     4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007,
     4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4007, 4008,
        0,    0,    0, 4008,    0,    0, 4008, 4008,    0,    0,
        0, 4008, 4008, 4008,    0, 4008, 4008, 4008, 4008, 4008,
     4008, 4008, 4008, 4008, 4008, 4008, 4008, 4008, 4008, 4008,
     4008, 4009, 4009,    0, 4009, 4009, 4009, 4009, 4009, 4009,
     4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009,
     4009, 4009, 4009, 4009, 4009, 4009,    0, 4009, 4009, 4009,

     4009, 4009, 4009, 4010, 4010,    0, 4010, 4010, 4010, 4010,
     4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010,
     4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010,
     4010, 4010, 4010, 4010, 4010, 4013, 4013,    0, 4013, 4013,
        0, 4013, 4013, 4013,    0,    0,    0, 4013, 4013, 4013,
     4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013,
     4013, 4013, 4013, 4013, 4013, 4013, 4013, 4014, 4014,    0,
     4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014,
     4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014,
     4014, 4014,    0, 4014, 4014, 4014, 4014, 4014, 4014, 4015,

     4015,    0, 4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015,
     4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015,
     4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015, 4015,
     4015, 4016, 4016,    0, 4016, 4016,    0, 4016, 4016, 4016,
        0, 4016, 4016, 4016, 4016, 4016,    0, 4016, 4016, 4016,
     4016, 4016, 4016, 4016, 4016, 4016, 4016, 4016, 4016,    0,
        0, 4016, 4016, 4017, 4017,    0, 4017, 4017, 4017, 4017,
     4017, 4017, 4017, 4017, 4017, 4017, 4017, 4017, 4017, 4017,
     4017, 4017, 4017, 4017, 4017, 4017, 4017, 4017,    0, 4017,
     4017, 4017, 4017, 4017, 4017, 4018, 4018,    0, 4018, 4018,

     4018, 4018, 4018, 4018, 4018, 4018, 4018, 4018, 4018, 4018,
     4018, 4018, 4018, 4018, 4018, 4018, 4018, 4018, 4018, 4018,
     4018, 4018, 4018, 4018, 4018, 4018, 4018, 4019, 4019,    0,
     4019, 4019,    0, 4019, 4019, 4019,    0,    0,    0, 4019,
     4019, 4019,    0, 4019, 4019, 4019, 4019, 4019, 4019, 4019,
     4019, 4019, 4019, 4019, 4019, 4019, 4019, 4019, 4019, 4020,
     4020,    0, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020,
     4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020, 4020,
     4020, 4020, 4020, 4020,    0, 4020, 4020, 4020, 4020, 4020,
     4020, 4021, 4021,    0, 4021, 4021, 4021, 4021, 4021, 4021,

     4021, 4021, 4021, 4021, 4021, 4021, 4021, 4021, 4021, 4021,
     4021, 4021, 4021, 4021, 4021, 4021, 4021, 4021, 4021, 4021,
     4021, 4021, 4021, 4022, 4022,    0, 4022, 4022,    0, 4022,
     4022, 4022,    0, 4022, 4022, 4022, 4022, 4022,    0, 4022,
     4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022, 4022,
     4022,    0,    0, 4022, 4022, 4023, 4023,    0, 4023, 4023,
     4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023,
     4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023,
        0, 4023, 4023, 4023, 4023, 4023, 4023, 4024, 4024,    0,
     4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024,

     4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024,
     4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024, 4026,
     4026,    0, 4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026,
     4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026,
     4026, 4026, 4026, 4026,    0, 4026, 4026, 4026, 4026, 4026,
     4026, 4027, 4027,    0, 4027, 4027, 4027, 4027, 4027, 4027,
     4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027,
     4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027,
     4027, 4027, 4027, 4028, 4028,    0, 4028, 4028,    0, 4028,
     4028, 4028,    0, 4028, 4028, 4028, 4028, 4028, 4028, 4028,

     4028, 4028, 4028, 4028, 4028, 4028, 4028, 4028,    0, 4028,
     4028, 4028, 4028, 4028, 4028, 4029, 4029,    0, 4029, 4029,
        0, 4029, 4029, 4029,    0,    0,    0, 4029, 4029, 4029,
        0, 4029, 4029, 4029, 4029, 4029, 4029, 4029, 4029, 4029,
     4029, 4029, 4029, 4029, 4029, 4029, 4029, 4030, 4030,    0,
     4030, 4030, 4030, 4030, 4030, 4030, 4030, 4030, 4030,    0,
     4030, 4030, 4030, 4030, 4030, 4030, 4030, 4030, 4030,    0,
     4030, 4030,    0, 4030, 4030, 4030, 4030, 4030, 4030, 4031,
     4031,    0, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031,
     4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031,

     4031,    0, 4031, 4031,    0, 4031, 4031, 4031, 4031, 4031,
     4031, 4032, 4032, 4032,    0,    0,    0, 4032,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4032, 4032,    0,    0,    0,    0,    0,
        0, 4032, 4033, 4033, 4033,    0,    0,    0,    0,    0,
        0,    0, 4033,    0, 4033,    0,    0, 4033,    0,    0,
        0,    0,    0,    0, 4033,    0,    0,    0,    0,    0,
        0,    0, 4033, 4034, 4034, 4034, 4034, 4034, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034,

     4034, 4034, 4034, 4034, 4034, 4035, 4035, 4035,    0,    0,
        0,    0,    0,    0,    0, 4035,    0, 4035,    0,    0,
     4035,    0,    0,    0,    0,    0,    0, 4035,    0,    0,
        0,    0,    0,    0,    0, 4035, 4036, 4036, 4036,    0,
        0,    0, 4036,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4036,    0,
        0,    0,    0,    0,    0,    0, 4036, 4037, 4037, 4037,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4037,    0,    0,    0,    0,    0,    0, 4037,
        0,    0,    0,    0,    0,    0,    0, 4037, 4038, 4038,

     4038,    0,    0,    0,    0,    0,    0, 4038,    0,    0,
        0,    0,    0, 4038,    0,    0,    0,    0,    0,    0,
     4038,    0,    0,    0,    0,    0,    0,    0, 4038, 4041,
     4041, 4041,    0,    0,    0, 4041,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4041,    0,    0,    0,    0,    0,    0,    0, 4041,
     4044, 4044, 4044,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4044, 4044,    0,    0,    0,
        0,    0, 4044,    0,    0,    0,    0,    0,    0,    0,
     4044, 4045, 4045, 4045, 4045, 4045, 4045, 4045, 4045, 4045,

     4045, 4045, 4045, 4045, 4045, 4045, 4045, 4045, 4045, 4045,
     4045, 4045, 4045, 4045, 4045, 4045, 4045, 4045, 4045, 4045,
     4045, 4045, 4045, 4046, 4046,    0, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046, 4046,    0, 4046, 4046,    0, 4046,
     4046, 4046, 4046, 4046, 4046,    0, 4046, 4046,    0, 4046,
     4046, 4046, 4046, 4046, 4046, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
        0, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4049, 4049,    0,
     4049, 4049, 4049, 4049,    0, 4049, 4049, 4049, 4049,    0,

     4049, 4049,    0, 4049, 4049, 4049,    0, 4049, 4049,    0,
     4049, 4049,    0,    0, 4049, 4049, 4049, 4049, 4049, 4050,
     4050, 4050,    0,    0,    0,    0,    0,    0, 4050,    0,
        0, 4050,    0,    0, 4050,    0, 4050, 4050,    0,    0,
        0, 4050,    0,    0,    0,    0,    0,    0,    0, 4050,
     4051, 4051, 4051,    0,    0,    0,    0,    0,    0, 4051,
        0,    0, 4051,    0,    0, 4051, 4051, 4051, 4051,    0,
        0,    0, 4051,    0,    0,    0,    0,    0,    0,    0,
     4051, 4052, 4052, 4052,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4052,    0, 4052,    0,    0,    0,

        0,    0,    0, 4052,    0,    0,    0,    0,    0,    0,
        0, 4052, 4053, 4053, 4053,    0,    0,    0, 4053,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4053,    0,    0,    0,    0,    0,
        0,    0, 4053, 4055, 4055, 4055, 4055,    0,    0, 4055,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4055,
        0,    0,    0,    0,    0, 4055,    0,    0,    0,    0,
        0,    0, 4055, 4055, 4056, 4056, 4056,    0,    0,    0,
        0,    0,    0, 4056,    0,    0, 4056,    0,    0, 4056,
        0, 4056, 4056,    0,    0,    0, 4056,    0,    0,    0,

        0,    0,    0,    0, 4056, 4057, 4057, 4057,    0,    0,
        0,    0,    0,    0, 4057,    0,    0,    0,    0,    0,
     4057,    0,    0,    0,    0,    0,    0, 4057,    0,    0,
        0,    0,    0,    0,    0, 4057, 4058, 4058, 4058,    0,
        0,    0,    0,    0,    0, 4058,    0,    0,    0,    0,
        0, 4058, 4058,    0,    0,    0,    0,    0, 4058,    0,
        0,    0,    0,    0,    0,    0, 4058, 4059, 4059, 4059,
     4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059,    0,
     4059, 4059,    0, 4059, 4059, 4059, 4059, 4059, 4059, 4059,
     4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4060,

     4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060,
     4060, 4060, 4060, 4060,    0, 4060, 4060, 4060, 4060, 4060,
     4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060,
     4060, 4061, 4061, 4061, 4061,    0,    0, 4061,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4061,    0,    0,
        0,    0,    0, 4061,    0,    0,    0,    0,    0,    0,
     4061, 4061, 4062, 4062, 4062,    0,    0,    0,    0,    0,
        0, 4062,    0,    0,    0,    0,    0, 4062, 4062,    0,
        0,    0,    0,    0, 4062,    0,    0,    0,    0,    0,
        0,    0, 4062, 4066,    0,    0,    0, 4066,    0, 4066,

        0,    0, 4066,    0,    0,    0, 4066,    0,    0,    0,
        0,    0,    0,    0, 4066, 4067, 4067, 4067, 4067,    0,
        0, 4067,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4067,    0,    0,    0,    0,    0, 4067,    0,    0,
        0,    0,    0,    0, 4067, 4067, 4068, 4068, 4068,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4068,
        0, 4068, 4068,    0,    0,    0,    0,    0, 4068,    0,
        0,    0,    0,    0,    0,    0, 4068, 4069, 4069, 4069,
        0,    0,    0, 4069,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4069,

        0,    0,    0,    0,    0,    0,    0, 4069, 4070, 4070,
     4070,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4070, 4070,    0,    0,    0,    0,    0,
     4070,    0,    0,    0,    0,    0,    0,    0, 4070, 4074,
     4074,    0, 4074, 4074, 4074, 4074, 4074, 4074, 4074, 4074,
     4074, 4074, 4074, 4074, 4074, 4074, 4074, 4074, 4074, 4074,
     4074, 4074, 4074, 4074,    0, 4074, 4074, 4074, 4074, 4074,
     4074, 4075, 4075, 4075, 4075,    0,    0, 4075,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4075,    0,    0,
        0,    0,    0, 4075,    0,    0,    0,    0,    0,    0,

     4075, 4075, 4076, 4076, 4076,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4076,    0,    0,
     4076,    0,    0,    0, 4076,    0,    0,    0,    0,    0,
        0,    0, 4076, 4077, 4077,    0, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4078, 4078, 4078,    0,    0,
        0, 4078, 4078,    0,    0,    0, 4078,    0,    0,    0,
        0, 4078,    0,    0,    0,    0,    0, 4078,    0,    0,
        0, 4078,    0,    0,    0, 4078, 4079, 4079, 4079,    0,

        0,    0, 4079,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4079,    0,    0,    0,    0,    0, 4079,    0,
        0,    0,    0,    0,    0,    0, 4079, 4080, 4080, 4080,
        0,    0,    0, 4080,    0,    0,    0, 4080,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4080,
        0,    0,    0,    0,    0,    0,    0, 4080, 4081, 4081,
     4081,    0,    0,    0,    0,    0,    0,    0, 4081, 4081,
        0,    0,    0, 4081, 4081,    0, 4081,    0,    0,    0,
     4081,    0,    0,    0,    0,    0,    0,    0, 4081, 4082,
        0,    0,    0,    0,    0,    0, 4082,    0,    0,    0,

     4082, 4082,    0,    0, 4082,    0,    0,    0,    0, 4082,
        0, 4082, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083,
     4083, 4083, 4083, 4083,    0, 4083, 4083,    0, 4083, 4083,
     4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083,
     4083, 4083, 4083, 4083, 4084, 4084, 4084, 4084, 4084, 4084,
     4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084,    0,
     4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084,
     4084, 4084, 4084, 4084, 4084, 4084, 4087, 4087, 4087,    0,
        0,    0,    0,    0,    0, 4087,    0,    0,    0, 4087,
        0, 4087,    0,    0,    0,    0,    0,    0, 4087,    0,

        0,    0,    0,    0,    0,    0, 4087, 4088, 4088, 4088,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4088, 4088,    0, 4088,    0,    0,    0, 4088,
        0,    0,    0,    0,    0,    0,    0, 4088, 4089, 4089,
     4089,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4089,    0,    0, 4089,    0,    0,    0,
     4089,    0,    0,    0,    0,    0,    0,    0, 4089, 4090,
     4090, 4090, 4090,    0,    0, 4090,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4090,    0,    0,    0,    0,
        0, 4090,    0,    0,    0,    0,    0,    0, 4090, 4090,

     4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092,
     4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092,
     4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092,
     4092, 4092, 4093, 4093,    0, 4093, 4093, 4093, 4093, 4093,
     4093, 4093, 4093, 4093, 4093, 4093, 4093, 4093, 4093, 4093,
     4093, 4093, 4093, 4093, 4093, 4093, 4093, 4093, 4093, 4093,
     4093, 4093, 4093, 4093, 4094, 4094,    0, 4094, 4094, 4094,
     4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094,
     4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094,    0,
     4094, 4094, 4094, 4094, 4094, 4094, 4095, 4095,    0, 4095,

     4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
     4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095,
     4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4096, 4096,
     4096,    0,    0,    0, 4096,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4096,    0,    0,    0,    0,    0,    0,    0, 4096, 4097,
     4097, 4097,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4097,    0, 4097, 4097,    0,    0,    0,    0,
        0, 4097,    0,    0,    0,    0,    0,    0,    0, 4097,
     4098, 4098, 4098,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 4098,    0, 4098, 4098,    0,    0,    0,
        0,    0, 4098,    0,    0,    0,    0,    0,    0,    0,
     4098, 4100, 4100, 4100, 4100,    0,    0, 4100,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4100,    0,    0,
        0,    0,    0, 4100,    0,    0,    0,    0,    0,    0,
     4100, 4100, 4101, 4101,    0, 4101, 4101, 4101, 4101, 4101,
     4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101,
     4101, 4101, 4101, 4101, 4101, 4101, 4101,    0, 4101, 4101,
     4101, 4101, 4101, 4101, 4103,    0,    0,    0, 4103, 4103,
     4103, 4103, 4103, 4103, 4103, 4103,    0, 4103,    0,    0,

     4103, 4103, 4103, 4103, 4103, 4103, 4103, 4103, 4103, 4103,
     4103, 4103, 4103, 4103, 4103, 4103, 4105,    0, 4105,    0,
        0,    0,    0,    0,    0, 4105,    0, 4105,    0,    0,
        0,    0,    0, 4105, 4106, 4106, 4106,    0,    0,    0,
     4106,    0,    0,    0,    0, 4106,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4106,    0,    0,    0,
        0,    0,    0,    0, 4106, 4107, 4107, 4107,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4107,    0,
     4107,    0,    0,    0,    0,    0,    0, 4107,    0,    0,
        0,    0,    0,    0,    0, 4107, 4108, 4108, 4108,    0,

        0,    0, 4108,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4108,    0,
        0,    0,    0,    0,    0,    0, 4108, 4110,    0,    0,
        0,    0,    0,    0, 4110,    0,    0,    0, 4110, 4110,
        0,    0, 4110,    0,    0,    0,    0, 4110,    0, 4110,
     4111, 4111,    0, 4111,    0,    0,    0, 4111,    0,    0,
        0,    0,    0,    0,    0, 4111, 4112, 4112,    0, 4112,
     4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112,
     4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112, 4112,
     4112,    0, 4112, 4112, 4112, 4112, 4112, 4112, 4113, 4113,

        0, 4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113,
     4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113,
     4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113, 4113,
     4114, 4114, 4114,    0,    0,    0, 4114,    0,    0,    0,
        0, 4114,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4114,    0,    0,    0,    0,    0,    0,    0,
     4114, 4115, 4115, 4115,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4115, 4115,    0,    0,
        0,    0,    0, 4115,    0,    0,    0,    0,    0,    0,
        0, 4115, 4117, 4117, 4117, 4117,    0,    0, 4117,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 4117,    0,
        0,    0,    0,    0, 4117,    0,    0,    0,    0,    0,
        0, 4117, 4117, 4118, 4118,    0, 4118, 4118, 4118, 4118,
     4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118,
     4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118,    0, 4118,
     4118, 4118, 4118, 4118, 4118, 4120, 4120,    0, 4120, 4120,
     4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120,
     4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120,
        0, 4120, 4120, 4120, 4120, 4120, 4120, 4121, 4121,    0,
     4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121,

     4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121, 4121,
     4121, 4121,    0, 4121, 4121, 4121, 4121, 4121, 4121, 4122,
     4122,    0, 4122, 4122, 4122, 4122, 4122, 4122, 4122, 4122,
     4122, 4122, 4122, 4122, 4122, 4122, 4122, 4122, 4122, 4122,
     4122, 4122, 4122, 4122,    0, 4122, 4122, 4122, 4122, 4122,
     4122, 4123, 4123,    0, 4123, 4123, 4123, 4123, 4123, 4123,
     4123, 4123, 4123, 4123, 4123, 4123, 4123, 4123, 4123, 4123,
     4123, 4123, 4123, 4123, 4123, 4123,    0, 4123, 4123, 4123,
     4123, 4123, 4123, 4124, 4124,    0, 4124, 4124,    0, 4124,
     4124, 4124,    0, 4124, 4124, 4124, 4124, 4124,    0, 4124,

     4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124,
     4124,    0,    0, 4124, 4124, 4125, 4125,    0, 4125, 4125,
     4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125,
     4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125, 4125,
        0, 4125, 4125, 4125, 4125, 4125, 4125, 4126, 4126, 4126,
     4126, 4126, 4126, 4126, 4126, 4126, 4126, 4126, 4126, 4126,
     4126, 4126, 4126,    0, 4126, 4126, 4126, 4126, 4126, 4126,
        0, 4126, 4126, 4126, 4126, 4126, 4126, 4126, 4126, 4127,
     4127, 4127,    0,    0,    0,    0,    0,    0,    0, 4127,
        0, 4127,    0,    0, 4127,    0,    0,    0,    0,    0,

        0, 4127,    0,    0,    0,    0,    0,    0,    0, 4127,
     4128, 4128, 4128,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4128,    0,    0,    0,    0,
        0,    0, 4128,    0,    0,    0,    0,    0,    0,    0,
     4128, 4131, 4131, 4131, 4131,    0,    0, 4131,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4131,    0,    0,
        0,    0,    0, 4131,    0,    0,    0,    0,    0,    0,
     4131, 4131, 4132, 4132,    0, 4132, 4132, 4132, 4132, 4132,
     4132, 4132, 4132, 4132,    0, 4132, 4132,    0, 4132, 4132,
     4132, 4132, 4132, 4132,    0, 4132, 4132,    0, 4132, 4132,

     4132, 4132, 4132, 4132, 4134, 4134, 4134, 4134, 4134, 4134,
     4134, 4134, 4134, 4134, 4134, 4134, 4134, 4134, 4134,    0,
     4134, 4134, 4134, 4134, 4134, 4134, 4134, 4134, 4134, 4134,
     4134, 4134, 4134, 4134, 4134, 4134, 4135, 4135, 4135,    0,
        0,    0,    0,    0,    0, 4135,    0,    0, 4135,    0,
        0, 4135, 4135, 4135, 4135,    0,    0,    0, 4135,    0,
        0,    0,    0,    0,    0,    0, 4135, 4137, 4137, 4137,
        0,    0,    0,    0,    0,    0, 4137,    0,    0,    0,
        0,    0, 4137, 4137,    0,    0,    0,    0,    0, 4137,
        0,    0,    0,    0,    0,    0,    0, 4137, 4138, 4138,

     4138,    0,    0,    0,    0,    0,    0, 4138,    0,    0,
        0,    0,    0, 4138, 4138,    0,    0,    0,    0,    0,
     4138,    0,    0,    0,    0,    0,    0,    0, 4138, 4140,
        0,    0,    0, 4140,    0, 4140,    0,    0, 4140,    0,
        0,    0, 4140,    0,    0,    0,    0,    0,    0,    0,
     4140, 4141, 4141, 4141, 4141,    0,    0, 4141,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4141,    0,    0,
        0,    0,    0, 4141,    0,    0,    0,    0,    0,    0,
     4141, 4141, 4142, 4142, 4142,    0,    0,    0, 4142,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 4142,    0,    0,    0,    0,    0,
        0,    0, 4142, 4143, 4143, 4143,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4143, 4143,
        0,    0,    0,    0,    0, 4143,    0,    0,    0,    0,
        0,    0,    0, 4143, 4144, 4144, 4144,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4144,    0, 4144,
     4144,    0,    0,    0,    0,    0, 4144,    0,    0,    0,
        0,    0,    0,    0, 4144, 4145, 4145, 4145,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4145, 4145,    0,    0,    0,    0,    0, 4145,    0,    0,

        0,    0,    0,    0,    0, 4145, 4147, 4147, 4147,    0,
        0,    0, 4147,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4147,    0,
        0,    0,    0,    0,    0,    0, 4147, 4148, 4148,    0,
     4148, 4148, 4148, 4148, 4148, 4148, 4148, 4148, 4148, 4148,
     4148, 4148, 4148, 4148, 4148, 4148, 4148, 4148, 4148, 4148,
     4148, 4148,    0, 4148, 4148, 4148, 4148, 4148, 4148, 4149,
     4149, 4149,    0,    0,    0, 4149, 4149,    0,    0,    0,
     4149,    0,    0,    0,    0, 4149,    0,    0,    0,    0,
        0, 4149,    0,    0,    0, 4149,    0,    0,    0, 4149,

     4150, 4150, 4150,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4150, 4150,    0, 4150,    0,
        0,    0, 4150,    0,    0,    0,    0,    0,    0,    0,
     4150, 4151, 4151, 4151,    0,    0,    0, 4151,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4151,    0,    0,    0,    0,    0,    0,
        0, 4151, 4152, 4152, 4152,    0,    0,    0,    0,    0,
        0,    0, 4152,    0,    0,    0,    0, 4152, 4152,    0,
     4152,    0,    0,    0, 4152,    0,    0,    0,    0,    0,
        0,    0, 4152, 4153, 4153, 4153,    0,    0,    0, 4153,

        0,    0,    0, 4153,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4153,    0,    0,    0,    0,
        0,    0,    0, 4153, 4154,    0,    0,    0, 4154,    0,
        0,    0,    0, 4154,    0,    0,    0,    0,    0,    0,
     4154,    0,    0,    0,    0,    0,    0,    0, 4154, 4155,
        0,    0,    0,    0,    0,    0, 4155,    0,    0,    0,
     4155, 4155,    0,    0, 4155,    0,    0,    0,    0, 4155,
        0, 4155, 4156, 4156,    0, 4156, 4156, 4156, 4156, 4156,
     4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156,
     4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156,

     4156, 4156, 4156, 4156, 4157, 4157,    0, 4157, 4157, 4157,
     4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157,
     4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157,
     4157, 4157, 4157, 4157, 4157, 4157, 4159, 4159, 4159,    0,
        0,    0,    0,    0,    0, 4159,    0,    0,    0, 4159,
        0, 4159,    0,    0,    0,    0,    0,    0, 4159,    0,
        0,    0,    0,    0,    0,    0, 4159, 4160, 4160, 4160,
        0,    0,    0,    0,    0,    0, 4160,    0,    0,    0,
     4160,    0, 4160,    0,    0,    0,    0,    0,    0, 4160,
        0,    0,    0,    0,    0,    0,    0, 4160, 4161, 4161,

     4161,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4161, 4161,    0, 4161,    0,    0,    0,
     4161,    0,    0,    0,    0,    0,    0,    0, 4161, 4163,
     4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163,
     4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163,
     4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163,
     4163, 4164, 4164,    0, 4164, 4164, 4164, 4164, 4164, 4164,
     4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164,
     4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164, 4164,
     4164, 4164, 4164, 4165, 4165,    0, 4165, 4165, 4165, 4165,

     4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165,
     4165, 4165, 4165, 4165, 4165, 4165, 4165, 4165,    0, 4165,
     4165, 4165, 4165, 4165, 4165, 4166, 4166, 4166, 4166, 4166,
     4166, 4166, 4166, 4166, 4166, 4166, 4166, 4166, 4166, 4166,
     4166,    0, 4166, 4166, 4166, 4166, 4166, 4166,    0, 4166,
     4166, 4166, 4166, 4166, 4166, 4166, 4166, 4167, 4167, 4167,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4167,    0, 4167, 4167,    0,    0,    0,    0,    0, 4167,
        0,    0,    0,    0,    0,    0,    0, 4167, 4168, 4168,
     4168,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 4168,    0, 4168, 4168,    0,    0,    0,    0,    0,
     4168,    0,    0,    0,    0,    0,    0,    0, 4168, 4169,
     4169,    0, 4169, 4169, 4169, 4169, 4169, 4169, 4169, 4169,
     4169, 4169, 4169, 4169, 4169, 4169, 4169, 4169, 4169, 4169,
     4169, 4169, 4169, 4169,    0, 4169, 4169, 4169, 4169, 4169,
     4169, 4171,    0,    0,    0, 4171, 4171, 4171, 4171, 4171,
     4171, 4171, 4171,    0, 4171,    0,    0, 4171, 4171, 4171,
     4171, 4171, 4171, 4171, 4171, 4171, 4171, 4171, 4171, 4171,
     4171, 4171, 4171, 4172,    0, 4172,    0,    0,    0,    0,
        0,    0, 4172,    0, 4172,    0,    0,    0,    0,    0,

     4172, 4173, 4173, 4173,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4173,    0, 4173,    0,    0,    0,
        0,    0,    0, 4173,    0,    0,    0,    0,    0,    0,
        0, 4173, 4175, 4175,    0, 4175,    0,    0,    0, 4175,
        0,    0,    0,    0,    0,    0,    0, 4175, 4176, 4176,
        0, 4176, 4176, 4176, 4176, 4176, 4176, 4176, 4176, 4176,
     4176, 4176, 4176, 4176, 4176, 4176, 4176, 4176, 4176, 4176,
     4176, 4176, 4176,    0, 4176, 4176, 4176, 4176, 4176, 4176,
     4177, 4177, 4177,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4177, 4177,    0,    0,    0,

        0,    0, 4177,    0,    0,    0,    0,    0,    0,    0,
     4177, 4178, 4178,    0, 4178, 4178, 4178, 4178, 4178, 4178,
     4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178,
     4178, 4178, 4178, 4178, 4178, 4178,    0, 4178, 4178, 4178,
     4178, 4178, 4178, 4180, 4180,    0, 4180, 4180, 4180, 4180,
     4180, 4180, 4180, 4180, 4180, 4180, 4180, 4180, 4180, 4180,
     4180, 4180, 4180, 4180, 4180, 4180, 4180, 4180,    0, 4180,
     4180, 4180, 4180, 4180, 4180, 4181, 4181,    0, 4181, 4181,
     4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181,
     4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181,

        0, 4181, 4181, 4181, 4181, 4181, 4181, 4182, 4182,    0,
     4182, 4182, 4182, 4182, 4182, 4182, 4182, 4182, 4182, 4182,
     4182, 4182, 4182, 4182, 4182, 4182, 4182, 4182, 4182, 4182,
     4182, 4182,    0, 4182, 4182, 4182, 4182, 4182, 4182, 4183,
     4183,    0, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183,
     4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183, 4183,
     4183, 4183, 4183, 4183,    0, 4183, 4183, 4183, 4183, 4183,
     4183, 4184, 4184,    0, 4184, 4184, 4184, 4184, 4184, 4184,
        0, 4184, 4184, 4184, 4184, 4184,    0, 4184, 4184, 4184,
     4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184, 4184,    0,

        0, 4184, 4184, 4185, 4185,    0, 4185, 4185, 4185, 4185,
     4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185,
     4185, 4185, 4185, 4185, 4185, 4185, 4185, 4185,    0, 4185,
     4185, 4185, 4185, 4185, 4185, 4186, 4186, 4186, 4186, 4186,
     4186, 4186, 4186, 4186, 4186, 4186, 4186, 4186, 4186, 4186,
     4186,    0, 4186, 4186, 4186, 4186, 4186, 4186,    0, 4186,
     4186, 4186, 4186, 4186, 4186, 4186, 4186, 4187,    0,    0,
        0,    0,    0, 4187, 4187,    0,    0,    0, 4187,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4187,
        0,    0,    0,    0,    0,    0,    0, 4187, 4188, 4188,

        0, 4188, 4188, 4188, 4188, 4188, 4188, 4188, 4188, 4188,
        0, 4188, 4188,    0, 4188, 4188, 4188, 4188, 4188, 4188,
        0, 4188, 4188,    0, 4188, 4188, 4188, 4188, 4188, 4188,
     4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189,
     4189, 4189, 4189, 4189, 4189, 4189,    0, 4189, 4189, 4189,
     4189, 4189, 4189,    0, 4189, 4189, 4189, 4189, 4189, 4189,
     4189, 4189, 4190, 4190, 4190,    0,    0,    0,    0,    0,
        0, 4190,    0,    0,    0,    0,    0, 4190, 4190,    0,
        0,    0,    0,    0, 4190,    0,    0,    0,    0,    0,
        0,    0, 4190, 4191,    0,    0,    0, 4191,    0, 4191,

        0,    0, 4191,    0,    0,    0, 4191,    0,    0,    0,
        0,    0,    0,    0, 4191, 4192, 4192, 4192,    0,    0,
        0, 4192,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4192,    0,    0,
        0,    0,    0,    0,    0, 4192, 4195, 4195, 4195,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4195, 4195,    0,    0,    0,    0,    0, 4195,    0,
        0,    0,    0,    0,    0,    0, 4195, 4196, 4196, 4196,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4196,    0, 4196, 4196,    0,    0,    0,    0,    0, 4196,

        0,    0,    0,    0,    0,    0,    0, 4196, 4197, 4197,
     4197,    0,    0,    0, 4197,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4197,    0,    0,    0,    0,    0,
     4197,    0,    0,    0,    0,    0,    0,    0, 4197, 4198,
     4198, 4198,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4198, 4198,    0, 4198,    0,    0,
        0, 4198,    0,    0,    0,    0,    0,    0,    0, 4198,
     4199,    0,    0,    0,    0,    0,    0, 4199,    0,    0,
        0, 4199, 4199,    0,    0, 4199,    0,    0,    0,    0,
     4199,    0, 4199, 4200, 4200, 4200,    0,    0,    0,    0,

        0,    0,    0, 4200,    0,    0,    0,    0, 4200, 4200,
        0, 4200,    0,    0,    0, 4200,    0,    0,    0,    0,
        0,    0,    0, 4200, 4201,    0,    0,    0, 4201,    0,
        0,    0,    0, 4201,    0,    0,    0,    0,    0,    0,
     4201,    0,    0,    0,    0,    0,    0,    0, 4201, 4202,
     4202,    0, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202,
     4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202,
     4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202, 4202,
     4202, 4203, 4203,    0, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,

     4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203, 4203,
     4203, 4203, 4203, 4204, 4204, 4204,    0,    0,    0,    0,
        0,    0, 4204,    0,    0,    0, 4204,    0, 4204,    0,
        0,    0,    0,    0,    0, 4204,    0,    0,    0,    0,
        0,    0,    0, 4204, 4205, 4205, 4205,    0,    0,    0,
        0,    0,    0, 4205,    0,    0,    0, 4205,    0, 4205,
        0,    0,    0,    0,    0,    0, 4205,    0,    0,    0,
        0,    0,    0,    0, 4205, 4206, 4206, 4206,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4206, 4206,    0, 4206,    0,    0,    0, 4206,    0,    0,

        0,    0,    0,    0,    0, 4206, 4208, 4208,    0, 4208,
     4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208,
     4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208,
     4208, 4208, 4208, 4208, 4208, 4208, 4208, 4208, 4209, 4209,
     4209,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4209,    0, 4209, 4209,    0,    0,    0,    0,    0,
     4209,    0,    0,    0,    0,    0,    0,    0, 4209, 4210,
     4210, 4210,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4210,    0,    0,    0,    0,    0,
        0, 4210,    0,    0,    0,    0,    0,    0,    0, 4210,

     4211,    0,    0,    0, 4211, 4211, 4211, 4211, 4211, 4211,
     4211, 4211,    0, 4211,    0,    0, 4211, 4211, 4211, 4211,
     4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211,
     4211, 4211, 4212, 4212,    0, 4212,    0,    0,    0, 4212,
        0,    0,    0,    0,    0,    0,    0, 4212, 4213, 4213,
     4213,    0,    0,    0, 4213,    0,    0,    0,    0, 4213,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4213,    0,    0,    0,    0,    0,    0,    0, 4213, 4214,
     4214,    0, 4214, 4214,    0, 4214, 4214, 4214, 4214, 4214,
     4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214,

     4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214, 4214,
     4214, 4215, 4215,    0, 4215, 4215, 4215, 4215, 4215, 4215,
     4215, 4215, 4215,    0, 4215, 4215,    0, 4215, 4215, 4215,
     4215, 4215, 4215,    0, 4215, 4215,    0, 4215, 4215, 4215,
     4215, 4215, 4215, 4216, 4216, 4216,    0,    0,    0,    0,
        0,    0, 4216,    0,    0,    0,    0,    0, 4216, 4216,
        0,    0,    0,    0,    0, 4216,    0,    0,    0,    0,
        0,    0,    0, 4216, 4218, 4218, 4218, 4218,    0,    0,
     4218,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4218,    0,    0,    0,    0,    0, 4218,    0,    0,    0,

        0,    0,    0, 4218, 4218, 4219, 4219, 4219,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4219,    0,
     4219, 4219,    0,    0,    0,    0,    0, 4219,    0,    0,
        0,    0,    0,    0,    0, 4219, 4220, 4220, 4220,    0,
        0,    0, 4220,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4220,    0,
        0,    0,    0,    0,    0,    0, 4220, 4225, 4225, 4225,
     4225, 4225, 4225, 4225, 4225, 4225, 4225, 4225, 4225, 4225,
     4225, 4225, 4225,    0, 4225, 4225, 4225, 4225, 4225, 4225,
        0, 4225, 4225, 4225, 4225, 4225, 4225, 4225, 4225, 4228,

     4228, 4228, 4228, 4228, 4228, 4228, 4228, 4228, 4228, 4228,
     4228, 4228, 4228, 4228, 4228,    0, 4228, 4228, 4228, 4228,
     4228, 4228,    0, 4228, 4228, 4228, 4228, 4228, 4228, 4228,
     4228, 4230, 4230, 4230,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4230,    0,    0,    0,
     4230,    0,    0, 4230,    0,    0,    0,    0,    0,    0,
        0, 4230, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,

     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705
    } ;

extern int scanYY_flex_debug;
int scanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *scanYYtext;
#line 1 "scanner.l"
/*****************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2011 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "scanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "code.h"

#define YY_NEVER_INTERACTIVE 1

/* -----------------------------------------------------------------
 *
 *	statics
 */
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;
static int		lastContext;
static int		lastCContext;
static int              lastDocContext;
static int              lastCPPContext;
static int              lastSkipSharpContext;
static int              lastSkipRoundContext;
static int              lastStringContext;
static int              lastCurlyContext;
static int              lastRoundContext;
static int              lastSquareContext;
static int              lastInitializerContext;
static int              lastClassTemplSpecContext;
static int              lastPreLineCtrlContext;
static int              lastSkipVerbStringContext;
static int              lastCommentInArgContext;
static int              lastCSConstraint;
static Protection	protection;
static Protection	baseProt;
static int		sharpCount   = 0 ;
static int		roundCount   = 0 ;
static int		curlyCount   = 0 ;
static int		squareCount  = 0 ;
static int              padCount     = 0 ;
static QCString         slString;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		tempEntry    = 0 ;
static Entry*		firstTypedefEntry = 0 ;
static Entry*		memspecEntry = 0 ;
static int		yyLineNr     = 1 ;
static int              anonCount    = 0 ;        
static int              anonNSCount  = 0 ;        
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static bool             removeSlashes;
static Specifier 	virt;
static Specifier 	baseVirt;
static QCString         msType,msName,msArgs;
static bool             isTypedef;
static int              tmpDocType;
static QCString         sectionLabel;
static QCString		sectionTitle;
static QCString         funcPtrType;
static QCString         templateStr;
static QCString         aliasName;
static QCString         baseName;
static QCString*        specName;
static QCString         formulaText;
static QCString         formulaEnd;
static bool             useOverrideCommands = FALSE;

static SrcLangExt       language;
static bool             insideIDL   = FALSE;		//!< processing IDL code?
static bool             insideJava  = FALSE;		//!< processing Java code?
static bool             insideCS    = FALSE;		//!< processing C# code?
static bool             insideD     = FALSE;		//!< processing D code?
static bool             insidePHP   = FALSE;		//!< processing PHP code?
static bool             insideObjC  = FALSE;            //!< processing Objective C code?
static bool             insideCli   = FALSE;            //!< processing C++/CLI code?
static bool             insideJS    = FALSE;            //!< processing JavaScript code?

static bool             insideCppQuote = FALSE;
static bool             insideProtocolList = FALSE;

static int              argRoundCount;
static int              argSharpCount;
static int              currentArgumentContext;
static int              lastCopyArgStringContext;
static int              lastCopyArgContext;
static QCString         *copyArgString;
static QCString         fullArgString;

static ArgumentList     *currentArgumentList;
static char             lastCopyArgChar;

static QCString         *pCopyQuotedString;
static QCString         *pCopyRoundString;
static QCString         *pCopyCurlyString;

static QGString         *pCopyCurlyGString;
static QGString         *pCopyRoundGString;
static QGString         *pCopyQuotedGString;
static QGString         *pSkipVerbString;
static QStack<Grouping> autoGroupStack;

static bool             insideFormula;
static bool  	        insideTryBlock=FALSE;
static bool             insideCode;
static bool             needsSemi;

//static int              depthIf;
static int  	        initBracketCount;
static QCString         memberGroupRelates;
static QCString         memberGroupInside;
static QCString         xrefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;

static QCString         g_skipBlockName;
static QCString         oldStyleArgType;
static QCString         docBackup;
static QCString         briefBackup;
static bool             g_inputFromFile;

static int              docBlockContext;
static QGString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockAutoBrief;
static char             docBlockTerm;

static QCString         idlAttr;
static QCString         idlProp;

static bool             g_lexInit = FALSE;
static bool             externC;


//-----------------------------------------------------------------------------

// forward declarations
//static void handleGroupStartCommand(const char *header);
//static void handleGroupEndCommand();

//-----------------------------------------------------------------------------

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  baseName.resize(0);
  formulaText.resize(0);
  protection = Public;
  baseProt = Public;
  sharpCount = 0;
  roundCount = 0;
  curlyCount = 0;
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  baseVirt = Normal;
  isTypedef = FALSE;
  autoGroupStack.clear();
  insideTryBlock = FALSE;
  autoGroupStack.setAutoDelete(TRUE);
  insideFormula = FALSE;
  insideCode=FALSE;
  insideCli=Config_getBool("CPP_CLI_SUPPORT");
  previous = 0;
}

static void initEntry()
{
  if (insideJava) 
  {
    protection = (current_root->spec & Entry::Interface) ?  Public : Package;
  }
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->lang       = language;
  //printf("*** initEntry() language=%d\n",language);
  //if (!autoGroupStack.isEmpty())
  //{
  //  //printf("Appending group %s\n",autoGroupStack.top()->groupname.data());
  //  current->groups->append(new Grouping(*autoGroupStack.top()));
  //}
  initGroupInfo(current);
  isTypedef=FALSE;
}


//-----------------------------------------------------------------------------

///// remove any automatic grouping and add new one (if given)
//static void setCurrentGroup( QCString *newgroup, Grouping::GroupPri_t pri )
//{
//   /* remove auto group name from current entry and discard it */
//   Grouping *g = current->groups->first();
//   int i=0; 
//   while (g)
//   {
//     if (g->pri <= Grouping::GROUPING_AUTO_DEF)
//     {
//       current->groups->remove(i);
//       i--;
//     }
//     g=current->groups->next();
//     i++;
//   }
//
//   /* use new group name instead? */
//   if ( newgroup )
//   {
//      current->groups->append(new Grouping(*newgroup, pri));
//   } 
//}
//
//static int newMemberGroupId()
//{
//  static int curGroupId=0;
//  return curGroupId++;
//}
//
// forward declarations
//static void startGroupInDoc();
//static void endGroup();

//-----------------------------------------------------------------------------

static void lineCount()
{
  for( const char* c = scanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}

static void addType( Entry* current )
{
    uint tl=current->type.length();
    if( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void startCommentBlock(bool);
static void handleCommentBlock(const QCString &doc,bool brief);
static void handleParametersCommentBlocks(ArgumentList *al);

//-----------------------------------------------------------------

static bool nameIsOperator(QCString &name)
{
  int i=name.find("operator");
  if (i==-1) return FALSE;
  if (i==0 && !isId(name.at(8))) return TRUE; // case operator ::X
  if (i>0 && !isId(name.at(i-1)) && !isId(name.at(i+8))) return TRUE; // case X::operator
  return FALSE; // case TEXToperatorTEXT
}

//-----------------------------------------------------------------------------

static void setContext()
{
  QCString fileName = yyFileName;
  language   = getLanguageFromFileName(fileName);
  insideIDL  = language==SrcLangExt_IDL;
  insideJava = language==SrcLangExt_Java;
  insideCS   = language==SrcLangExt_CSharp; 
  insideD    = language==SrcLangExt_D;
  insidePHP  = language==SrcLangExt_PHP;
  insideObjC = language==SrcLangExt_ObjC;
  insideJS   = language==SrcLangExt_JS;
  if ( insidePHP )
  {
    useOverrideCommands = TRUE;
  }
  //printf("setContext(%s) insideIDL=%d insideJava=%d insideCS=%d "
  //       "insideD=%d insidePHP=%d insideObjC=%d\n",
  //       yyFileName.data(),insideIDL,insideJava,insideCS,insideD,insidePHP,insideObjC
  //	);
}

//-----------------------------------------------------------------------------

static void prependScope()
{
  if (current_root->section & Entry::SCOPE_MASK)
  {
    //printf("--- prependScope %s to %s\n",current_root->name.data(),current->name.data());
    current->name.prepend(current_root->name+"::");
    if (current_root->tArgLists)
    {
      if (current->tArgLists==0)
      {
	current->tArgLists = new QList<ArgumentList>;
	current->tArgLists->setAutoDelete(TRUE);
      }
      //printf("prependScope #=%d #current=%d\n",current_root->tArgLists->count(),current->tArgLists->count());
      QListIterator<ArgumentList> talsi(*current_root->tArgLists);
      ArgumentList *srcAl=0;
      for (talsi.toLast();(srcAl=talsi.current());--talsi)
      {
        ArgumentList *dstAl = new ArgumentList;
	QListIterator<Argument> tali(*srcAl);
        Argument *a;
        for (;(a=tali.current());++tali)
        {
          dstAl->append(new Argument(*a));
        //printf("appending argument %s %s\n",a->type.data(),a->name.data());
        }	  
        current->tArgLists->insert(0,dstAl);	
      }
    }
  }
}

//-----------------------------------------------------------------------------

/*! Returns TRUE iff the current entry could be a K&R style C function */
static bool checkForKnRstyleC()
{
  if (((QCString)yyFileName).right(2).lower()!=".c") return FALSE; // must be a C file
  if (!current->argList) return FALSE; // must have arguments
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    // in K&R style argument do not have a type, but doxygen expects a type
    // so it will think the argument has no name
    if (a->type.isEmpty() || !a->name.isEmpty()) return FALSE;
  }
  return TRUE;
}

//-----------------------------------------------------------------------------

static void splitKnRArg(QCString &oldStyleArgPtr,QCString &oldStyleArgName)
{
  int si = current->args.length();
  if (oldStyleArgType.isEmpty()) // new argument
  {
    static QRegExp re("([^)]*)");
    int bi1 = current->args.findRev(re);
    int bi2 = bi1!=-1 ? current->args.findRev(re,bi1-1) : -1; 
    char c;
    if (bi1!=-1 && bi2!=-1) // found something like "int (*func)(int arg)"
    {
      int s=bi2+1;
      oldStyleArgType = current->args.left(s);
      int i=s;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
      oldStyleArgType+=current->args.mid(i);
    }
    else if (bi1!=-1) // redundant braces like in "int (*var)"
    {
      int s=bi1;
      oldStyleArgType = current->args.left(s);
      s++;
      int i=s+1;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
    }
    else // normal "int *var"
    {
      int l=si,i=l-1,j;
      char c;
      // look for start of name in "type *name"
      while (i>=0 && isId(current->args.at(i))) i--;
      j=i+1;
      // look for start of *'s
      while (i>=0 && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i--;
      i++;
      if (i!=l)
      {
	oldStyleArgType=current->args.left(i);
	oldStyleArgPtr=current->args.mid(i,j-i);
	oldStyleArgName=current->args.mid(j).stripWhiteSpace();
      }
      else
      {
	oldStyleArgName=current->args.copy().stripWhiteSpace();
      }
    }
  }
  else // continuation like *arg2 in "int *args,*arg2"
  {
    int l=si,j=0;
    char c;
    while (j<l && ((c=current->args.at(j))=='*' || isspace((uchar)c))) j++;
    if (j>0)
    {
      oldStyleArgPtr=current->args.left(j);
      oldStyleArgName=current->args.mid(j).stripWhiteSpace();
    }
    else
    {
      oldStyleArgName=current->args.copy().stripWhiteSpace();
    }
  }
  //fprintf(stderr,"type=%s ptr=%s name=%s\n",oldStyleArgType.data(),oldStyleArgPtr.data(),oldStyleArgName.data());
}

//-----------------------------------------------------------------------------

/*! Update the argument \a name with additional \a type info. For K&R style
 *  function the type is found \e after the argument list, so this routine
 *  in needed to fix up.
 */
static void addKnRArgInfo(const QCString &type,const QCString &name,
                          const QCString &brief,const QCString &docs)
{
  if (current->argList==0) return;
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (a->type==name)
    {
      a->type=type.stripWhiteSpace();
      if (a->type.left(9)=="register ") // strip keyword
      {
	a->type=a->type.mid(9);
      }
      a->name=name.stripWhiteSpace();
      if (!brief.isEmpty() && !docs.isEmpty())
      {
        a->docs=brief+"\n\n"+docs;
      }
      else if (!brief.isEmpty())
      {
        a->docs=brief;
      }
      else
      {
	a->docs=docs;
      }
    }
  }
}

//-----------------------------------------------------------------------------


void fixArgumentListForJavaScript(ArgumentList *al)
{
  if (al==0) return;
  ArgumentListIterator ali(*al);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (!a->type.isEmpty() && a->name.isEmpty())
    { // a->type is actually the (typeless) parameter name, so move it
      a->name=a->type;
      a->type.resize(0);
    }
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    if (g_inputFromFile)
    {
       c = inputFile.readBlock(buf,max_size);
       if (c==-1) yy_fatal_error("input in flex scanner failed");
    }
    else
    {
      while( c < max_size && inputString[inputPosition] )
      {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
      }
    }
    return c;
}

/* start command character */
/* language parsing states */





















































































































/** Prototype scanner states */





/** comment parsing states */



#line 9293 "<stdout>"

#define INITIAL 0
#define Define 1
#define DefineEnd 2
#define CompoundName 3
#define ClassVar 4
#define CSConstraintName 5
#define CSConstraintType 6
#define CSIndexer 7
#define ClassCategory 8
#define ClassTemplSpec 9
#define CliPropertyType 10
#define CliPropertyIndex 11
#define CliOverride 12
#define Bases 13
#define BasesProt 14
#define NextSemi 15
#define BitFields 16
#define FindMembers 17
#define FindMembersPHP 18
#define FindMemberName 19
#define FindFields 20
#define FindFieldArg 21
#define Function 22
#define FuncRound 23
#define ExcpRound 24
#define ExcpList 25
#define FuncQual 26
#define Operator 27
#define Array 28
#define ReadBody 29
#define ReadNSBody 30
#define ReadBodyIntf 31
#define Using 32
#define UsingDirective 33
#define SkipCurly 34
#define SkipCurlyCpp 35
#define SkipCurlyEndDoc 36
#define SkipString 37
#define SkipPHPString 38
#define SkipInits 39
#define SkipCPP 40
#define SkipCPPBlock 41
#define SkipComment 42
#define SkipCxxComment 43
#define SkipCurlyBlock 44
#define SkipRoundBlock 45
#define Sharp 46
#define SkipSharp 47
#define SkipRound 48
#define SkipSquare 49
#define SkipRemainder 50
#define TypedefName 51
#define TryFunctionBlock 52
#define TryFunctionBlockEnd 53
#define Comment 54
#define PackageName 55
#define JavaImport 56
#define PHPUse 57
#define PHPUseAs 58
#define CSAccessorDecl 59
#define CSGeneric 60
#define PreLineCtrl 61
#define DefinePHP 62
#define DefinePHPEnd 63
#define OldStyleArgs 64
#define SkipVerbString 65
#define ObjCMethod 66
#define ObjCReturnType 67
#define ObjCParams 68
#define ObjCParamType 69
#define ObjCProtocolList 70
#define ObjCPropAttr 71
#define ObjCSkipStatement 72
#define QtPropType 73
#define QtPropName 74
#define QtPropAttr 75
#define QtPropRead 76
#define QtPropWrite 77
#define ReadInitializer 78
#define GetCallType 79
#define CppQuote 80
#define EndCppQuote 81
#define MemberSpec 82
#define MemberSpecSkip 83
#define EndTemplate 84
#define FuncPtr 85
#define FuncPtrOperator 86
#define EndFuncPtr 87
#define ReadFuncArgType 88
#define ReadTempArgs 89
#define IDLUnionCase 90
#define NSAliasName 91
#define NSAliasArg 92
#define CopyString 93
#define CopyPHPString 94
#define CopyGString 95
#define CopyPHPGString 96
#define CopyRound 97
#define CopyCurly 98
#define GCopyRound 99
#define GCopyCurly 100
#define SkipUnionSwitch 101
#define Specialization 102
#define FuncPtrInit 103
#define FuncFunc 104
#define FuncFuncEnd 105
#define FuncFuncType 106
#define FuncFuncArray 107
#define CopyArgString 108
#define CopyArgPHPString 109
#define CopyArgRound 110
#define CopyArgSharp 111
#define CopyArgComment 112
#define CopyArgCommentLine 113
#define CopyArgVerbatim 114
#define IDLAttribute 115
#define IDLProp 116
#define IDLPropName 117
#define Prototype 118
#define PrototypePtr 119
#define PrototypeQual 120
#define PrototypeExc 121
#define PrototypeSkipLine 122
#define DocLine 123
#define DocBlock 124
#define DocCopyBlock 125

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int scanYYlex_destroy (void );

int scanYYget_debug (void );

void scanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE scanYYget_extra (void );

void scanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *scanYYget_in (void );

void scanYYset_in  (FILE * in_str  );

FILE *scanYYget_out (void );

void scanYYset_out  (FILE * out_str  );

yy_size_t scanYYget_leng (void );

char *scanYYget_text (void );

int scanYYget_lineno (void );

void scanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int scanYYwrap (void );
#else
extern int scanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( scanYYtext, scanYYleng, 1, scanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( scanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( scanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, scanYYin))==0 && ferror(scanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(scanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int scanYYlex (void);

#define YY_DECL int scanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after scanYYtext and scanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( scanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(scanYYtext[scanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 717 "scanner.l"


#line 9606 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)scanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in scanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! scanYYin )
			scanYYin = stdin;

		if ( ! scanYYout )
			scanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			scanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
		}

		scanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of scanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3706 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 28563 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 719 "scanner.l"
{
  					  curlyCount=0;
					  needsSemi = TRUE;
  					  BEGIN(SkipCurlyBlock); 
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 724 "scanner.l"
{
  				 	  roundCount=0;
  					  BEGIN(SkipRoundBlock);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 728 "scanner.l"
{
					  ++roundCount;
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 731 "scanner.l"
{
  					  if (roundCount )
					    --roundCount ;
					  else
					    BEGIN( NextSemi ) ;
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 737 "scanner.l"
{
  					  ++curlyCount ; 
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 740 "scanner.l"
{ 
  				          if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else if (needsSemi)
					  {
					    BEGIN( NextSemi );
					  }
					  else
					  {
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 754 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=NextSemi;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 761 "scanner.l"
{ if (insidePHP) REJECT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 762 "scanner.l"
{
  					  lastStringContext=NextSemi;
					  BEGIN(SkipString);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 766 "scanner.l"
{ 
  					  unput(*scanYYtext);
  					  BEGIN( FindMembers ); 
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 770 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 774 "scanner.l"
{ // PHP code with unsupported extension?
                                          insidePHP = TRUE;
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 777 "scanner.l"
{ // PHP code start
                                           BEGIN( FindMembers );
					}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 780 "scanner.l"
{ // PHP code start
					  lineCount() ;
                                          BEGIN( FindMembers );
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 784 "scanner.l"
{ // Non-PHP code text, ignore
  					}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 786 "scanner.l"
{ // Non-PHP code text, ignore
  					  yyLineNr++;
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 789 "scanner.l"
{ // Non-PHP code text, ignore
				        }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 791 "scanner.l"
{ // PHP code end
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    REJECT;
                                        }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 797 "scanner.l"
{ if (insidePHP)
					    BEGIN( NextSemi );
					  else
					    REJECT;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 802 "scanner.l"
{ // Mozilla XPIDL lang-specific block
					  if (!insideIDL)
					    REJECT;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 806 "scanner.l"
{ // Mozilla XPIDL lang-specific block end
					  if (!insideIDL)
					    REJECT;
					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 810 "scanner.l"
{ // IDL or Borland C++ builder property 
  					  current->mtype = mtype = Property;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 820 "scanner.l"
{ current->mtype = mtype = DCOP;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 829 "scanner.l"
{ current->mtype = mtype = Signal;
  
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 839 "scanner.l"
{
					  current->protection = protection = Public ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 849 "scanner.l"
{
					  current->protection = protection = Protected ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 859 "scanner.l"
{
					  current->protection = protection = Private ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 868 "scanner.l"
{ 
					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 877 "scanner.l"
{  // for now treat C++/CLI's internal as package...
  					  if (insideCli)
					  {
					    current->protection = protection = Package ;
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    lineCount() ;
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 893 "scanner.l"
{  
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 902 "scanner.l"
{ 
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 911 "scanner.l"
{ 
  					  if (insideCli)
					  {
					    // C++/CLI event
					    lineCount() ;
  					    current->mtype = mtype = Event;
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN( CliPropertyType );
					  }
					  else if (insideCS)
					  {
					    lineCount() ;
  					    current->mtype = Event;
					    current->bodyLine = yyLineNr;
					  }
					  else
					  {
					    REJECT;
					  }
                                        }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 932 "scanner.l"
{
  					   if (insideCli)
					   {
					     // C++/CLI property
					     lineCount() ;
  					     current->mtype = mtype = Property;
					     current->bodyLine = yyLineNr;
					     curlyCount=0;
					     BEGIN( CliPropertyType );
					   }
					   else
					   {
					     REJECT;
					   }
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 947 "scanner.l"
{
  					  addType( current );
  					  current->name = scanYYtext;
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 951 "scanner.l"
{ // C++/CLI indexed property
  					  current->name += scanYYtext;
					  BEGIN( CliPropertyIndex );
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 955 "scanner.l"
{
					  curlyCount=0;
					  //printf("event: '%s' '%s'\n",current->type.data(),current->name.data());
  					  BEGIN( CSAccessorDecl );
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 960 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 964 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 967 "scanner.l"
{
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 969 "scanner.l"
{
  					  addType( current );
  					  current->type += scanYYtext;
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 973 "scanner.l"
{
                                          BEGIN( CliPropertyType );
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 977 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 980 "scanner.l"
{ 
                                          if (!current->type.isEmpty())
					  {
					    REJECT;
                                          }
					  else
					  { 
                                            current->mtype = mtype = Property;
                                            lineCount();
					  }
                                        }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 991 "scanner.l"
{
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1000 "scanner.l"
{
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1009 "scanner.l"
{
  					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1018 "scanner.l"
{
  					  if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
  					    lineCount();
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    current->section = Entry::FUNCTION_SEC;
					    current->protection = protection = Public ;
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					    current->virt = Virtual;
					    current->stat=scanYYtext[0]=='+';
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    BEGIN( ObjCMethod );
					  }
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1043 "scanner.l"
{ // start of method's return type
  					  BEGIN( ObjCReturnType );
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1046 "scanner.l"
{ // found method name
  					  if (current->type.isEmpty())
					  {
					    current->type = "id";
					  }
					  current->name = scanYYtext;
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1053 "scanner.l"
{ // start of parameter list
  					  current->name += ':';
  					  Argument *a = new Argument;
					  current->argList->append(a);
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1059 "scanner.l"
{ // TODO: check if nested braches are possible.
  					  current->type = scanYYtext;
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1062 "scanner.l"
{
  					  BEGIN( ObjCMethod );
  					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1065 "scanner.l"
{ // Keyword of parameter
					  QCString keyw = scanYYtext;
					  keyw=keyw.left(keyw.length()-1); // strip :
					  if (keyw.isEmpty())
					  {
					    current->name += " :";
					  }
					  else
					  {
					    current->name += keyw+":";
					  }
					  if (current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  Argument *a = new Argument;
  					  a->attrib=(QCString)"["+keyw+"]";
					  current->argList->append(a);
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1084 "scanner.l"
{ // name of parameter
  					  lineCount();
  					  current->argList->getLast()->name=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1088 "scanner.l"
{ // name of parameter
  					  lineCount();
					  // do we want the comma as part of the name?
  					  //current->name += ",";
  					  Argument *a = new Argument;
  					  a->attrib="[,]";
  					  a->type="...";
					  current->argList->append(a);
  					}
	YY_BREAK
/*
<ObjCParams>":"				{ 
					  current->name += ':';
					}
   */
case 56:
YY_RULE_SETUP
#line 1102 "scanner.l"
{
  					  BEGIN( ObjCParamType );
  					}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1105 "scanner.l"
{
  					  current->argList->getLast()->type=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 58:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1108 "scanner.l"
{
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1111 "scanner.l"
{ // end of method declaration
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
					  //printf("argList=%s\n",current->args.data());
  					  unput(';');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1121 "scanner.l"
{ // start of a method body
  					  lineCount();
                                          //printf("Type=%s Name=%s args=%s\n",
					  //    current->type.data(),current->name.data(),argListToString(current->argList).data()
					  //    );
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
                                          unput('{');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1134 "scanner.l"
{
  					  lineCount();
  					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1137 "scanner.l"
{
  					  if (insideJava) // Java annotation
					  {
  					    lineCount();
					    lastSkipRoundContext = YY_START;
					    roundCount=1;
					    BEGIN( SkipRound );
					  }
					  else if (strncmp(scanYYtext,"@property",9)==0) // ObjC 2.0 property
					  {
  					    current->mtype = mtype = Property;
					    current->spec|=Entry::Readable | Entry::Writable | Entry::Assign;
					    current->protection = Public ;
					    unput('(');
					    BEGIN( ObjCPropAttr );
					  }
					  else
					  {
					    REJECT;
					  }
                                        }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1158 "scanner.l"
{ 
                                          current->read = scanYYtext+7;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1161 "scanner.l"
{ 
                                          current->write = scanYYtext+7;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1164 "scanner.l"
{
					  current->spec&=~Entry::Writable;
  					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1167 "scanner.l"
{ // default
  					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1169 "scanner.l"
{ // default
  					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1171 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Retain;
  					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1175 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Strong;
  					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1179 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Weak;
  					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1183 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Copy;
  					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1187 "scanner.l"
{
					  current->spec|=Entry::NonAtomic;
  					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1190 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1193 "scanner.l"
{
  					  if (insideJava) // Java annotation
					  {
					    // skip annotation
					  }
					  else if (strcmp(scanYYtext,"@property")==0) // ObjC 2.0 property
					  {
  					    current->mtype = mtype = Property;
					    current->spec|=Entry::Writable | Entry::Readable | Entry::Assign;
					    current->protection = Public ;
					  }
					  else if (strcmp(scanYYtext,"@synthesize")==0)
					  {
					    BEGIN( ObjCSkipStatement );
					  }
					  else if (strcmp(scanYYtext,"@dynamic")==0)
					  {
					    BEGIN( ObjCSkipStatement );
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1217 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1220 "scanner.l"
{
  					  isTypedef=FALSE;
					  current->name = scanYYtext;
					  current->name = substitute(current->name,".","::");
					  current->name = substitute(current->name,"\\","::");
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
  					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1232 "scanner.l"
{
					  current_root->addSubEntry(current);
                                          current_root = current ;
					  current = new Entry ;
					  initEntry();
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1239 "scanner.l"
{
					  curlyCount=0;
					  BEGIN( ReadNSBody );
  					}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1243 "scanner.l"
{
  					  current->type += " initonly ";
					  if (insideCli) current->spec |= Entry::Initonly;
					  lineCount();
  					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1248 "scanner.l"
{ current->type += " static ";
  					  current->stat = TRUE;
					  lineCount();
					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1252 "scanner.l"
{
  					  current->stat = FALSE;
					  current->explicitExternal = TRUE;
					  lineCount();
  					}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1257 "scanner.l"
{ current->type += " virtual ";
					  current->virt = Virtual;
					  lineCount();
					}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1261 "scanner.l"
{ 
                                          if (!insidePHP) 
					  {
					    current->type += " abstract ";
					    current->virt = Pure;
					  }
					  else
					  {
					    current->spec|=Entry::Abstract;
					  }
					  lineCount();
					}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1273 "scanner.l"
{ current->spec|=Entry::Inline;
                                          lineCount(); 
                                        }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1276 "scanner.l"
{ current->spec|=Entry::Mutable;
                                          lineCount(); 
                                        }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1279 "scanner.l"
{ current->spec|=Entry::Explicit;
                                          lineCount(); 
                                        }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1282 "scanner.l"
{ // Objective C 2.0 protocol required section
                                          current->spec=(current->spec & ~Entry::Optional) | Entry::Required;
                                          lineCount(); 
                                        }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1286 "scanner.l"
{  // Objective C 2.0 protocol optional section
                                          current->spec=(current->spec & ~Entry::Required) | Entry::Optional;
                                          lineCount(); 
                                        }
	YY_BREAK
/*
<FindMembers>{B}*"import"{BN}+		{ // IDL import keyword
  					  BEGIN( NextSemi );
  					}
  */
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1295 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 90:
/* rule 90 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1296 "scanner.l"
{ 
  					  isTypedef=FALSE;
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  if (insidePHP)
					  {
					    BEGIN( PackageName );
					  }
					  else
					  {
  					    BEGIN( CompoundName ); 
					  }
					}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1313 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "module" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else if (insideD)
					  {
					    lineCount();
					    BEGIN(PackageName);
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1336 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "library" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1354 "scanner.l"
{ // M$/Corba IDL/Java interface
					  lineCount();
                                          if (insideIDL || insideJava || insideCS || insideD || insidePHP)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
                                            current->spec = Entry::Interface;
					    addType( current ) ;
					    current->type += " interface" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    BEGIN( CompoundName );
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
  					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1374 "scanner.l"
{ // Objective-C class implementation
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::OBJCIMPL_SEC;
					  language = current->lang = SrcLangExt_ObjC;
					  insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " implementation" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1388 "scanner.l"
{ // Objective-C class interface, or Java attribute
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Interface;
					  if (!insideJava)
					  {
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					  }
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " interface" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1406 "scanner.l"
{ // Objective-C protocol definition
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Protocol;
					  language = current->lang = SrcLangExt_ObjC;
					  insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " protocol" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1421 "scanner.l"
{ // Corba IDL exception
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Exception;
					  addType( current ) ;
					  current->type += " exception" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 98:
#line 1434 "scanner.l"
case 99:
/* rule 99 can match eol */
#line 1435 "scanner.l"
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1435 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
					  addType( current ) ;
					  current->type += " class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  if (scanYYtext[0]=='@')
					  {
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					  }
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  if (insidePHP && current->spec&Entry::Abstract)
					  {
					    // convert Abstract to AbstractClass
					    current->spec=(current->spec&~Entry::Abstract)|Entry::AbstractClass;
					  }
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 101:
#line 1458 "scanner.l"
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 1458 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Value;
					  addType( current ) ;
					  current->type += " value class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 103:
#line 1472 "scanner.l"
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1472 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Ref;
					  addType( current ) ;
					  current->type += " ref class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 105:
#line 1486 "scanner.l"
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 1486 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Interface;
					  addType( current ) ;
					  current->type += " interface class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1499 "scanner.l"
{
  					  if (insideIDL)
					  {
					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
					    addType( current ) ;
					    current->type += " coclass" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    lineCount() ;
					    BEGIN( CompoundName ) ;
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
					  }
  					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
#line 1521 "scanner.l"
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1521 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC ;
                                          current->spec    = Entry::Struct;
					  // bug 582676: can be a struct nested in an interface so keep insideObjC state
					  //current->objc    = insideObjC = FALSE;
					  addType( current ) ;
					  current->type += " struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 110:
#line 1537 "scanner.l"
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1537 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Value;
					  addType( current ) ;
					  current->type += " value struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 112:
#line 1551 "scanner.l"
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 1551 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Ref;
					  addType( current ) ;
					  current->type += " ref struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 114:
#line 1565 "scanner.l"
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1565 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Interface;
					  addType( current ) ;
					  current->type += " interface struct";
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
#line 1579 "scanner.l"
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 1579 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Union;
					  // bug 582676: can be a struct nested in an interface so keep insideObjC state
					  //current->objc    = insideObjC = FALSE;
					  addType( current ) ;
					  current->type += " union" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
#line 1595 "scanner.l"
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1595 "scanner.l"
{ // for IDL: typedef [something] enum
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::ENUM_SEC ;
					  addType( current ) ;
					  current->type += " enum" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1607 "scanner.l"
{  // A::operator()<int>(int arg)
  					  lineCount();
					  current->name += "()";
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 121:
/* rule 121 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1612 "scanner.l"
{
  					  lineCount();
    					  current->name += scanYYtext ;
					  current->name = current->name.simplifyWhiteSpace();
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1618 "scanner.l"
{ // can occur when importing members
  					  unput(';');
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1622 "scanner.l"
{ 
    					  lineCount();
    					  current->name += *scanYYtext ;
					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1626 "scanner.l"
{ /* skip guided templ specifiers */ }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1627 "scanner.l"
{
					  current->name = current->name.simplifyWhiteSpace();
					  unput(*scanYYtext);
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1632 "scanner.l"
{  // generic is a C++/CLI extension
  					  lineCount();
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  //current->spec |= (scanYYtext[0]=='g') ? Entry::Generic : Entry::Template;
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  fullArgString = templateStr;
					  copyArgString = &templateStr;
					  currentArgumentContext = FindMembers;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1649 "scanner.l"
{ // namespace alias
                                          lineCount(); 
  					  BEGIN( NSAliasName );
					}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1653 "scanner.l"
{
  					  aliasName = scanYYtext;
					  BEGIN( NSAliasArg );
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1657 "scanner.l"
{
  					  //printf("Inserting namespace alias %s::%s->%s\n",current_root->name.data(),aliasName.data(),scanYYtext);
					  //if (current_root->name.isEmpty())
					  //{
                                          // TODO: namespace aliases are now treated as global entities
                                          // while they should be aware of the scope they are in
                                            Doxygen::namespaceAliasDict.insert(aliasName,new QCString(scanYYtext));
					  //}
					  //else
					  //{
                                          //  Doxygen::namespaceAliasDict.insert(current_root->name+"::"+aliasName,
					  //	new QCString(current_root->name+"::"+scanYYtext));
					  //}
  					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1671 "scanner.l"
{
  					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 1674 "scanner.l"
{
  					  lineCount();
					  aliasName=scanYYtext;
                                          //current->fileName = yyFileName; 
  					  //current->section=Entry::USINGDIR_SEC;
					  //current_root->addSubEntry(current);
					  //current = new Entry;
					  //initEntry();
					  BEGIN(PHPUseAs);
					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1684 "scanner.l"
{
  					  lineCount();
  					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1687 "scanner.l"
{
                                          Doxygen::namespaceAliasDict.insert(scanYYtext,
					       new QCString(removeRedundantWhiteSpace(
						   substitute(aliasName,"\\","::"))));
					  aliasName.resize(0);
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1693 "scanner.l"
{
                                          if (!aliasName.isEmpty())
					  {
					    int i=aliasName.findRev('\\');
					    QCString an = removeRedundantWhiteSpace(
						    substitute(aliasName,"\\","::"));
					    Doxygen::namespaceAliasDict.insert(aliasName.mid(i+1),
						                        new QCString(an));
					    current->name     = an;
					    current->fileName = yyFileName; 
					    current->section=Entry::USINGDECL_SEC;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    initEntry();
					  }
					  if (*scanYYtext==',')
					  {
					    BEGIN(PHPUse);
					  }
					  else
					  {
  					    BEGIN(FindMembers);
					  }
  					}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1717 "scanner.l"
{ // package import => add as a using directive
  					  lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope.left(scope.length()-1),".","::"));
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1728 "scanner.l"
{ // class import => add as a using declaration
                                          lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope,".","::"));
					  current->fileName = yyFileName; 
					  if (insideD) 
					  {
					    current->section=Entry::USINGDIR_SEC;
					  }
					  else
					  {
					    //printf("import name = %s -> %s\n",scanYYtext,current->name.data());
					    current->section=Entry::USINGDECL_SEC;
					  }
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1747 "scanner.l"
{ 
					  current->startLine=yyLineNr; 
                                          lineCount(); 
                                          BEGIN(Using); 
                                        }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1752 "scanner.l"
{ lineCount(); BEGIN(UsingDirective); }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1753 "scanner.l"
{
                                          lineCount();
  					  current->name=scanYYtext;
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDECL_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  if (insideCS) /* Hack: in C# a using declaration and 
							   directive have the same syntax, so we
							   also add it as a using directive here
							 */
					  {
					    current->name=scanYYtext;
					    current->fileName = yyFileName; 
					    current->startLine = yyLineNr;
					    current->section=Entry::USINGDIR_SEC;
					    current_root->addSubEntry(current);
					    current             = new Entry ;
					  }
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1775 "scanner.l"
{ current->name=removeRedundantWhiteSpace(scanYYtext);
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1783 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1784 "scanner.l"
{ // guided template decl
					  QCString n=scanYYtext;
					  addType( current );
					  current->name=n.left(n.length()-2);
					}
	YY_BREAK
case 143:
/* rule 143 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1789 "scanner.l"
{ // Note: this could be a return type!
  					  sharpCount=0;
					  lineCount();
					  addType( current );
  					  current->name=scanYYtext;
					  current->name=current->name.stripWhiteSpace();
					  //current->scopeSpec.resize(0);
					  // currentTemplateSpec = &current->scopeSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
					}
	YY_BREAK
case 144:
/* rule 144 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1802 "scanner.l"
{
  					  sharpCount=0;
					  roundCount=0;
					  lineCount();
  					  current->name+=((QCString)scanYYtext).stripWhiteSpace();
					  //current->memberSpec.resize(0);
					  // currentTemplateSpec = &current->memberSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
  					}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1814 "scanner.l"
{
  					  current->name+=scanYYtext;
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1818 "scanner.l"
{ 
  					  current->name+='<';
  					  // *currentTemplateSpec+='<'; 
					  sharpCount++; 
					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1823 "scanner.l"
{
  					  if (insideJava || insideCS || insideCli || roundCount==0)
					  {
					    unput('>');
					    unput(' ');
					    unput('>');
					  }
					  else
					  {
  					    current->name+=scanYYtext;
					  }
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1836 "scanner.l"
{
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {  
					    //printf("Found %s\n",current->name.data());
					    BEGIN(FindMembers);
					  }
					}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 1845 "scanner.l"
{ 
  					  lineCount();
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    current->bodyLine = yyLineNr;
					    current->args = "(";
					    currentArgumentContext = FuncQual;
					    fullArgString = current->args.copy();
					    copyArgString = &current->args;
					    //printf("Found %s\n",current->name.data());
					    BEGIN( ReadFuncArgType ) ;
					  }
					}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1860 "scanner.l"
{ // function pointer returning a template instance
  					  lineCount();
  					  current->name+='>';
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 151:
/* rule 151 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1865 "scanner.l"
{
  					  lineCount();
  					  current->name+='>';
  					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    BEGIN(FindMemberName);
					  }
  					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1874 "scanner.l"
{ current->name+=*scanYYtext;
                                          roundCount++; 
                                        }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1877 "scanner.l"
{ current->name+=*scanYYtext;
                                          if (roundCount>0) roundCount--; 
                                        }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1880 "scanner.l"
{ 
  					  current->name+=*scanYYtext;
  					  // *currentTemplateSpec+=*scanYYtext; 
					}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 1884 "scanner.l"
{
					  if (insidePHP)
					  {
					    current->bodyLine = yyLineNr;
					    BEGIN( DefinePHP );
					  }
					  else
					    REJECT;
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1893 "scanner.l"
{ // Qt object macro
  					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1895 "scanner.l"
{ // Qt property declaration
					  current->protection = protection = Public ;
  					  current->mtype = mtype = Property;
					  current->type.resize(0);
  					  BEGIN(QtPropType);
  					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1901 "scanner.l"
{ // start of property arguments
  					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1903 "scanner.l"
{ // end of property arguments
  					  unput(';');
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1907 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1910 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1913 "scanner.l"
{
  					  current->type+=scanYYtext;
                                          BEGIN(QtPropName);
  					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1917 "scanner.l"
{
  					  current->name=scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1921 "scanner.l"
{
  					  current->spec |= Entry::Readable;
					  BEGIN(QtPropRead);
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1925 "scanner.l"
{
  					  current->spec |= Entry::Writable;
					  BEGIN(QtPropWrite);
  					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1929 "scanner.l"
{ // reset method => not supported yet
  					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1931 "scanner.l"
{ // scriptable property => not supported yet
  					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1933 "scanner.l"
{ // designable property => not supported yet
  					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1935 "scanner.l"
{
  					  current->read = scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1939 "scanner.l"
{
  					  current->write = scanYYtext;
					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 1943 "scanner.l"
{
  					  current->name=scanYYtext;
				          BEGIN(FindMembers);
			 	        }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 1947 "scanner.l"
{
					  lineCount();
                                          if (insideIDL && scanYYleng==9 && strcmp(scanYYtext,"cpp_quote")==0)
					  {
					    BEGIN(CppQuote);
					  }
					  else if ((insideIDL || insideJava || insideD) && scanYYleng==6 && strcmp(scanYYtext,"import")==0)
					  {
					    if (insideIDL)
					      BEGIN(NextSemi);
					    else // insideJava or insideD
					      BEGIN(JavaImport);
					  }
					  else if (insidePHP && strcmp(scanYYtext,"use")==0)
					  {
					    BEGIN(PHPUse);
					  }
					  else if (insideJava && strcmp(scanYYtext,"package")==0)
					  {
  					    lineCount();
					    BEGIN(PackageName);
					  }
					  else if (insideIDL && strcmp(scanYYtext,"case")==0)
					  {
					    BEGIN(IDLUnionCase);
					  }
					  else if (insideTryBlock && strcmp(scanYYtext,"catch")==0)
					  {
					    insideTryBlock=FALSE;
					    BEGIN(TryFunctionBlock);
					  }
					  else if (insideJS && strcmp(scanYYtext,"var")==0)
					  { // javascript variable
					    current->type="var";
					  }
					  else if (insideJS && strcmp(scanYYtext,"function")==0)
					  { // javascript function
					    current->type="function";
					  }
					  else if (insideCS && strcmp(scanYYtext,"this")==0)
					  {
					    // C# indexer
					    addType( current ) ;
					    current->name="this";
					    BEGIN(CSIndexer);
					  }
					  else
					  {
					    if (YY_START==FindMembers)
					    {
					      addType( current ) ;
					    }
					    bool javaLike = insideJava || insideCS || insideD || insidePHP || insideJS;
					    if (javaLike && strcmp(scanYYtext,"public")==0)
					    {
					      current->protection = Public;
					    }
					    else if (javaLike && strcmp(scanYYtext,"protected")==0)
					    {
					      current->protection = Protected;
					    }
					    else if (javaLike && strcmp(scanYYtext,"private")==0)
					    {
					      current->protection = Private;
					    }
					    else if (javaLike && strcmp(scanYYtext,"static")==0)
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
			 		      current->stat = TRUE;
					    }
					    else
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
					      if (current->name.left(7)=="static ")
					      {
						current->stat = TRUE;
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(7)=="inline ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="inline";
						}
						else
						{
						  current->type+="inline ";
						}
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(6)=="const ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="const";
						}
						else
						{
						  current->type+="const ";
						}
						current->name=current->name.mid(6);
					      }
					    }
					    QCString tmp=scanYYtext;
					    if (nameIsOperator(tmp))
                                            {
					      BEGIN( Operator );
                                            }
					    else
                                            {
		 			      BEGIN(FindMembers);
                                            }
					  }
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 2067 "scanner.l"
{
					  current->name+=removeRedundantWhiteSpace(scanYYtext);
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 2071 "scanner.l"
{ // some number where we did not expect one
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2073 "scanner.l"
{
  					  if (insideJava || insideCS || insideD)
					  {
					    current->name+=".";
					  }
  					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2079 "scanner.l"
{
					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 2082 "scanner.l"
{
  					  insideCppQuote=TRUE;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2086 "scanner.l"

	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2087 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 2088 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 2089 "scanner.l"

	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 2090 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2091 "scanner.l"
{ 
					  curlyCount=0;
					  lastCurlyContext = TryFunctionBlockEnd ;
  					  BEGIN( SkipCurly );
					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2096 "scanner.l"

	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 2097 "scanner.l"
{ lineCount(); BEGIN(TryFunctionBlock); // {BN}* added to fix bug 611193
					}
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 2099 "scanner.l"
{ unput(*scanYYtext); // rule added to fix bug id 601138
  					  BEGIN( FindMembers );
					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2102 "scanner.l"
{ unput(*scanYYtext);
  					  BEGIN( FindMembers );
					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2105 "scanner.l"
{
  					  insideCppQuote=FALSE;
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 2109 "scanner.l"
{ if (insidePHP)
					    REJECT;
					  lastCPPContext = YY_START;
					  BEGIN( SkipCPP ) ;
					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 2114 "scanner.l"
{
  					  if (insidePHP)
					    REJECT;
  					  current->bodyLine = yyLineNr;
  					  BEGIN( Define );
  					}
	YY_BREAK
case 191:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2120 "scanner.l"
{ /* line control directive */
                                          yyLineNr = atoi(&scanYYtext[1]);
					  //printf("setting line number to %d\n",yyLineNr);
					  lastPreLineCtrlContext = YY_START;
					  if (YY_START==ReadBody || 
					      YY_START==ReadNSBody ||
					      YY_START==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
  					  BEGIN( PreLineCtrl );
  					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2132 "scanner.l"
{
				          yyFileName = stripQuotes(scanYYtext);
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
					    current->program+=scanYYtext;
					  }
  					}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 2141 "scanner.l"
{
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
                                        }
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 2149 "scanner.l"
{
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
                                          yyLineNr++;
  					  BEGIN( lastPreLineCtrlContext );
  					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2159 "scanner.l"

	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 2160 "scanner.l"
{ yyLineNr++ ; }
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 2161 "scanner.l"
{ yyLineNr++ ;
					  BEGIN( lastCPPContext) ;
					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2164 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->args = "(";
  					  current->bodyLine = yyLineNr;
					  currentArgumentContext = DefineEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
/*
<DefineArg>")"				{
  					  //printf("Define with args\n");
  					  current->args += ')';
  					  BEGIN( DefineEnd );
  					}
<DefineArg>.				{
  					  current->args += *scanYYtext;
  					}
  */
case 199:
YY_RULE_SETUP
#line 2184 "scanner.l"
{
  					  //printf("Define `%s' without args\n",scanYYtext);
  					  current->bodyLine = yyLineNr;
  					  current->name = scanYYtext;
					  BEGIN(DefineEnd);
  					}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 2190 "scanner.l"
{
  					  //printf("End define: doc=%s docFile=%s docLine=%d\n",current->doc.data(),current->docFile.data(),current->docLine);
					  yyLineNr++;
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
  					  current->args       = current->args.simplifyWhiteSpace();
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::DEFINE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 2204 "scanner.l"
{
  					  //printf("End define\n");
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
  					  current->args       = current->args.simplifyWhiteSpace();
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::ENUM_SEC;  //HACK!
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 2217 "scanner.l"

	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 2218 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 2221 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
					    lastStringContext=DefineEnd;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 2232 "scanner.l"

	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 2233 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1);
					  current->args = "(";
  					  current->bodyLine = yyLineNr;
  					  lastRoundContext = DefinePHPEnd;
  					  pCopyRoundString = &current->args;
					  roundCount = 0;
  					  BEGIN( CopyRound );
					}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 2246 "scanner.l"
{  // ^ and % are C++/CLI extensions
  					  if (insideCli)
					  {
  					    addType( current );
                                            current->name = scanYYtext ; 
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 2257 "scanner.l"
{ 
                                          current->name += scanYYtext ;  
  					  addType( current );
					}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 2261 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = ';';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 210:
/* rule 210 can match eol */
YY_RULE_SETUP
#line 2284 "scanner.l"
{
  					  lineCount();
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = ',';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 2303 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = 0;
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 2327 "scanner.l"
{
  					  //handleGroupStartCommand(current->name);
                                          if (previous && previous->section==Entry::GROUPDOC_SEC)
					  {
					    // link open command to the group defined in the previous entry
					    openGroup(previous,yyFileName,yyLineNr);
					  }
					  else
					  {
					    // link open command to the current entry
					    openGroup(current,yyFileName,yyLineNr);
					  }
					  //current = tmp;
					  initEntry();
					  if (scanYYtext[1]=='/')
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='/')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlockAutoBrief = FALSE;
					      docBlock.resize(0);
					      docBlockTerm = 0;
					      startCommentBlock(TRUE);
					      BEGIN(DocLine);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipCxxComment);
					    }
					  }
					  else
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='*')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlock.resize(0);
					      docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                          ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					      docBlockTerm = 0;
					      startCommentBlock(FALSE);
					      BEGIN(DocBlock);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipComment);
					    }
					  }
  					}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 2379 "scanner.l"
{
  					  closeGroup(current,yyFileName,yyLineNr);
  					}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 2382 "scanner.l"
{ // in PHP code this could also be due to "<?="
  					  current->bodyLine = yyLineNr;
					  lastInitializerContext = YY_START;
					  initBracketCount=0;
					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
/* Read initializer rules */
case 215:
YY_RULE_SETUP
#line 2389 "scanner.l"
{
  					  lastRoundContext=YY_START;
  					  pCopyRoundGString=&current->initializer;
					  roundCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(GCopyRound);
  					}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 2396 "scanner.l"
{
  					  lastCurlyContext=YY_START;
  					  pCopyCurlyGString=&current->initializer;
					  curlyCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(GCopyCurly);
  					}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 2403 "scanner.l"
{
  					  //printf(">> initializer `%s' <<\n",current->initializer.data());
  					  if (*scanYYtext==';' || lastInitializerContext==FindFields)
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else if (*scanYYtext==',' && initBracketCount==0) // for "int a=0,b=0"
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else
					  {
  					    current->initializer+=*scanYYtext; 
					  }
  					}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 2420 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
  					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
                                            lastStringContext=YY_START;
  					    current->initializer=scanYYtext; 
  					    pCopyQuotedGString=&current->initializer;
					    BEGIN(CopyGString);
					  }
					}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 2433 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 2436 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 2439 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
  					}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 2442 "scanner.l"
{
  					  initBracketCount++;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 2446 "scanner.l"
{
  					  initBracketCount--;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 2450 "scanner.l"
{	
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedGString = &current->initializer;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					  else
					  {
					    current->initializer+=scanYYtext; 
					  }
  					}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 2463 "scanner.l"
{ 
                                          if (insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {  
					    current->initializer+=scanYYtext; 
					  }
                                        } 
	YY_BREAK
case 226:
/* rule 226 can match eol */
YY_RULE_SETUP
#line 2473 "scanner.l"
{
  					  current->initializer+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 2477 "scanner.l"
{ 
  					  //printf("insideCS=%d\n",insideCS);
  					  current->initializer+=scanYYtext;
                                          if (!insideCS && !insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
					    // C#/ObjC verbatim string
					    lastSkipVerbStringContext=YY_START;
					    pSkipVerbString=&current->initializer;
					    BEGIN(SkipVerbString);
					  }
					}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 2492 "scanner.l"
{
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 2495 "scanner.l"
{ // quote escape
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 2498 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
					  BEGIN(lastSkipVerbStringContext);
					}
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 2502 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 2506 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
  					}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 2509 "scanner.l"
{
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    current->initializer+=scanYYtext;
  					}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 2515 "scanner.l"
{ 
  					  current->initializer+=*scanYYtext; 
					}
	YY_BREAK
/* generic quoted string copy rules */
case 235:
YY_RULE_SETUP
#line 2520 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 2523 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 2527 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 2531 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 2534 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
  					  yyLineNr++;
  					}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 2538 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
  					}
	YY_BREAK
/* generic quoted growable string copy rules */
case 241:
YY_RULE_SETUP
#line 2543 "scanner.l"
{
  					  *pCopyQuotedGString+=scanYYtext;
  					}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 2546 "scanner.l"
{ 
  					  *pCopyQuotedGString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 2550 "scanner.l"
{ 
  					  *pCopyQuotedGString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 2554 "scanner.l"
{
  					  *pCopyQuotedGString+=scanYYtext;
  					}
	YY_BREAK
case 245:
/* rule 245 can match eol */
YY_RULE_SETUP
#line 2557 "scanner.l"
{
  					  *pCopyQuotedGString+=*scanYYtext;
  					  yyLineNr++;
  					}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 2561 "scanner.l"
{
  					  *pCopyQuotedGString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules */
case 247:
YY_RULE_SETUP
#line 2566 "scanner.l"
{
					  *pCopyRoundString+=*scanYYtext;
  					  pCopyQuotedString=pCopyRoundString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 2572 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 2576 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 250:
/* rule 250 can match eol */
YY_RULE_SETUP
#line 2581 "scanner.l"
{
  					  yyLineNr++;
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 2585 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedString = pCopyRoundString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					  else
					  {
					    *pCopyRoundString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 2598 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 2608 "scanner.l"
{
  					  *pCopyRoundString+=scanYYtext;
  					}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 2611 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules for growable strings */
case 255:
YY_RULE_SETUP
#line 2616 "scanner.l"
{
					  *pCopyRoundGString+=*scanYYtext;
  					  pCopyQuotedGString=pCopyRoundGString;
					  lastStringContext=YY_START;
					  BEGIN(CopyGString);
					}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 2622 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 2626 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 2631 "scanner.l"
{
  					  yyLineNr++;
  					  *pCopyRoundGString+=*scanYYtext;
  					}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 2635 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedGString = pCopyRoundGString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					  else
					  {
					    *pCopyRoundGString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 2648 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundGString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 2658 "scanner.l"
{
  					  *pCopyRoundGString+=scanYYtext;
  					}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 2661 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules */
case 263:
YY_RULE_SETUP
#line 2666 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  pCopyQuotedString=pCopyCurlyString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 2672 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedString=pCopyCurlyString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 2681 "scanner.l"
{
  					  *pCopyCurlyString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 2685 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 2690 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 2699 "scanner.l"
{
  					  *pCopyCurlyString+=scanYYtext;
  					}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 2702 "scanner.l"
{ *pCopyCurlyString+=scanYYtext; }
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 2703 "scanner.l"
{
  					  yyLineNr++;
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 2707 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules for growable strings */
case 272:
/* rule 272 can match eol */
YY_RULE_SETUP
#line 2712 "scanner.l"
{ // start of included file marker
                                        }
	YY_BREAK
case 273:
/* rule 273 can match eol */
YY_RULE_SETUP
#line 2714 "scanner.l"
{ // end of included file marker
					  QCString line = QCString(scanYYtext);
					  int s = line.find(' ');
					  int e = line.find('"',s);
					  yyLineNr = line.mid(s,e-s).toInt();
					  if (scanYYtext[scanYYleng-1]=='\n')
					  {
					    yyLineNr++;
					  }
  					}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 2724 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					  pCopyQuotedGString=pCopyCurlyGString;
					  lastStringContext=YY_START;
					  BEGIN(CopyGString);
					}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 2730 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedGString=pCopyCurlyGString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 2739 "scanner.l"
{
  					  *pCopyCurlyGString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 2743 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 2748 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyGString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 2757 "scanner.l"
{
  					  *pCopyCurlyGString+=scanYYtext;
  					}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 2760 "scanner.l"
{ *pCopyCurlyGString+=scanYYtext; }
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 2761 "scanner.l"
{
  					  yyLineNr++;
					  *pCopyCurlyGString+=*scanYYtext;
  					}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 2765 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					}
	YY_BREAK
/* ---------------------- */
case 283:
YY_RULE_SETUP
#line 2772 "scanner.l"
{
  					  if (current->type.isEmpty()) // anonymous padding field, e.g. "int :7;"
					  {
					    addType(current);
					    current->name.sprintf("__pad%d__",padCount++);
					  }
  					  BEGIN(BitFields);
					  current->bitfields+=":";
  					}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 2781 "scanner.l"
{
  					  current->bitfields+=*scanYYtext;
  					}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 2784 "scanner.l"
{ 
  					  QCString oldType = current->type.copy();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine = yyLineNr;
					  }
                                          if ( insidePHP && current->type.left(3) == "var" )
                                          {
                                            current->type = current->type.mid(3);
                                          }
					  if (isTypedef && current->type.left(8)!="typedef ")
					  {
					    current->type.prepend("typedef ");
					  }
					  bool needNewCurrent=FALSE;
					  if (!current->name.isEmpty() && current->section!=Entry::ENUM_SEC)
					  {
					    current->type=current->type.simplifyWhiteSpace();
					    current->args=removeRedundantWhiteSpace(current->args);
					    current->name=current->name.stripWhiteSpace();
					    if (current->section==Entry::CLASS_SEC) // remove spec for "struct Bla bla;"
					    {
					    	current->spec = 0;
					    }
					    current->section = Entry::VARIABLE_SEC ;
					    current->fileName = yyFileName;
					    current->startLine = yyLineNr;
					    current_root->addSubEntry( current ) ;
					    needNewCurrent=TRUE;
					  }
					  if ( *scanYYtext == ',')
					  {
					    if (needNewCurrent)
					    {
					      current = new Entry(*current);
					      initEntry();
					    }
					    current->name.resize(0);
					    current->args.resize(0);
					    current->brief.resize(0);
					    current->doc.resize(0);
					    current->initializer.resize(0);
					    current->bitfields.resize(0);
					    int i=oldType.length(); 
					    while (i>0 && (oldType[i-1]=='*' || oldType[i-1]=='&' || oldType[i-1]==' ')) i--;
					    current->type = oldType.left(i);
					  }
					  else
					  {
					    if (needNewCurrent)
					    {
					      current = new Entry ;
					    }
					    else if (current->groups)
					    {
					      current->groups->clear();
					    }
					    initEntry();
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 2846 "scanner.l"
{ 
  					  if (!insideCS &&  
					      (current->name.isEmpty() || 
					       current->name=="typedef"
					      )
					     ) // IDL function property
 					  {
          				    squareCount=1;
					    lastSquareContext = YY_START;
					    idlAttr.resize(0);
					    idlProp.resize(0);
					    current->mtype = mtype;
					    BEGIN( IDLAttribute );
					  }
                                          else if (insideCS &&
                                                  current->name.isEmpty())
                                          {
                                            squareCount=1;
                                            lastSquareContext = YY_START;
                                            // Skip the C# attribute
                                            // for this member
                                            current->args.resize(0);
                                            BEGIN( SkipSquare );
                                          }
					  else
					  {
  					    current->args += scanYYtext ;
					    squareCount=1;
					    BEGIN( Array ) ;
					  }
					}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 2877 "scanner.l"
{
  					  // end of IDL function attribute
					  if (--squareCount<=0)
					  {
					    lineCount();
					    if (current->mtype == Property)
					      BEGIN( IDLPropName );
					    else
					      BEGIN( lastSquareContext );
					  }
					}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 2888 "scanner.l"
{
                                          if (Config_getBool("IDL_PROPERTY_SUPPORT"))
					  {
					    current->mtype = Property;
					  }
					  current->spec |= Entry::Settable;
					}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 2895 "scanner.l"
{
                                          if (Config_getBool("IDL_PROPERTY_SUPPORT"))
					  {
					    current->mtype = Property;
					  }
					  current->spec |= Entry::Gettable;
					}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 2902 "scanner.l"
{
					}
	YY_BREAK
case 291:
/* rule 291 can match eol */
YY_RULE_SETUP
#line 2904 "scanner.l"
{
					  // return type (probably HRESULT) - skip it
					}
	YY_BREAK
case 292:
/* rule 292 can match eol */
YY_RULE_SETUP
#line 2907 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
  					  current->startLine = yyLineNr;
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 293:
/* rule 293 can match eol */
YY_RULE_SETUP
#line 2913 "scanner.l"
{  // attribute of a parameter
					   idlAttr = scanYYtext;
					   idlAttr=idlAttr.stripWhiteSpace();
					}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 2917 "scanner.l"
{  // property type
					   idlProp = scanYYtext;
					}
	YY_BREAK
case 295:
/* rule 295 can match eol */
YY_RULE_SETUP
#line 2920 "scanner.l"
{  // Rare: Another parameter ([propput] HRESULT Item(int index, [in] Type theRealProperty);)
					  if (!current->args)
					    current->args = "(";
					  else
					    current->args += ", ";
					  current->args += idlAttr;
					  current->args += " ";
					  current->args += idlProp;	// prop was actually type of extra parameter
					  current->args += " ";
					  current->args += scanYYtext;
					  current->args = current->args.left(current->args.length() - 1);	// strip comma
					  idlProp.resize(0);
					  idlAttr.resize(0);
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 296:
/* rule 296 can match eol */
YY_RULE_SETUP
#line 2935 "scanner.l"
{
					  // the parameter name for the property - just skip.
					}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 2938 "scanner.l"
{
					  current->fileName   = yyFileName;
					  current->type		= idlProp;
  					  current->args       = current->args.simplifyWhiteSpace();
  					  if (current->args)
  					    current->args += ")";
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::VARIABLE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry;
					  initEntry();
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 2951 "scanner.l"
{ // spaces, *, or other stuff
  					  //idlProp+=scanYYtext;
 					}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 2954 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 2958 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( Function ) ;
					}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 2962 "scanner.l"
{ current->args += *scanYYtext ;
					  squareCount++;	
					}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 2965 "scanner.l"
{ current->args += *scanYYtext ; }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 2966 "scanner.l"
{ squareCount++; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 2967 "scanner.l"
{
  					  if (--squareCount<=0)
					    BEGIN( lastSquareContext );
  					}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 2971 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 2975 "scanner.l"

	YY_BREAK
case 307:
YY_RULE_SETUP
#line 2976 "scanner.l"
{ addType( current ) ;
					  current->type += scanYYtext ;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 2980 "scanner.l"
{ current->type += *scanYYtext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 2984 "scanner.l"
{ current->type += *scanYYtext ;
					  sharpCount++;	
					}
	YY_BREAK
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 2987 "scanner.l"
{
  					  lineCount();
					}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 2990 "scanner.l"
{ current->type += *scanYYtext ; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 2991 "scanner.l"
{
  					  current->bodyLine = yyLineNr;
  					  current->name     = scanYYtext;
					}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 2995 "scanner.l"
{
  					  // Java enum initializer
  					  unput('(');
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 3002 "scanner.l"
{
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 3007 "scanner.l"
{
  					  if (insideJava)  // last enum field in Java class
					  {
					    if (!current->name.isEmpty())
					    {
					      current->fileName   = yyFileName;
					      current->startLine  = yyLineNr;
					      current->type       = "@"; // enum marker
					      current->args       = current->args.simplifyWhiteSpace();
					      current->name       = current->name.stripWhiteSpace();
					      current->section    = Entry::VARIABLE_SEC;
					      current_root->addSubEntry(current);
					      current             = new Entry ;
					      initEntry();
					    }

					    // TODO: skip until the end of the scope
					    BEGIN( SkipRemainder );
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 3031 "scanner.l"
{ 
                                          yyLineNr++;
                                        }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 3034 "scanner.l"

	YY_BREAK
case 318:
YY_RULE_SETUP
#line 3035 "scanner.l"
{
					  //printf("adding `%s' `%s' `%s' to enum `%s' (mGrpId=%d)\n",
					  //     current->type.data(), current->name.data(),
					  //     current->args.data(), current_root->name.data(),current->mGrpId);
  					  if (!current->name.isEmpty())
					  {
					    current->fileName   = yyFileName;
					    current->startLine  = yyLineNr;
					    current->type       = "@"; // enum marker
  					    current->args       = current->args.simplifyWhiteSpace();
  					    current->name       = current->name.stripWhiteSpace();
					    current->section    = Entry::VARIABLE_SEC;
					    // add to the scope of the enum
					    current_root->addSubEntry(current);
					    if (!insideCS && !insideJava) // for C# and Java 1.5+ enum values always have to be explicitly qualified
					    {
					      current             = new Entry(*current);
					      // add to the scope surrounding the enum (copy!)
					      current_root->parent()->addSubEntry(current);
					    }
					    current             = new Entry ;
					    initEntry();
					  }
					  else // probably a redundant , 
					  {
				     	    current->reset();
					  }
  					}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 3063 "scanner.l"
{ // attribute list in IDL
					  squareCount=1;
					  lastSquareContext = YY_START;
					  BEGIN(SkipSquare);
  					}
	YY_BREAK
/*
<FindFieldArg>","			{ unput(*scanYYtext); BEGIN(FindFields); }
  */
case 320:
YY_RULE_SETUP
#line 3071 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 3072 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 3073 "scanner.l"
{ if (!insidePHP) 
					    REJECT;
					  // append PHP comment.
					  current->program += scanYYtext ;
					}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 3078 "scanner.l"
{ current->program += scanYYtext ; 
                                          pSkipVerbString = &current->program;
                                          lastSkipVerbStringContext=YY_START;
                                          BEGIN( SkipVerbString );
					}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 3083 "scanner.l"
{ current->program += scanYYtext ; 
                                          pCopyQuotedGString = &current->program;
                                          lastStringContext=YY_START;
                                          BEGIN( CopyGString );
					}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 3088 "scanner.l"
{ current->program += scanYYtext ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 3092 "scanner.l"
{ current->program += scanYYtext ;
					  ++yyLineNr ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 3097 "scanner.l"
{
  					  if (!insidePHP)
					  {
					    current->program += scanYYtext;
					  }
					  else
					  { // begin of single quoted string
					    current->program += scanYYtext;
                                            pCopyQuotedGString = &current->program;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
  					}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 3110 "scanner.l"
{ 
                                              if (insidePHP) 
					      {
						REJECT; // for PHP code single quotes 
					                // are used for strings of arbitrary length
					      }
					      else
					      {
                                                current->program += scanYYtext; 
					      }
                                            }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 3121 "scanner.l"
{ current->program += scanYYtext ;
					  ++curlyCount ;
					}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 3124 "scanner.l"
{
					  current->program += scanYYtext ;
					  --curlyCount ;
  					}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 3128 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    //printf("cn=`%s' rn=`%s' isTypedef=%d\n",cn.data(),rn.data(),isTypedef);
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    if (isTypedef && cn.isEmpty())
					    {
					      //printf("Typedef Name\n");
					      BEGIN( TypedefName );
					    }
					    else
					    {
					      if (current->section == Entry::ENUM_SEC)
					      {
					        current->program+=','; // add field terminator
					      }
					      // add compound definition to the tree
					      current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
  					      current->type = current->type.simplifyWhiteSpace();
  					      current->name = current->name.stripWhiteSpace();
					      //printf("adding `%s' `%s' `%s' brief=%s insideObjC=%d %x\n",current->type.data(),current->name.data(),current->args.data(),current->brief.data(),insideObjC,current->section);
					      if (insideObjC && 
						  ((current->spec&Entry::Interface) || (current->spec==Entry::Category))
						 ) // method definition follows
					      {
				                BEGIN( ReadBodyIntf ) ;
					      }
					      else
					      {
					        current_root->addSubEntry( current ) ;
					        memspecEntry = current;
						current = new Entry(*current);
						if (current->section==Entry::NAMESPACE_SEC || 
						    (current->spec==Entry::Interface) ||
						    insideJava || insidePHP || insideCS || insideD || insideJS
						   )
						{ // namespaces and interfaces and java classes ends with a closing bracket without semicolon
						  current->reset();
						  initEntry();
						  memspecEntry = 0;
						  BEGIN( FindMembers ) ;
						}
						else
						{
						  if (!isTypedef && cn.find('@')==-1) // not typedef or unnamed struct
						  {
						    // enabled the next two lines for bug 623424
						    current->doc.resize(0);
						    current->brief.resize(0);
						  }
						  BEGIN( MemberSpec ) ;
						}
					      }
					    }
					  }
					}
	YY_BREAK
case 332:
/* rule 332 can match eol */
YY_RULE_SETUP
#line 3196 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
					  lineCount();
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    isTypedef = TRUE;
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    BEGIN( TypedefName );
					  }
					}
	YY_BREAK
case 333:
/* rule 333 can match eol */
YY_RULE_SETUP
#line 3216 "scanner.l"
{ // late "const" or "volatile" keyword
					  lineCount();
  					  current->type.prepend(scanYYtext);
  					}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 3220 "scanner.l"
{
  					  if (current->section == Entry::ENUM_SEC)
					  {
					    current->program+=","; // add field terminator
					  }
  				          current->name=scanYYtext;
					  prependScope();
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  //printf("Adding compound %s %s %s\n",current->type.data(),current->name.data(),current->args.data());
					  current_root->addSubEntry( current ) ;
					  if (!firstTypedefEntry)
					  {
					    firstTypedefEntry = current;
					  }
					  current = new Entry;
					  initEntry();
					  isTypedef=TRUE; // to undo reset by initEntry()
  					  BEGIN(MemberSpecSkip); 
  					}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 3240 "scanner.l"
{ /* typedef of anonymous type */
					  current->name.sprintf("@%d",anonCount++);
					  if (current->section == Entry::ENUM_SEC)
					  {
					    current->program+=','; // add field terminator
					  }
					  // add compound definition to the tree
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  current_root->addSubEntry( current ) ;
					  memspecEntry = current;
					  current = new Entry(*current);
					  initEntry();
					  unput(';');
					  BEGIN( MemberSpec ) ;
  					}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 3256 "scanner.l"
{ // the [] part could be improved.
  					  lineCount();
  					  int i=0,l=scanYYleng,j;
					  while (i<l && (!isId(scanYYtext[i]))) i++;
					  msName = QCString(scanYYtext).right(l-i).stripWhiteSpace();
					  j=msName.find("[");
					  if (j!=-1) 
					  {
					    msArgs=msName.right(msName.length()-j);
					    msName=msName.left(j);
					  }
					  msType=QCString(scanYYtext).left(i);

					  // handle *pName in: typedef { ... } name, *pName;
					  if (firstTypedefEntry) 
					  {
					    if (firstTypedefEntry->spec&Entry::Struct)
					    {
					      msType.prepend("struct "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->spec&Entry::Union)
					    {
					      msType.prepend("union "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->section==Entry::ENUM_SEC)
					    {
					      msType.prepend("enum "+firstTypedefEntry->name);
					    }
					    else
					    {
					      msType.prepend(firstTypedefEntry->name);
					    }
					  }
					}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 3290 "scanner.l"
{ // function with struct return type
  					  addType(current);
  					  current->name = msName;
					  current->spec = 0;
  					  unput('(');
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 3297 "scanner.l"
{
                                          //printf("current->name=`%s' msName=`%s'\n",current->name.data(),msName.data());
  					  if (msName.isEmpty() && !current->name.isEmpty())
					  { 
					    // see if the compound does not have a name or is inside another
					    // anonymous compound. If so we insert a 
					    // special `anonymous' variable.
					    //Entry *p=current_root;
					    Entry *p=current;
					    while (p)
					    {
					      // only look for class scopes, not namespace scopes
					      if ((p->section & Entry::COMPOUND_MASK) && !p->name.isEmpty())
					      {
						//printf("Trying scope `%s'\n",p->name.data());
						int i=p->name.findRev("::");
						int pi = (i==-1) ? 0 : i+2;
						if (p->name.at(pi)=='@')
						{
						  // anonymous compound inside -> insert dummy variable name
						  //printf("Adding anonymous variable for scope %s\n",p->name.data());
						  msName.sprintf("@%d",anonCount++); 
						  break;
						}
					      }
					      //p=p->parent;
					      if (p==current) p=current_root; else p=p->parent();
					    }
					  }
					  //printf("msName=%s current->name=%s\n",msName.data(),current->name.data());
					  if (!msName.isEmpty() 
					      /*&& msName!=current->name*/) // skip typedef T {} T;, removed due to bug608493
					  {
					    static bool typedefHidesStruct = Config_getBool("TYPEDEF_HIDES_STRUCT");
					    // case 1: typedef struct _S { ... } S_t; 
					    // -> omit typedef and use S_t as the struct name
					    if (typedefHidesStruct && 
						isTypedef && 
						((current->spec&(Entry::Struct|Entry::Union)) ||
						 current->section==Entry::ENUM_SEC )&&
						msType.stripWhiteSpace().isEmpty() && 
						memspecEntry)
					    {
					      memspecEntry->name=msName;
					    }
					    else // case 2: create a typedef field
					    {
					      Entry *varEntry=new Entry;
					      varEntry->lang = language;
					      varEntry->protection = current->protection ;
					      varEntry->mtype = current->mtype;
					      varEntry->virt = current->virt;
					      varEntry->stat = current->stat;
					      varEntry->section = Entry::VARIABLE_SEC;
					      varEntry->name = msName.stripWhiteSpace();
					      varEntry->type = current->type.simplifyWhiteSpace()+" ";
					      varEntry->args = msArgs; 
					      if (isTypedef)
					      {
						varEntry->type.prepend("typedef ");
						//  //printf("current->name = %s %s\n",current->name.data(),msName.data());
					      }
					      if (typedefHidesStruct &&
						  isTypedef &&
						  (current->spec&(Entry::Struct|Entry::Union)) &&
						  memspecEntry
						 ) // case 1: use S_t as type for pS_t in "typedef struct _S {} S_t, *pS_t;"
					      {
						varEntry->type+=memspecEntry->name+msType;
					      }
					      else // case 2: use _S as type for for pS_t
					      {
						varEntry->type+=current->name+msType;
					      }
					      varEntry->fileName = yyFileName;
					      varEntry->startLine = yyLineNr;
					      varEntry->doc = current->doc.copy();
					      varEntry->brief = current->brief.copy();
					      varEntry->mGrpId = current->mGrpId;

					      // deep copy group list
					      QListIterator<Grouping> gli(*current->groups);
					      Grouping *g;
					      for (;(g=gli.current());++gli)
					      {
						varEntry->groups->append(new Grouping(*g));
					      }
					      if (current->sli) // copy special list items
					      {
						QListIterator<ListItemInfo> li(*current->sli);
						ListItemInfo *lii;
						for (li.toFirst();(lii=li.current());++li)
						{
						  varEntry->addSpecialListItem(lii->type,lii->itemId);
						}
					      }

					      //printf("Add: type=`%s',name=`%s',args=`%s' brief=%s doc=%s\n",
					      //      varEntry->type.data(),varEntry->name.data(),
					      //      varEntry->args.data(),varEntry->brief.data(),varEntry->doc.data());
					      current_root->addSubEntry(varEntry);
					    }
					  }
					  if (*scanYYtext==';') // end of a struct/class ...
					  {
					    if (!isTypedef && msName.isEmpty() && memspecEntry && (current->section&Entry::COMPOUND_MASK))
					    { // case where a class/struct has a doc block after it
					      if (!current->doc.isEmpty())
					      {
					        memspecEntry->doc += current->doc;
					      }
					      if (!current->brief.isEmpty())
					      {
					        memspecEntry->brief += current->brief;
					      }
				  	    }
					    msType.resize(0);
					    msName.resize(0);
					    msArgs.resize(0);
					    isTypedef=FALSE;
					    firstTypedefEntry=0;
					    memspecEntry=0;
					    current->reset();
					    initEntry();
					    BEGIN( FindMembers );
					  }
					  else
					  {
					    current->doc.resize(0);
					    current->brief.resize(0);
					  }
  					}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 3429 "scanner.l"
{ 
  					  lastInitializerContext=YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					  /* BEGIN(MemberSpecSkip); */
					}
	YY_BREAK
/*
<MemberSpecSkip>"{"			{
  					  curlyCount=0;
					  lastCurlyContext = MemberSpecSkip;
					  previous = current;
  					  BEGIN(SkipCurly);
  					}
  */
case 340:
YY_RULE_SETUP
#line 3443 "scanner.l"
{ BEGIN(MemberSpec); }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 3444 "scanner.l"
{ unput(';'); BEGIN(MemberSpec); }
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 3445 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 343:
/* rule 343 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3448 "scanner.l"
{ // end of Objective C block
					  current_root->addSubEntry( current ) ;
  					  current=new Entry;
					  initEntry();
					  insideObjC=FALSE;
					  BEGIN( FindMembers ); 
  					}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 3455 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 345:
/* rule 345 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 3458 "scanner.l"
case 346:
/* rule 346 can match eol */
YY_RULE_SETUP
#line 3458 "scanner.l"
{   /* typedef void (A::*ptr_t)(args...) or int (*func(int))[], the ^ is for Obj-C blocks */
  					  if (insidePHP) // reference parameter
					  {
					    REJECT
					  }
					  else
					  {
					    current->bodyLine = yyLineNr;
					    lineCount();
					    addType(current);
					    funcPtrType=scanYYtext;
					    roundCount=0;
					    //current->type += scanYYtext;
					    BEGIN( FuncPtr );
					  }
  					}
	YY_BREAK
case 347:
/* rule 347 can match eol */
YY_RULE_SETUP
#line 3474 "scanner.l"
{
  					  current->name = scanYYtext;
					  if (nameIsOperator(current->name))
					  {
					    BEGIN( FuncPtrOperator );
					  }
					  else
					  {
					    if (current->name=="const" || current->name=="volatile")
					    {
					      funcPtrType += current->name;
					    }
					    else
					    {
					      BEGIN( EndFuncPtr );
					    }
					  }
  					}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 3492 "scanner.l"
{
  					  //printf("error: FuncPtr `%c' unexpected at line %d of %s\n",*scanYYtext,yyLineNr,yyFileName);
  					}
	YY_BREAK
case 349:
/* rule 349 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3495 "scanner.l"
{
  					  current->name += scanYYtext;
					  current->name = current->name.simplifyWhiteSpace();
					  lineCount();
  					}
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 3500 "scanner.l"
{
                                          yyLineNr++;
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 3504 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( EndFuncPtr );
                                        }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 3508 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 353:
/* rule 353 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3511 "scanner.l"
{ // a variable with extra braces
 					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 354:
/* rule 354 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3516 "scanner.l"
{ // a function pointer
  					  lineCount();
					  current->type+=funcPtrType+")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 355:
/* rule 355 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3521 "scanner.l"
{ // an array of variables
  					  lineCount();
					  current->type+=funcPtrType.data();
					  current->args += ")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 3527 "scanner.l"
{ // a function returning a function or 
                                          // a function returning a pointer to an array
  					  current->args += *scanYYtext ;
					  //roundCount=0;
					  //BEGIN( FuncFunc );
					  current->bodyLine = yyLineNr;
					  currentArgumentContext = FuncFuncEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 3538 "scanner.l"
{
  					  funcPtrType+=scanYYtext;
  					}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 3541 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 3544 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  ++roundCount;
					}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 3548 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  if ( roundCount )
					    --roundCount;
					  else
					  {
					    BEGIN(FuncFuncEnd);
					  }
  					}
	YY_BREAK
case 361:
/* rule 361 can match eol */
YY_RULE_SETUP
#line 3557 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType+")(";
					  BEGIN(FuncFuncType);
  					}
	YY_BREAK
case 362:
/* rule 362 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3562 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(Function);
  					}
	YY_BREAK
case 363:
/* rule 363 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3567 "scanner.l"
{ // function returning a pointer to an array
                                          lineCount();
					  current->type+=funcPtrType;
					  current->args+=")";
					  BEGIN(FuncFuncArray);
  					}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 3573 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 3576 "scanner.l"
{
  					  current->type += *scanYYtext;
					  roundCount++;
  					}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 3580 "scanner.l"
{
  					  current->type += *scanYYtext;
  					  if (roundCount)
					    --roundCount;
					  else
					    BEGIN(Function);
					}
	YY_BREAK
case 367:
/* rule 367 can match eol */
YY_RULE_SETUP
#line 3587 "scanner.l"
{ lineCount() ; current->type += ", " ; }
	YY_BREAK
case 368:
/* rule 368 can match eol */
YY_RULE_SETUP
#line 3588 "scanner.l"
{ lineCount() ; current->type += ' ' ; }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 3589 "scanner.l"
{
  					  current->type += *scanYYtext;
  					}
	YY_BREAK
case 370:
/* rule 370 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3592 "scanner.l"
{ // for catching typedef void (__stdcall *f)() like definitions
                                          if (current->type.left(7)=="typedef" && current->bodyLine==-1) 
					    // the bodyLine check is to prevent this guard to be true more than once
					  {
  					    current->bodyLine = yyLineNr;
					    BEGIN( GetCallType );
					  }
					  else if (!current->name.isEmpty()) // normal function
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments!\n");
					  }
					}
	YY_BREAK
case 371:
/* rule 371 can match eol */
YY_RULE_SETUP
#line 3610 "scanner.l"
{
  					  lineCount();
  					  addType(current);
					  funcPtrType="(";
					  funcPtrType+=scanYYtext;
					  roundCount=0;
					  BEGIN( FuncPtr );
  					}
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 3618 "scanner.l"
{ 
                                          if (!current->name.isEmpty())
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments current->argList->count()=%d\n",current->argList->count());
					  }
					}
	YY_BREAK
/*
<FindMembers>"("{BN}*("void"{BN}*)?")"	{
  					  lineCount();
  					  current->args = "()"; 
  					  BEGIN( FuncQual );
  					}
  */
/*- Function argument reading rules ---------------------------------------*/
case 373:
YY_RULE_SETUP
#line 3640 "scanner.l"
{ *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 3643 "scanner.l"
{ *copyArgString+=scanYYtext; 
					  fullArgString+=scanYYtext;
					}
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 3646 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 3650 "scanner.l"
{
  					  *copyArgString+=" ";
  					  fullArgString+=" ";
  					  lineCount();
  					}
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 3655 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  lastCopyArgStringContext = YY_START;
  					  BEGIN( CopyArgString );
  					}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 3661 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
  					  argRoundCount=0; 
					  lastCopyArgContext = YY_START;
					  BEGIN( CopyArgRound ); 
  					}
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 3668 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  stringToArgumentList(fullArgString,current->argList);
					  if (insideJS)
					  {
					    fixArgumentListForJavaScript(current->argList);
					  }
                                          handleParametersCommentBlocks(current->argList);

					  /* remember the current documentation block, since
					     we could overwrite it with the documentation of
					     a function argument, which we then have to correct later
					     on
					   */
					  docBackup = current->doc;
					  briefBackup = current->brief;

					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
/* a special comment */
case 380:
YY_RULE_SETUP
#line 3689 "scanner.l"
{ 
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>=0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks(current->argList);
					    BEGIN( currentArgumentContext );
					  }
					  else // not a define
					  {
					    // for functions we interpret a comment
					    // as documentation for the argument
					    fullArgString+=scanYYtext;
					    lastCopyArgChar=0;
					    lastCommentInArgContext=YY_START;
					    if (scanYYtext[1]=='/')
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
/* a non-special comment */
case 381:
YY_RULE_SETUP
#line 3716 "scanner.l"
{ /* empty comment */ }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 3717 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipComment );
  					}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 3721 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
	YY_BREAK
/*
<ReadFuncArgType,ReadTempArgs>"'#"	{ if (insidePHP)
                                            REJECT;
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					}
<ReadFuncArgType,ReadTempArgs>"#"	{
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
  */
/* `)' followed by a special comment */
case 384:
/* rule 384 can match eol */
YY_RULE_SETUP
#line 3739 "scanner.l"
{
  					  lineCount();
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    *copyArgString+=*scanYYtext;
					    fullArgString+=*scanYYtext;
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks(current->argList);
					    BEGIN( currentArgumentContext );
					  }
					  else
					  {
					    // for functions we interpret a comment
					    // as documentation for the last argument
					    lastCopyArgChar=*scanYYtext;
					    QCString text=&scanYYtext[1];
					    text=text.stripWhiteSpace();
					    lastCommentInArgContext=YY_START;
					    fullArgString+=text;
					    if (text.find("//")!=-1)
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 3770 "scanner.l"

	YY_BREAK
case 386:
YY_RULE_SETUP
#line 3771 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 3772 "scanner.l"
{ fullArgString+=scanYYtext; 
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar); 
                                          BEGIN( lastCommentInArgContext ); 
					}
	YY_BREAK
case 388:
/* rule 388 can match eol */
YY_RULE_SETUP
#line 3777 "scanner.l"
{ fullArgString+=scanYYtext;
  					  yyLineNr++;
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar);
					  BEGIN( lastCommentInArgContext );
  					}
	YY_BREAK
case 389:
/* rule 389 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3783 "scanner.l"
{ // verbatim command (which could contain nested comments!)
				          docBlockName=&scanYYtext[1];
  					  fullArgString+=scanYYtext;
					  BEGIN(CopyArgVerbatim);
  					}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 3788 "scanner.l"
{
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='[')
					  {
				            docBlockName.at(1)='}';
					  }
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  fullArgString+=scanYYtext;
  					  BEGIN(CopyArgVerbatim);
                                        }
	YY_BREAK
case 391:
/* rule 391 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3801 "scanner.l"
{ // end of verbatim block
  					  fullArgString+=scanYYtext;
				          if (scanYYtext[1]=='f') // end of formula
				          {
				            BEGIN(CopyArgCommentLine);
				          }
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(CopyArgCommentLine);
					  }
  					}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 3812 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 3813 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 394:
/* rule 394 can match eol */
YY_RULE_SETUP
#line 3814 "scanner.l"
{ fullArgString+=*scanYYtext; yyLineNr++; }
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 3815 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 3816 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: Ignoring %cbrief command inside argument documentation",*scanYYtext
					     );
                                          fullArgString+=' ';
                                        }
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 3822 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  argSharpCount=1;
					  BEGIN( CopyArgSharp );
					}
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 3828 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  //printf("end template list %s\n",copyArgString->data());
					  stringToArgumentList(fullArgString,currentArgumentList);
					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 3835 "scanner.l"
{
  					  argRoundCount++;
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 3840 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  if (argRoundCount>0) 
					    argRoundCount--;
					  else 
					    BEGIN( lastCopyArgContext );
  					}
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 3848 "scanner.l"
{
  					  argSharpCount++;
					  //printf("argSharpCount++=%d  copy\n",argSharpCount);
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 3854 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  argSharpCount--;
					  if (argSharpCount>0)
					  {
					    //printf("argSharpCount--=%d copy\n",argSharpCount);
					  }
					  else
					  {
					    BEGIN( ReadTempArgs );
					    //printf("end of argSharpCount\n");
					  }
  					}
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 3868 "scanner.l"
{
  					  *copyArgString+=scanYYtext;
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 3872 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 3877 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 3882 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
  					    *copyArgString+=scanYYtext; 
  					    fullArgString+=scanYYtext; 
					  }
					}
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 3893 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					  if (insidePHP)
					  {
					    lastCopyArgStringContext=YY_START;
					    BEGIN(CopyArgPHPString);
					  }
  					}
	YY_BREAK
case 408:
/* rule 408 can match eol */
YY_RULE_SETUP
#line 3902 "scanner.l"
{ 
  					  yyLineNr++; 
					  *copyArgString+=*scanYYtext; 
					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 3907 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext; 
  					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
/*------------------------------------------------------------------------*/
case 410:
YY_RULE_SETUP
#line 3917 "scanner.l"
{ current->args += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 3920 "scanner.l"
{ current->args += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
/*
<FuncQual>"#"				{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}
  */
case 412:
YY_RULE_SETUP
#line 3933 "scanner.l"
{
                                          if ( strcmp(scanYYtext,";")==0 && 
					       insidePHP && 
					       !containsWord(current->type,"function") )
                                          {
                                            current->reset();
                                            initEntry();
                                            BEGIN( FindMembers );
                                          }
                                          else
                                          {
                                            unput(*scanYYtext); BEGIN( Function );
                                          }
                                        }
	YY_BREAK
case 413:
/* rule 413 can match eol */
YY_RULE_SETUP
#line 3947 "scanner.l"
{ // pure virtual member function
                                          lineCount() ; 
                                          current->virt = Pure;
                                          current->args += " override "; 
                                        }
	YY_BREAK
case 414:
/* rule 414 can match eol */
YY_RULE_SETUP
#line 3952 "scanner.l"
{ // overridden virtual member function
                                          lineCount() ; 
                                          current->spec |= Entry::Override;
                                          current->args += " override "; 
                                        }
	YY_BREAK
case 415:
/* rule 415 can match eol */
YY_RULE_SETUP
#line 3957 "scanner.l"
{ // sealed member function
                                          lineCount() ; 
                                          current->spec |= Entry::Sealed;
                                          current->args += " sealed "; 
                                        }
	YY_BREAK
case 416:
/* rule 416 can match eol */
YY_RULE_SETUP
#line 3962 "scanner.l"
{ // new member function
                                          lineCount() ; 
                                          current->spec |= Entry::New;
                                          current->args += " new "; 
                                        }
	YY_BREAK
case 417:
/* rule 417 can match eol */
YY_RULE_SETUP
#line 3967 "scanner.l"
{ // const member function
  					  lineCount() ; 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 418:
/* rule 418 can match eol */
YY_RULE_SETUP
#line 3972 "scanner.l"
{ // volatile member function
  					  lineCount() ; 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 419:
/* rule 419 can match eol */
YY_RULE_SETUP
#line 3977 "scanner.l"
{ // pure virtual member function
  					  lineCount() ; 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 420:
/* rule 420 can match eol */
YY_RULE_SETUP
#line 3983 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ", " ; 
					}
	YY_BREAK
case 421:
/* rule 421 can match eol */
YY_RULE_SETUP
#line 3987 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ' ' ; 
					}
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 3991 "scanner.l"
{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}	
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 3996 "scanner.l"
{ 
                                          if (insideCli && 
					      (current_root->section&Entry::COMPOUND_MASK) 
					     )
					  {
					    BEGIN(CliOverride);
					  }
					  else
					  {
                                            // typically an initialized function pointer
  					    lastInitializerContext=YY_START;
					    initBracketCount=0;
  					    BEGIN(ReadInitializer);
					  }
  					}
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 4011 "scanner.l"
{
  					}
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 4013 "scanner.l"
{ 
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 426:
/* rule 426 can match eol */
YY_RULE_SETUP
#line 4017 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 4020 "scanner.l"
{
  					}
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 4022 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 4026 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					  pCopyQuotedString=&current->args;
					  lastStringContext=FuncPtrInit;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 4032 "scanner.l"
{
                                          current->args += *scanYYtext; 
					  if (insidePHP)
					  {
					    pCopyQuotedString=&current->args;
					    lastStringContext=FuncPtrInit;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 4041 "scanner.l"
{
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 4051 "scanner.l"
{
                                          current->args += scanYYtext; 
					}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 4054 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					}
	YY_BREAK
case 434:
/* rule 434 can match eol */
YY_RULE_SETUP
#line 4057 "scanner.l"
{
                                          current->args += *scanYYtext; 
					  yyLineNr++;
  					}
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 4061 "scanner.l"
{ // typically a K&R style C function
                                          if (insideCS && strcmp(scanYYtext,"where")==0)
					  { 
					    // type contraint for a method
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else if (checkForKnRstyleC())
					  {
					    //fprintf(stderr,"===> got a K&R style function\n");
                                            current->args = scanYYtext; 
					    oldStyleArgType.resize(0);
					    BEGIN(OldStyleArgs);
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 4083 "scanner.l"
{
  					  QCString oldStyleArgPtr;
  					  QCString oldStyleArgName;
					  splitKnRArg(oldStyleArgPtr,oldStyleArgName);
					  QCString doc,brief;
					  if (current->doc!=docBackup)
					  {
                                            doc=current->doc.copy();
					    current->doc=docBackup;
					  }
					  if (current->brief!=briefBackup)
					  {
                                            brief=current->brief.copy();
					    current->brief=briefBackup;
					  }
					  addKnRArgInfo(oldStyleArgType+oldStyleArgPtr,
					                oldStyleArgName,brief,doc);
					  current->args.resize(0);
					  if (*scanYYtext==';') oldStyleArgType.resize(0);
  					}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 4103 "scanner.l"
{ current->args += scanYYtext; }
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 4104 "scanner.l"
{
  					  current->args = argListToString(current->argList);
  					  unput('{');
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 4109 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 4110 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 441:
/* rule 441 can match eol */
#line 4112 "scanner.l"
case 442:
/* rule 442 can match eol */
YY_RULE_SETUP
#line 4112 "scanner.l"
{ /* try-function-block */ 
					  insideTryBlock=TRUE;
					  lineCount();
  					  if (scanYYtext[scanYYleng-1]==':')
					  {
					    unput(':');
					    BEGIN( Function );
					  }
					}
	YY_BREAK
case 443:
/* rule 443 can match eol */
YY_RULE_SETUP
#line 4121 "scanner.l"
{ // C++ style throw clause
  					  current->exception = " throw (" ;
					  roundCount=0;
					  lineCount() ;
					  BEGIN( ExcpRound ) ;
					}
	YY_BREAK
case 444:
/* rule 444 can match eol */
YY_RULE_SETUP
#line 4127 "scanner.l"
{
  					  current->exception = " raises (" ;
					  lineCount() ;
					  roundCount=0;
					  BEGIN( ExcpRound ) ;
  					}
	YY_BREAK
case 445:
/* rule 445 can match eol */
YY_RULE_SETUP
#line 4133 "scanner.l"
{ // Java style throw clause
  					  current->exception = " throws " ;
					  lineCount() ;
					  BEGIN( ExcpList );
  					}
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 4138 "scanner.l"
{ current->exception += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 4141 "scanner.l"
{ current->exception += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 4147 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 4150 "scanner.l"
{
  					  unput('{'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 4153 "scanner.l"
{
  					  unput(';'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 451:
/* rule 451 can match eol */
YY_RULE_SETUP
#line 4156 "scanner.l"
{
  					  current->exception += ' ';
					  yyLineNr++;
  					}
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 4160 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 4163 "scanner.l"
{ current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = scanYYtext ;
					  roundCount=0;
					  BEGIN( FuncRound ) ;
					}
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 4169 "scanner.l"
{
  					  if (!insidePHP) BEGIN(SkipInits);
  					}
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 4172 "scanner.l"
{ 
					  current->name=current->name.simplifyWhiteSpace();
  					  current->type=current->type.simplifyWhiteSpace();
					  current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
					  current->fileName = yyFileName;
					  current->startLine = yyLineNr;
					  static QRegExp re("([^)]*[*&][^)]*)"); // (...*...)
					  if (*scanYYtext!=';' || (current_root->section&Entry::COMPOUND_MASK) )
					  {
					    int tempArg=current->name.find('<');
					    QCString tempName;
					    if (tempArg==-1) tempName=current->name; else tempName=current->name.left(tempArg);
					    if (!current->type.isEmpty() &&
						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
					    {
					      //printf("Scanner.l: found in class variable: `%s' `%s' `%s'\n", current->type.data(),current->name.data(),current->args.data());
					      if (isTypedef && current->type.left(8)!="typedef ")
					      {
						current->type.prepend("typedef ");
					      }
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    else	      
					    {
					      //printf("Scanner.l: found in class function: `%s' `%s' `%s'\n", current->type.data(),current->name.data(),current->args.data());
					      current->section = Entry::FUNCTION_SEC ;
			                      current->proto = *scanYYtext==';';
					    }
					  }
					  else // a global function prototype or function variable
					  {
					    //printf("Scanner.l: prototype? type=`%s' name=`%s' args=`%s'\n",current->type.data(),current->name.data(),current->args.data());
					    if (!current->type.isEmpty() && 
						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
					    {
					      if (isTypedef && current->type.left(8)!="typedef ")
					      {
						current->type.prepend("typedef ");
					      }
					      //printf("Scanner.l: found function variable!\n");
					      current->section = Entry::VARIABLE_SEC;
					    }
					    else
					    {
					      //printf("Scanner.l: found prototype\n");
					      current->section = Entry::FUNCTION_SEC;
					      current->proto = TRUE;
					    }
					  }
					  //printf("Adding entry `%s'\n",current->name.data());
					  if ( insidePHP)
					  {
					    if (findAndRemoveWord(current->type,"final"))
					    {
					      current->spec |= Entry::Final;
					    }
					    if (findAndRemoveWord(current->type,"abstract"))
					    {
					      current->spec |= Entry::Abstract;
					    }
					  }
					  if ( insidePHP && !containsWord(current->type,"function"))
					  {
					    initEntry();
					    if ( *scanYYtext == '{' )
					    {
					      lastCurlyContext = FindMembers;
					      curlyCount=0;
					      BEGIN( SkipCurly );
					    }
					    else
					    {
					      BEGIN( FindMembers );
					    }
					  }
					  else
					  {
					    if ( insidePHP)
					    {
					      findAndRemoveWord(current->type,"function");
					    }
					    previous = current;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    initEntry();
					    // Objective C 2.0: Required/Optional section
					    if (previous->spec & (Entry::Optional | Entry::Required))
					    {
					      current->spec |= previous->spec & (Entry::Optional|Entry::Required);
					    }
					    lastCurlyContext = FindMembers;
					    if ( *scanYYtext == ',' )
					    {
					      current->type = previous->type;
					      // we need to strip any trailing * and & (see bugs 623023 and 649103 for test cases)
					      int i=current->type.length(); 
					      while (i>0 && (current->type[i-1]=='*' || current->type[i-1]=='&' || current->type[i-1]==' ')) i--;
					      current->type = current->type.left(i);
					    }
					    if ( *scanYYtext == '{' )
					    {
					      if ( !insidePHP && (current_root->section & Entry::COMPOUND_MASK) )
					      {
						previous->spec |= Entry::Inline;
					      }
					      //addToBody(scanYYtext);
					      curlyCount=0;
					      BEGIN( SkipCurly ) ;
					    }
					    else
					    {
					      if (previous->section!=Entry::VARIABLE_SEC)
						previous->bodyLine=-1; // a function/member declaration
					      BEGIN( FindMembers ) ;
					    }
					  }
                                        }
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 4290 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  				          //lastCurlyContext = FindMembers;
					  //curlyCount=0;
  					  //BEGIN( SkipCurly ) ; 
  					  unput('{');
					  BEGIN( Function );
					}
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 4298 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  ++curlyCount ; 
					}
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 4302 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else
					  {
#if 0
					    if (!Config_getBool("HIDE_IN_BODY_DOCS") && 
						!current->doc.isEmpty())
					    {
					      // copy documentation found inside the body
					      // to the previous item
					      if (previous->inbodyLine==-1)
					      {
					        previous->inbodyLine = current->docLine;
					        previous->inbodyFile = current->docFile;
					      }
					      //printf("*** inbodyDocs+=%s\n",current->doc.data());
					      previous->inbodyDocs += current->doc;
					      current->doc.resize(0);
					    }
#endif
					    if (current->sli && previous) // copy special list items
					    {
					      QListIterator<ListItemInfo> li(*current->sli);
					      ListItemInfo *lii;
					      for (li.toFirst();(lii=li.current());++li)
					      {
						previous->addSpecialListItem(lii->type,lii->itemId);
					      }
					      delete current->sli;
					      current->sli = 0;
					    }
					    if (previous) previous->endBodyLine=yyLineNr;
					    BEGIN( lastCurlyContext ) ;
					  }
					}
	YY_BREAK
case 459:
/* rule 459 can match eol */
YY_RULE_SETUP
#line 4341 "scanner.l"
{ 
					  lineCount();
  					  if ( curlyCount )
					  {
					    //addToBody(scanYYtext);
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine=yyLineNr;

					    tempEntry = current; // temporarily switch to the previous entry
					    current = previous;

					    docBlockContext   = SkipCurlyEndDoc;
					    docBlockInBody    = FALSE;
					    docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                        ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					    docBlock.resize(0);
					    docBlockTerm = '}';
					    if (scanYYtext[scanYYleng-3]=='/')
					    {
					      startCommentBlock(TRUE);
					      BEGIN( DocLine );
					    }
					    else
					    {
					      startCommentBlock(FALSE);
					      BEGIN( DocBlock );
					    }
					  }
					}
	YY_BREAK
case 460:
/* rule 460 can match eol */
YY_RULE_SETUP
#line 4373 "scanner.l"
{ // desc is followed by another one
					  docBlockContext   = SkipCurlyEndDoc;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = '}';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 4391 "scanner.l"
{
  				          //addToBody("}");
					  current = tempEntry;
  					  BEGIN( lastCurlyContext );
  					}
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 4396 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  lastStringContext=SkipCurly;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 4401 "scanner.l"
{ 
  				          if (insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  BEGIN( SkipCurlyCpp );
					}
	YY_BREAK
case 464:
/* rule 464 can match eol */
YY_RULE_SETUP
#line 4407 "scanner.l"
{
  					  yyLineNr++;
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 4411 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 466:
/* rule 466 can match eol */
YY_RULE_SETUP
#line 4414 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  yyLineNr++; 
  					  lastCurlyContext = FindMembers;
  					  BEGIN( SkipCurly ); 
					}
	YY_BREAK
case 467:
/* rule 467 can match eol */
YY_RULE_SETUP
#line 4420 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  yyLineNr++; 
					}
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 4424 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipComment);
  					}
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 4429 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 4434 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 4438 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: Found ';' while parsing initializer list! "
					      "(doxygen could be confused by a macro call without semicolon)"
					     );
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 4445 "scanner.l"
{
  				          if (!insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 4452 "scanner.l"
{
  				          if (!insideCS) REJECT;
					  // C# verbatim string
					  lastSkipVerbStringContext=YY_START;
					  pSkipVerbString=&current->initializer;
					  BEGIN(SkipVerbString);
  					}
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 4459 "scanner.l"
{
                                          if (insidePHP) REJECT;
                                        }
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 4462 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
					}
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 4469 "scanner.l"
{ }
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 4470 "scanner.l"
{ }
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 4471 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 4474 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 4477 "scanner.l"
{ }
	YY_BREAK
case 481:
/* rule 481 can match eol */
YY_RULE_SETUP
#line 4478 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 4481 "scanner.l"
{ }
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 4482 "scanner.l"
{ // for "class : public base {} var;" construct, see bug 608359
  					  unput(':');
					  BEGIN(ClassVar);
  					}
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 4486 "scanner.l"
{ 
					  current->section = Entry::EMPTY_SEC ;
					  current->type.resize(0) ;
					  current->name.resize(0) ;
					  current->args.resize(0) ;
					  current->argList->clear();
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 485:
/* rule 485 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4494 "scanner.l"
{
  					  sharpCount = 0;
  					  current->name = scanYYtext ;
					  if (current->spec & Entry::Protocol)
					  {
					    current->name+="-p";
					  }
					  lineCount();
					  lastClassTemplSpecContext = ClassVar;
					  if (insideObjC) // protocol list
					  {
					    BEGIN( ObjCProtocolList );
					  }
					  else if (insideCS) // C# generic class
					  {
					    current->name+="-g"; 
					    BEGIN( CSGeneric );
					  }
					  else // C++ template specialization
					  {
					    roundCount=0;
					    BEGIN( ClassTemplSpec );
					  }
					}
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 4518 "scanner.l"
{
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  // check bug 612858 before enabling the next line
					  //current->spec |= Entry::Template;
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  //current->name += "<";
					  fullArgString = templateStr;
					  //copyArgString = &current->name;
					  copyArgString = &templateStr;
					  currentArgumentContext = ClassVar;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 4537 "scanner.l"
{
  					  insideProtocolList=TRUE;
  					  BEGIN( Bases );
  					}
	YY_BREAK
case 488:
/* rule 488 can match eol */
YY_RULE_SETUP
#line 4541 "scanner.l"
{
					  current->name += scanYYtext;
					  lineCount();
  					  if (--sharpCount<=0)
					  {
					    current->name = removeRedundantWhiteSpace(current->name);
					    if (current->spec & Entry::Protocol)
					    { // Objective-C protocol
					      unput('{'); // fake start of body
					      BEGIN( ClassVar );
					    }
					    else
					    {
					      BEGIN( lastClassTemplSpecContext );
					    }
					  }
					}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 4558 "scanner.l"
{
  					  current->name += scanYYtext;
  					  sharpCount++;
  					}
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 4562 "scanner.l"
{
  					  current->name += scanYYtext;
					}
	YY_BREAK
case 491:
/* rule 491 can match eol */
YY_RULE_SETUP
#line 4565 "scanner.l"
{ // forward declaration
    					  unput(';');
					  current->reset();
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 492:
/* rule 492 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4574 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->spec & Entry::Protocol)
					  {
					    current->name += "-p";
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 493:
/* rule 493 can match eol */
YY_RULE_SETUP
#line 4583 "scanner.l"
{  // multiple forward declarations on one line
                                           // e.g. @protocol A,B;
					  current->reset();
  					}
	YY_BREAK
case 494:
/* rule 494 can match eol */
YY_RULE_SETUP
#line 4587 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->spec & Entry::Protocol)
					  {
					    current->name += "-p";
					  }
					  if ((current->spec & Entry::Protocol) ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 495:
/* rule 495 can match eol */
YY_RULE_SETUP
#line 4601 "scanner.l"
{ // C# style scope
					  current->name = substitute(scanYYtext,".","::");
					  lineCount();
					  BEGIN( ClassVar );
                                        }
	YY_BREAK
case 496:
/* rule 496 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4606 "scanner.l"
{
  					  if (insideIDL && strncmp(scanYYtext,"switch",6)==0 && !isId(scanYYtext[6]))
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
  					    BEGIN( FindMembers );
					  }
  					}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 4622 "scanner.l"
{
 					  if (isTypedef)
					  {
					    // multiple types in one typedef
					    unput(',');
					    current->type.prepend("typedef ");
					    BEGIN(FindMembers);
					  }
					  else
					  { 
  					    // Multiple class forward declaration
					  }
  					}
	YY_BREAK
case 498:
/* rule 498 can match eol */
YY_RULE_SETUP
#line 4635 "scanner.l"
{
  					  if (insideCli)
					  {
					    if (scanYYtext[0]=='s') // sealed
					      current->spec |= Entry::SealedClass;
					    else // abstract
					      current->spec |= Entry::AbstractClass;
					    BEGIN( ClassVar ); 
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 4649 "scanner.l"
{
  					  if (insideIDL && strcmp(scanYYtext,"switch")==0)
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else if ((insideJava || insidePHP || insideJS) && (strcmp(scanYYtext,"implements")==0 || strcmp(scanYYtext,"extends")==0))
					  {
  					    current->type.resize(0);
					    baseProt=Public;
                                            baseVirt=Normal;
					    baseName.resize(0);
					    BEGIN( BasesProt ) ;
					  }
					  else if (insideCS && strcmp(scanYYtext,"where")==0) // C# type contraint
					  {
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else if (insideCli &&  strcmp(scanYYtext,"abstract"))
					  {
					    current->spec|=Entry::Abstract;
					  }
					  else if (insideCli &&  strcmp(scanYYtext,"sealed"))
					  {
					    current->spec|=Entry::Sealed;
					  }
					  else
					  {
					    if (current->section == Entry::ENUM_SEC)
					    { // found "enum a b" -> variable
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    current->type += ' ' ;
					    current->type += current->name ;
					    current->name = scanYYtext ;
					    
					    if (nameIsOperator(current->name))
					    {
				              BEGIN( Operator );
					    }
					  }
  					}
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 4696 "scanner.l"
{
    					  if (insideObjC && *scanYYtext=='(') // class category
					  {
					    current->name+='(';
                                            if (current->section!=Entry::OBJCIMPL_SEC)
                                            {
					      current->spec|=Entry::Category;
                                            }
					    BEGIN( ClassCategory );
					  }
					  else
					  {
                                            // probably a function anyway
                                            unput(*scanYYtext);
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 4713 "scanner.l"
{ /* empty comment */ }
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 4714 "scanner.l"
{ // special comment
                                          fullArgString.resize(0);
					  lastCopyArgChar='#'; // end marker
					  lastCommentInArgContext=YY_START;
					  if (scanYYtext[1]=='/')
					    BEGIN( CopyArgCommentLine );
					  else
					    BEGIN( CopyArgComment );
					}
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 4723 "scanner.l"
{ // artificially inserted token to signal end of comment block
                                          current->typeConstr->last()->docs = fullArgString;
  					}
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 4726 "scanner.l"
{ // end of type constraint reached
                                          // parse documentation of the constraints
                                          handleParametersCommentBlocks(current->typeConstr);
					  unput('{');
					  BEGIN( lastCSConstraint );
					}
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 4732 "scanner.l"
{
                                          handleParametersCommentBlocks(current->typeConstr);
					  unput(';');
					  BEGIN( lastCSConstraint );
  					}
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 4737 "scanner.l"
{
                                          BEGIN( CSConstraintType );
                                        }
	YY_BREAK
case 507:
YY_RULE_SETUP
#line 4740 "scanner.l"
{
                                          // parameter name
                                          current->typeConstr->last()->name=scanYYtext;
                                        }
	YY_BREAK
case 508:
YY_RULE_SETUP
#line 4744 "scanner.l"
{ // another constraint for a different param
					  current->typeConstr->append(new Argument);
                                          BEGIN( CSConstraintName );
  					}
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 4748 "scanner.l"
{
                                          if (current->typeConstr->last()->type.isEmpty())
                                              // first type constraint for this parameter
                                          {
                                            current->typeConstr->last()->type=scanYYtext;
                                          }
                                          else // new type constraint for same parameter
                                          {
                                            QCString name = current->typeConstr->last()->name;
                                            current->typeConstr->append(new Argument);
                                            current->typeConstr->last()->name=name;
                                            current->typeConstr->last()->type=scanYYtext;
                                          }
                                        }
	YY_BREAK
case 510:
/* rule 510 can match eol */
YY_RULE_SETUP
#line 4762 "scanner.l"
{
					  yyLineNr++;
					}
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 4765 "scanner.l"
{
					}
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 4767 "scanner.l"
{
					  current->name+=scanYYtext;
					}
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 4770 "scanner.l"
{
					  current->name+=')';
					  if ((current->section & Entry::Protocol) ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  else // category has no variables so push back an empty body
					  {
					    unput('}');
					    unput('{');
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 4784 "scanner.l"
{ 
					  if (current->section == Entry::VARIABLE_SEC) // enum a b:2, see bug 313527
					  {
  					    BEGIN(BitFields);
					    current->bitfields+=":";
					  }
					  else
					  {
					    current->type.resize(0);
					    if ((current->spec & Entry::Interface) || 
						(current->spec & Entry::Struct)    || 
						(current->spec & Entry::Ref)       || 
						(current->spec & Entry::Value)     || 
						insidePHP || insideCS || insideD || insideObjC
					       )
					      baseProt=Public;
					    else
					      baseProt=Private;
					    baseVirt=Normal;
					    baseName.resize(0);
					    BEGIN( BasesProt ) ;
					  }
					}
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 4807 "scanner.l"
{
    					  unput(*scanYYtext);
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  if ((scanYYtext[0]=='*' || scanYYtext[0]=='&') && 
					      current->section == Entry::ENUM_SEC)
					  { // found "enum a *b" -> variable
					    current->section = Entry::VARIABLE_SEC ;
					  }
					  BEGIN( FindMembers );
    					}
	YY_BREAK
case 516:
/* rule 516 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4820 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 517:
/* rule 517 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 4836 "scanner.l"
case 518:
/* rule 518 can match eol */
#line 4837 "scanner.l"
case 519:
/* rule 519 can match eol */
#line 4838 "scanner.l"
case 520:
/* rule 520 can match eol */
YY_RULE_SETUP
#line 4838 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 4853 "scanner.l"
{ 
                                          current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
					  if (current->name.isEmpty() && !isTypedef) // anonymous compound
					  {
					    if (current->section==Entry::NAMESPACE_SEC) // allow reopening of anonymous namespaces
					    {
					      if (Config_getBool("EXTRACT_ANON_NSPACES")) // use visible name
					      {
					        current->name="anonymous_namespace{"+stripPath(current->fileName)+"}";
					      }
					      else // use invisible name
					      {
					        current->name.sprintf("@%d",anonNSCount);
					      }
					    }
					    else
					    {
					      current->name.sprintf("@%d",anonCount++);
					    }
					  }
					  curlyCount=0;
					  if (current_root && // not a nested struct inside an @interface section
					      !(current_root->spec & Entry::Interface) &&
					      ((current->spec & (Entry::Interface | Entry::Protocol | Entry::Category) ||
					        current->section==Entry::OBJCIMPL_SEC)
					      ) &&
					      insideObjC
					     )
					  { // ObjC body that ends with @end
					    BEGIN( ReadBodyIntf );
					  }
					  else if (current->section==Entry::NAMESPACE_SEC)
					  { // namespace body
					    BEGIN( ReadNSBody );
					  }
					  else
					  { // class body
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 522:
/* rule 522 can match eol */
YY_RULE_SETUP
#line 4895 "scanner.l"
{ lineCount(); baseVirt = Virtual; }
	YY_BREAK
case 523:
/* rule 523 can match eol */
YY_RULE_SETUP
#line 4896 "scanner.l"
{ lineCount(); baseProt = Public; }
	YY_BREAK
case 524:
/* rule 524 can match eol */
YY_RULE_SETUP
#line 4897 "scanner.l"
{ lineCount(); baseProt = Protected; }
	YY_BREAK
case 525:
/* rule 525 can match eol */
YY_RULE_SETUP
#line 4898 "scanner.l"
{ lineCount(); baseProt = Private; }
	YY_BREAK
case 526:
/* rule 526 can match eol */
YY_RULE_SETUP
#line 4899 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 4900 "scanner.l"
{ unput(*scanYYtext); BEGIN(Bases); }
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 4901 "scanner.l"
{ // PHP namespace token, not sure if interspacing is allowed but it gives problems (see bug 640847)
                                          if (!insidePHP)
					  {
					    REJECT;
					  }
					  else // PHP base class of the form \Ns\Cl or Ns\Cl
					  {
  					    lineCount();
					    QCString bn=scanYYtext;
					    bn = substitute(bn,"\\","::");
					    baseName += bn;
					    current->args += ' ';
					    current->args += scanYYtext;
					  }
                                        }
	YY_BREAK
case 529:
/* rule 529 can match eol */
YY_RULE_SETUP
#line 4916 "scanner.l"
{ 
  					  lineCount();
                                          QCString baseScope = scanYYtext;
                                          if (insideCS && baseScope.stripWhiteSpace()=="where")
					  { 
					    // type contraint for a class
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else
					  {
  					    baseName+=scanYYtext;
					    current->args += ' ';
					    current->args += scanYYtext;
					  }
					}
	YY_BREAK
case 530:
/* rule 530 can match eol */
YY_RULE_SETUP
#line 4935 "scanner.l"
{ // Java style class
    					  QCString name = substitute(scanYYtext,".","::");
					  baseName += name;
					  current->args += ' ';
					  current->args += name;
    					}
	YY_BREAK
case 531:
/* rule 531 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4941 "scanner.l"
{
                                          if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
					    yyLineNr++;
					    unput('{');
					  }
					}
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 4952 "scanner.l"
{ // empty ObjC interface
  					  unput('d'); // insert fake body: {}@end
  					  unput('n'); 
  					  unput('e'); 
  					  unput('@'); 
  					  unput('}'); 
  					  unput('{');
					}
	YY_BREAK
case 533:
YY_RULE_SETUP
#line 4960 "scanner.l"
{ current->name += *scanYYtext;
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  specName = &current->name;
					  BEGIN ( Specialization );
					}
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 4967 "scanner.l"
{ 
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  if (insideObjC) // start of protocol list
					  {
					    unput(',');
					  }
					  else // template specialization
					  {
					    //if (insideCS) // generic
					    //{
					    //  baseName+="-g";
					    //}
                                            templateStr = scanYYtext;
					    specName = &templateStr;
					    BEGIN ( Specialization );
					  }
					}
	YY_BREAK
case 535:
YY_RULE_SETUP
#line 4986 "scanner.l"
{ *specName += *scanYYtext;
  					  if (roundCount==0) sharpCount++;
  					}
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 4989 "scanner.l"
{
  					  *specName += *scanYYtext;
  					  if (roundCount==0 && --sharpCount<=0)
					  {
					    if (1 /*!insideCS*/) 
					    {
					      baseName+=*specName;
					    }
					    else
					    {
					      if (current->tArgLists==0)
					      {
						current->tArgLists = new QList<ArgumentList>;
						current->tArgLists->setAutoDelete(TRUE);
					      }
					      ArgumentList *al = new ArgumentList;
					      current->tArgLists->append(al);
					      stringToArgumentList(*specName,al);
					    }
					    BEGIN(lastSkipSharpContext);
					  }
  					}
	YY_BREAK
case 537:
/* rule 537 can match eol */
YY_RULE_SETUP
#line 5011 "scanner.l"
{ lineCount(); *specName +=' '; }
	YY_BREAK
case 538:
YY_RULE_SETUP
#line 5012 "scanner.l"
{ *specName += scanYYtext; }
	YY_BREAK
case 539:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5013 "scanner.l"
{ // M$ C++ extension to allow >> to close a template...
  					  unput('>');
  					  unput(' ');
  					  unput('>');
                                        }
	YY_BREAK
case 540:
YY_RULE_SETUP
#line 5018 "scanner.l"
{
                                          if (insideCS) // for C# >> ends a nested template
					  {
					    REJECT;
					  }
					  else // for C++ >> is a bitshift 
					       // operator and > > would end 
					       // a nested template.
					       // We require the bitshift to be enclosed in braces.
					       // See http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html
					  {
					    if (roundCount>0)
					    {
                                              *specName += scanYYtext; 
					    }
					    else
					    {
  					      unput('>');
  					      unput(' ');
  					      unput('>');
					    }
					  }
                                        }
	YY_BREAK
case 541:
/* rule 541 can match eol */
YY_RULE_SETUP
#line 5041 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 542:
YY_RULE_SETUP
#line 5042 "scanner.l"
{ *specName += *scanYYtext; roundCount++; }
	YY_BREAK
case 543:
YY_RULE_SETUP
#line 5043 "scanner.l"
{ *specName += *scanYYtext; roundCount--; }
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 5044 "scanner.l"
{
  					  *specName += *scanYYtext;
  					}
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 5047 "scanner.l"
{ ++sharpCount; }
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 5048 "scanner.l"
{ if (--sharpCount<=0)
					    BEGIN ( lastSkipSharpContext );
					}
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 5051 "scanner.l"
{ ++roundCount; }
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 5052 "scanner.l"
{ if (--roundCount<=0)
					    BEGIN ( lastSkipRoundContext );
					}
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 5055 "scanner.l"
{
  					  lastStringContext=SkipRound;
					  BEGIN(SkipString);
  					}
	YY_BREAK
case 550:
/* rule 550 can match eol */
YY_RULE_SETUP
#line 5059 "scanner.l"
{ lineCount();
                                          if (insideProtocolList)
					  {
					    baseName+="-p";
					  }
					  else
					  {
                                            current->args += ',' ; 
					  }
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
					  {
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  }
					  if ((current->spec & (Entry::Interface|Entry::Struct)) || 
					      insideJava || insidePHP || insideCS || 
					      insideD || insideObjC)
					  {
					    baseProt=Public;
					  }
					  else
					  {
					    baseProt=Private;
					  }
					  baseVirt=Normal;
					  baseName.resize(0);
                                          if (*scanYYtext=='>')
					  { // end of a ObjC protocol list
  					    insideProtocolList=FALSE;
					    if (scanYYleng==1)
					    {
					      unput('{'); // dummy start body
					    }
					    else
					    {
					      yyless(1);
					    }
					  }
					  else
					  {
					    if (*scanYYtext==',' && insideObjC) // Begin of protocol list
					    {
  					      insideProtocolList=TRUE;
					    }
					    BEGIN(BasesProt);
					  }
					}
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 5108 "scanner.l"
{ current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  curlyCount=0;
					  if (insideObjC)
					  {
					    BEGIN( ReadBodyIntf );
					  }
					  else
					  {
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 5125 "scanner.l"
{
  					  roundCount++;
  					}
	YY_BREAK
case 553:
YY_RULE_SETUP
#line 5128 "scanner.l"
{
  					  if (--roundCount==0)
					  {
					    BEGIN(ClassVar);
					  }
  					}
	YY_BREAK
case 554:
/* rule 554 can match eol */
YY_RULE_SETUP
#line 5134 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 5135 "scanner.l"

	YY_BREAK
case 556:
/* rule 556 can match eol */
YY_RULE_SETUP
#line 5136 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 5139 "scanner.l"
{ current->program += scanYYtext ; } 
	YY_BREAK
case 558:
YY_RULE_SETUP
#line 5140 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 5141 "scanner.l"
{
                                          insideCode=TRUE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 5145 "scanner.l"
{
                                          insideCode=FALSE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 5149 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 5150 "scanner.l"
{ current->program += scanYYtext ;
					  if (!insideCode) BEGIN( lastContext ) ;
					}
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 5153 "scanner.l"
{ current->program += *scanYYtext ; }
	YY_BREAK
case 564:
YY_RULE_SETUP
#line 5155 "scanner.l"
{ 
  					  //printf("Start doc block at %d\n",yyLineNr);
					  removeSlashes=(scanYYtext[1]=='/');
					  tmpDocType=-1;
					  if (!current->doc.isEmpty())
					  {
					    current->doc+="\n\n";
					  }
					  else
					  {
					    current->docLine = yyLineNr;
					    current->docFile = yyFileName;
					  }

					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = Config_getBool("QT_AUTOBRIEF");
					  docBlock.resize(0);
					  if (docBlockAutoBrief)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
					}
	YY_BREAK
case 565:
/* rule 565 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5186 "scanner.l"
{
  					  removeSlashes=(scanYYtext[1]=='/');
					  lastDocContext = YY_START;

					  //printf("Found comment block at %s:%d\n",yyFileName,yyLineNr);
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  current->docLine = yyLineNr;
					  current->docFile = yyFileName;
					  docBlockContext = YY_START;
					  docBlockInBody  = YY_START==SkipCurly;
					  docBlockAutoBrief = Config_getBool("JAVADOC_AUTOBRIEF");
					  docBlock.resize(0);
					  if (docBlockAutoBrief)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
  					}
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 5209 "scanner.l"
{ 
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(current->brief.isEmpty());
					  BEGIN( DocLine );
					}
	YY_BREAK
case 567:
/* rule 567 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5223 "scanner.l"
{ 
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(current->brief.isEmpty());
					  BEGIN( DocLine );
					}
	YY_BREAK
case 568:
/* rule 568 can match eol */
YY_RULE_SETUP
#line 5237 "scanner.l"
{
					  lineCount();
					  externC=TRUE;
					}
	YY_BREAK
case 569:
YY_RULE_SETUP
#line 5241 "scanner.l"
{
                                          if (externC) 
					  {
					    externC=FALSE;
					  }
                                          else if (insideCS &&    
					      !current->name.isEmpty() && 
					      !current->type.isEmpty())
					  {
					    if (containsWord(current->type,"event")) // event
					    {
  					      current->mtype = mtype = Event;
					    }
					    else // property
					    {				
  					      current->mtype = mtype = Property;
					    }
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN( CSAccessorDecl );
					  }
					  else
					  {
					    if ((insideJava || insideCS || insideD) &&
						current->name.isEmpty()
					       )
					    {
					      // static Java initializer
					      needsSemi = FALSE;
					      if (current->stat)
					      {
						current->name="[static initializer]";
						current->type.resize(0);
					      }
					      else
					      {
						current->name="[instance initializer]";
					      }
                                              unput(*scanYYtext); 
					      BEGIN( Function );
					    }
					    else
					    {
					      needsSemi = TRUE;
					      current->type.resize(0);
					      current->name.resize(0);
					      current->args.resize(0);
					      current->argList->clear();
					      curlyCount=0;
					      BEGIN( SkipCurlyBlock );
					    }
					  }
  					}
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 5294 "scanner.l"
{ curlyCount++; }
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 5295 "scanner.l"
{ 
                                          if (curlyCount) 
                                          {
                                            curlyCount--; 
					  }
					  else
					  {
  					    mtype = Method;
                                            unput(';');
					    BEGIN(FindMembers);
					  }
                                        }
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 5307 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Settable;  }
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 5308 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Gettable;  }
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 5309 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Addable;   }
	YY_BREAK
case 575:
YY_RULE_SETUP
#line 5310 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Removable; }
	YY_BREAK
case 576:
YY_RULE_SETUP
#line 5311 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Raisable;  }
	YY_BREAK
case 577:
YY_RULE_SETUP
#line 5312 "scanner.l"
{}
	YY_BREAK
case 578:
/* rule 578 can match eol */
YY_RULE_SETUP
#line 5313 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
/**********************************************************************************/
/******************** Documentation block related rules ***************************/
/**********************************************************************************/
/* ---- Single line comments ------ */
case 579:
/* rule 579 can match eol */
YY_RULE_SETUP
#line 5323 "scanner.l"
{ // continuation of multiline C++-style comment
				           docBlock+=scanYYtext;
          		                   docBlock.resize(docBlock.length() - 3);
					   yyLineNr++;
                                        }
	YY_BREAK
case 580:
/* rule 580 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5328 "scanner.l"
{ // whole line
  					  docBlock+=scanYYtext;
					  handleCommentBlock(docBlock.data(),current->brief.isEmpty());
					  BEGIN( docBlockContext );
  					}
	YY_BREAK
/* ---- Comments blocks ------ */
case 581:
YY_RULE_SETUP
#line 5336 "scanner.l"
{ // end of comment block
  				          handleCommentBlock(docBlock.data(),FALSE);
					  BEGIN(docBlockContext);
  					}
	YY_BREAK
case 582:
/* rule 582 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5340 "scanner.l"
{ // start of a comment line
  					}
	YY_BREAK
case 583:
YY_RULE_SETUP
#line 5342 "scanner.l"
{ // strip embedded C++ comments if at the start of a line
  					}
	YY_BREAK
case 584:
YY_RULE_SETUP
#line 5344 "scanner.l"
{ // slashes in the middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 585:
YY_RULE_SETUP
#line 5347 "scanner.l"
{ // start of a new comment in the 
                                          // middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 586:
/* rule 586 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5351 "scanner.l"
{ // escaped command
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 587:
YY_RULE_SETUP
#line 5354 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  BEGIN(DocCopyBlock);
                                        }
	YY_BREAK
case 588:
YY_RULE_SETUP
#line 5363 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName="<pre>";
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 589:
/* rule 589 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5368 "scanner.l"
{ // verbatim command (which could contain nested comments!)
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 590:
YY_RULE_SETUP
#line 5373 "scanner.l"
{
  					  if (insideCS)
					  {
					    docBlock+=scanYYtext;
					    docBlockName="<code>";
					    BEGIN(DocCopyBlock);
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 591:
YY_RULE_SETUP
#line 5385 "scanner.l"
{ // any character that isn't special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 592:
/* rule 592 can match eol */
YY_RULE_SETUP
#line 5388 "scanner.l"
{ // newline
  					  yyLineNr++;
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case 593:
YY_RULE_SETUP
#line 5392 "scanner.l"
{ // command block
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
/* ---- Copy verbatim sections ------ */
case 594:
YY_RULE_SETUP
#line 5398 "scanner.l"
{ // end of a <pre> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<pre>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 595:
YY_RULE_SETUP
#line 5405 "scanner.l"
{ // end of a <code> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<code>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 596:
YY_RULE_SETUP
#line 5412 "scanner.l"
{
  					  docBlock+=scanYYtext;
					  BEGIN(DocBlock);
  					}
	YY_BREAK
case 597:
/* rule 597 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5416 "scanner.l"
{ // end of verbatim block
  					  docBlock+=scanYYtext;
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 598:
/* rule 598 can match eol */
YY_RULE_SETUP
#line 5423 "scanner.l"
{ // start of a comment line
  					  if (docBlockName=="verbatim")
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 599:
YY_RULE_SETUP
#line 5429 "scanner.l"
{ // any character that is not special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 600:
YY_RULE_SETUP
#line 5432 "scanner.l"
{
  					  docBlock+=scanYYtext;
					}
	YY_BREAK
case 601:
/* rule 601 can match eol */
YY_RULE_SETUP
#line 5435 "scanner.l"
{ // newline
  					  docBlock+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 602:
YY_RULE_SETUP
#line 5439 "scanner.l"
{ // any other character
  					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case YY_STATE_EOF(DocCopyBlock):
#line 5442 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: reached end of file while inside a %s block!\n"
					      "The command that should end the block seems to be missing!\n",
					      docBlockName.data());
  					  yyterminate();
  					}
	YY_BREAK
/* ------------- Prototype parser -------------- */
case 603:
YY_RULE_SETUP
#line 5453 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 604:
YY_RULE_SETUP
#line 5456 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 605:
YY_RULE_SETUP
#line 5463 "scanner.l"
{
  					  current->type+=current->name+scanYYtext;
					  current->name.resize(0);
  					  BEGIN( PrototypePtr );
  					}
	YY_BREAK
case 606:
/* rule 606 can match eol */
YY_RULE_SETUP
#line 5468 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 607:
YY_RULE_SETUP
#line 5471 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 608:
YY_RULE_SETUP
#line 5478 "scanner.l"
{
  					  current->type+=')';
  					  BEGIN( Prototype );
  					}
	YY_BREAK
case 609:
YY_RULE_SETUP
#line 5482 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 610:
YY_RULE_SETUP
#line 5485 "scanner.l"
{
  					  BEGIN( PrototypeSkipLine);
  					}
	YY_BREAK
case 611:
YY_RULE_SETUP
#line 5488 "scanner.l"
{ 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 612:
YY_RULE_SETUP
#line 5492 "scanner.l"
{ 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 613:
YY_RULE_SETUP
#line 5496 "scanner.l"
{ 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 614:
YY_RULE_SETUP
#line 5501 "scanner.l"
{
  					  current->exception = "throw(";
					  BEGIN(PrototypeExc);
  					}
	YY_BREAK
case 615:
YY_RULE_SETUP
#line 5505 "scanner.l"
{
  					  current->exception += ')';
					  BEGIN(PrototypeQual);
  					}
	YY_BREAK
case 616:
YY_RULE_SETUP
#line 5509 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 617:
YY_RULE_SETUP
#line 5512 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 618:
YY_RULE_SETUP
#line 5515 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 619:
YY_RULE_SETUP
#line 5518 "scanner.l"
{
  					}
	YY_BREAK
/* ------------ Generic rules -------------- */
case 620:
/* rule 620 can match eol */
YY_RULE_SETUP
#line 5525 "scanner.l"
{  // line continuation
  					  yyLineNr++; 
  					}
	YY_BREAK
case 621:
/* rule 621 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5528 "scanner.l"
{ 
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 622:
YY_RULE_SETUP
#line 5531 "scanner.l"

	YY_BREAK
case 623:
/* rule 623 can match eol */
YY_RULE_SETUP
#line 5532 "scanner.l"
{ yyLineNr++ ; }
	YY_BREAK
case 624:
YY_RULE_SETUP
#line 5533 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					}
	YY_BREAK
case 625:
YY_RULE_SETUP
#line 5539 "scanner.l"
{	
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 626:
YY_RULE_SETUP
#line 5545 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 627:
YY_RULE_SETUP
#line 5552 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 628:
YY_RULE_SETUP
#line 5559 "scanner.l"

	YY_BREAK
case 629:
YY_RULE_SETUP
#line 5560 "scanner.l"

	YY_BREAK
case 630:
YY_RULE_SETUP
#line 5561 "scanner.l"
{ lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 631:
YY_RULE_SETUP
#line 5564 "scanner.l"
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 632:
YY_RULE_SETUP
#line 5565 "scanner.l"
{	
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 633:
YY_RULE_SETUP
#line 5569 "scanner.l"
ECHO;
	YY_BREAK
#line 17332 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(CompoundName):
			case YY_STATE_EOF(ClassVar):
			case YY_STATE_EOF(CSConstraintName):
			case YY_STATE_EOF(CSConstraintType):
			case YY_STATE_EOF(CSIndexer):
			case YY_STATE_EOF(ClassCategory):
			case YY_STATE_EOF(ClassTemplSpec):
			case YY_STATE_EOF(CliPropertyType):
			case YY_STATE_EOF(CliPropertyIndex):
			case YY_STATE_EOF(CliOverride):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(BasesProt):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(BitFields):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(FindMembersPHP):
			case YY_STATE_EOF(FindMemberName):
			case YY_STATE_EOF(FindFields):
			case YY_STATE_EOF(FindFieldArg):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(FuncRound):
			case YY_STATE_EOF(ExcpRound):
			case YY_STATE_EOF(ExcpList):
			case YY_STATE_EOF(FuncQual):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(ReadBody):
			case YY_STATE_EOF(ReadNSBody):
			case YY_STATE_EOF(ReadBodyIntf):
			case YY_STATE_EOF(Using):
			case YY_STATE_EOF(UsingDirective):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipCurlyCpp):
			case YY_STATE_EOF(SkipCurlyEndDoc):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipPHPString):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(SkipCPPBlock):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(SkipCurlyBlock):
			case YY_STATE_EOF(SkipRoundBlock):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(SkipSharp):
			case YY_STATE_EOF(SkipRound):
			case YY_STATE_EOF(SkipSquare):
			case YY_STATE_EOF(SkipRemainder):
			case YY_STATE_EOF(TypedefName):
			case YY_STATE_EOF(TryFunctionBlock):
			case YY_STATE_EOF(TryFunctionBlockEnd):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PackageName):
			case YY_STATE_EOF(JavaImport):
			case YY_STATE_EOF(PHPUse):
			case YY_STATE_EOF(PHPUseAs):
			case YY_STATE_EOF(CSAccessorDecl):
			case YY_STATE_EOF(CSGeneric):
			case YY_STATE_EOF(PreLineCtrl):
			case YY_STATE_EOF(DefinePHP):
			case YY_STATE_EOF(DefinePHPEnd):
			case YY_STATE_EOF(OldStyleArgs):
			case YY_STATE_EOF(SkipVerbString):
			case YY_STATE_EOF(ObjCMethod):
			case YY_STATE_EOF(ObjCReturnType):
			case YY_STATE_EOF(ObjCParams):
			case YY_STATE_EOF(ObjCParamType):
			case YY_STATE_EOF(ObjCProtocolList):
			case YY_STATE_EOF(ObjCPropAttr):
			case YY_STATE_EOF(ObjCSkipStatement):
			case YY_STATE_EOF(QtPropType):
			case YY_STATE_EOF(QtPropName):
			case YY_STATE_EOF(QtPropAttr):
			case YY_STATE_EOF(QtPropRead):
			case YY_STATE_EOF(QtPropWrite):
			case YY_STATE_EOF(ReadInitializer):
			case YY_STATE_EOF(GetCallType):
			case YY_STATE_EOF(CppQuote):
			case YY_STATE_EOF(EndCppQuote):
			case YY_STATE_EOF(MemberSpec):
			case YY_STATE_EOF(MemberSpecSkip):
			case YY_STATE_EOF(EndTemplate):
			case YY_STATE_EOF(FuncPtr):
			case YY_STATE_EOF(FuncPtrOperator):
			case YY_STATE_EOF(EndFuncPtr):
			case YY_STATE_EOF(ReadFuncArgType):
			case YY_STATE_EOF(ReadTempArgs):
			case YY_STATE_EOF(IDLUnionCase):
			case YY_STATE_EOF(NSAliasName):
			case YY_STATE_EOF(NSAliasArg):
			case YY_STATE_EOF(CopyString):
			case YY_STATE_EOF(CopyPHPString):
			case YY_STATE_EOF(CopyGString):
			case YY_STATE_EOF(CopyPHPGString):
			case YY_STATE_EOF(CopyRound):
			case YY_STATE_EOF(CopyCurly):
			case YY_STATE_EOF(GCopyRound):
			case YY_STATE_EOF(GCopyCurly):
			case YY_STATE_EOF(SkipUnionSwitch):
			case YY_STATE_EOF(Specialization):
			case YY_STATE_EOF(FuncPtrInit):
			case YY_STATE_EOF(FuncFunc):
			case YY_STATE_EOF(FuncFuncEnd):
			case YY_STATE_EOF(FuncFuncType):
			case YY_STATE_EOF(FuncFuncArray):
			case YY_STATE_EOF(CopyArgString):
			case YY_STATE_EOF(CopyArgPHPString):
			case YY_STATE_EOF(CopyArgRound):
			case YY_STATE_EOF(CopyArgSharp):
			case YY_STATE_EOF(CopyArgComment):
			case YY_STATE_EOF(CopyArgCommentLine):
			case YY_STATE_EOF(CopyArgVerbatim):
			case YY_STATE_EOF(IDLAttribute):
			case YY_STATE_EOF(IDLProp):
			case YY_STATE_EOF(IDLPropName):
			case YY_STATE_EOF(Prototype):
			case YY_STATE_EOF(PrototypePtr):
			case YY_STATE_EOF(PrototypeQual):
			case YY_STATE_EOF(PrototypeExc):
			case YY_STATE_EOF(PrototypeSkipLine):
			case YY_STATE_EOF(DocLine):
			case YY_STATE_EOF(DocBlock):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed scanYYin at a new source and called
			 * scanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = scanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( scanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * scanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of scanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			scanYYrestart(scanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) scanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3706 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3706 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3705);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up scanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					scanYYrestart(scanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( scanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve scanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void scanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        scanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
	}

	scanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	scanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void scanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		scanYYpop_buffer_state();
	 *		scanYYpush_buffer_state(new_buffer);
     */
	scanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	scanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (scanYYwrap()) processing, but the only time this flag
	 * is looked at is after scanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void scanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	scanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE scanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) scanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	scanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with scanYY_create_buffer()
 * 
 */
    void scanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		scanYYfree((void *) b->yy_ch_buf  );

	scanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a scanYYrestart() or at EOF.
 */
    static void scanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	scanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then scanYY_init_buffer was _probably_
     * called from scanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void scanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		scanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	scanYYensure_buffer_stack();

	/* This block is copied from scanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from scanYY_switch_to_buffer. */
	scanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void scanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	scanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		scanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void scanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE scanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	scanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to scanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       scanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE scanYY_scan_string (yyconst char * yystr )
{
    
	return scanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to scanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE scanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) scanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = scanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in scanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		scanYYtext[scanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = scanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		scanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int scanYYget_lineno  (void)
{
        
    return scanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *scanYYget_in  (void)
{
        return scanYYin;
}

/** Get the output stream.
 * 
 */
FILE *scanYYget_out  (void)
{
        return scanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t scanYYget_leng  (void)
{
        return scanYYleng;
}

/** Get the current token.
 * 
 */

char *scanYYget_text  (void)
{
        return scanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void scanYYset_lineno (int  line_number )
{
    
    scanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see scanYY_switch_to_buffer
 */
void scanYYset_in (FILE *  in_str )
{
        scanYYin = in_str ;
}

void scanYYset_out (FILE *  out_str )
{
        scanYYout = out_str ;
}

int scanYYget_debug  (void)
{
        return scanYY_flex_debug;
}

void scanYYset_debug (int  bdebug )
{
        scanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from scanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    scanYYin = stdin;
    scanYYout = stdout;
#else
    scanYYin = (FILE *) 0;
    scanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * scanYYlex_init()
     */
    return 0;
}

/* scanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int scanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		scanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		scanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	scanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    scanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * scanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *scanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *scanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void scanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see scanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 5569 "scanner.l"



//----------------------------------------------------------------------------

static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}
  
//----------------------------------------------------------------------------

static void newEntry()
{
  current_root->addSubEntry(current);
  previous = current;
  current = new Entry ;
  initEntry();
}

static void handleCommentBlock(const QCString &doc,bool brief)
{
  static bool hideInBodyDocs = Config_getBool("HIDE_IN_BODY_DOCS");
  int position=0;
  bool needsEntry=FALSE;
  if (docBlockInBody && hideInBodyDocs) return;
  //printf("parseCommentBlock [%s] brief=%d\n",doc.data(),brief);
  int lineNr = brief ? current->briefLine : current->docLine;   // line of block start
  
  // fill in inbodyFile && inbodyLine the first time, see bug 633891
  Entry *docEntry = docBlockInBody && previous ? previous : current;
  if (docBlockInBody && docEntry && docEntry->inbodyLine==-1)
  {
    docEntry->inbodyFile = yyFileName;
    docEntry->inbodyLine = lineNr;
  }

  while (parseCommentBlock(
	g_thisParser,
	docBlockInBody && previous ? previous : current,
	doc,        // text
	yyFileName, // file
	lineNr,     // line of block start
	docBlockInBody ? FALSE : brief,               // isBrief
	docBlockInBody ? FALSE : docBlockAutoBrief,   // isJavaDocStyle
	docBlockInBody,                               // isInBody
	protection,
        position,
        needsEntry
        )
     ) 
  {
    //printf("parseCommentBlock position=%d [%s]\n",position,doc.data()+position);
    if (needsEntry) 
    {
      QCString docFile = current->docFile;
      newEntry();
      current->docFile = docFile;
      current->docLine = lineNr;
    }
  }
  if (needsEntry)
  {
    newEntry();
  }

  if (docBlockTerm)
  {
    unput(docBlockTerm);
    docBlockTerm=0;
  }
}

static void handleParametersCommentBlocks(ArgumentList *al)
{
  //printf(">>>>>>> handleParametersCommentBlocks()\n");
  ArgumentListIterator ali(*al);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    //printf("    Param %s docs=%s\n",a->name.data(),a->docs.data());
    if (!a->docs.isEmpty())
    {
      int position=0;
      bool needsEntry;

      // save context
      QCString orgDoc   = current->doc;
      QCString orgBrief = current->brief;
      int orgDocLine    = current->docLine;
      int orgBriefLine  = current->briefLine;

      current->doc.resize(0);
      current->brief.resize(0);

      //printf("handleParametersCommentBlock [%s]\n",doc.data());
      while (parseCommentBlock(
	     g_thisParser,
	     current,
	     a->docs,            // text
	     yyFileName,         // file
	     current->docLine,   // line of block start
	     FALSE, 
	     FALSE,
	     FALSE,
	     protection,
	     position,
	     needsEntry
	    )
	  ) 
      {
	//printf("handleParametersCommentBlock position=%d [%s]\n",position,doc.data()+position);
	if (needsEntry) newEntry();
      }
      if (needsEntry)
      {
	newEntry();
      }
      a->docs = current->doc;

      // restore context
      current->doc       = orgDoc;
      current->brief     = orgBrief;
      current->docLine   = orgDocLine;
      current->briefLine = orgBriefLine;
    }
  }
}


//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  g_inputFromFile = FALSE;
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      padCount=0;
      //depthIf = 0;
      inputString = ce->program;
      inputPosition = 0;
      scanYYrestart( scanYYin ) ;
      if (ce->section==Entry::ENUM_SEC)
	BEGIN( FindFields ) ;
      else
	BEGIN( FindMembers ) ;
      current_root = ce ;
      yyFileName = ce->fileName;
      //setContext();
      yyLineNr = ce->startLine ;
      insideObjC = ce->lang==SrcLangExt_ObjC;
      //printf("---> Inner block starts at line %d objC=%d\n",yyLineNr,insideObjC);
      //current->reset();
      if (current) delete current;
      current = new Entry;
      current->lang = language;
      gstat = FALSE;
      int ni=ce->name.findRev("::"); if (ni==-1) ni=0; else ni+=2;
      // set default protection based on the compound type
      if( ce->section==Entry::CLASS_SEC ) // class
      {

        if (insidePHP || insideD || insideJS)
	{
          current->protection = protection = Public ; 
	}
	else if (insideJava)
	{
          current->protection = protection = Package ; 
	}
	else if (ce->spec&(Entry::Interface | Entry::Ref | Entry::Value | Entry::Struct | Entry::Union))
	{
	  if (ce->lang==SrcLangExt_ObjC)
	  {
	    current->protection = protection = Protected ;
	  }
	  else
	  {
	    current->protection = protection = Public ;
	  }
	}
	else 
	{
          current->protection = protection = Private ;
	}
      }
      else if (ce->section == Entry::ENUM_SEC ) // enum
      {
	current->protection = protection = ce->protection;
      }
      else if (!ce->name.isEmpty() && ce->name.at(ni)=='@') // unnamed union or namespace
      {
	if (ce->section == Entry::NAMESPACE_SEC ) // unnamed namespace
	{
          current->stat = gstat = TRUE;
	}
	current->protection = protection = ce->protection;
      }
      else // named struct, union, protocol, category
      {
	current->protection = protection = Public ;
      }
      mtype = Method;
      virt = Normal;
      //printf("name=%s current->stat=%d gstat=%d\n",ce->name.data(),current->stat,gstat);

      //memberGroupId = DOX_NOGROUP;
      //memberGroupRelates.resize(0);
      //memberGroupInside.resize(0);
      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      scanYYlex() ;
      g_lexInit=TRUE;
      //forceEndGroup();

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);
      
      delete current; current=0;
      ce->program.resize(0);


      //if (depthIf>0)
      //{
      //	warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
      //}
    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------

static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();
  //g_inputFromFile = TRUE;

  inputString = fileBuf;
  inputPosition = 0;
  g_inputFromFile = FALSE;

  //anonCount     = 0;  // don't reset per file
  //depthIf       = 0;
  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  global_root   = rt;
  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    setContext();
    rt->lang = language;
    msg("Parsing file %s...\n",yyFileName.data());

    current_root  = rt ;
    initParser();
    groupEnterFile(yyFileName,yyLineNr);
    current       = new Entry;
    //printf("current=%p current_root=%p\n",current,current_root);
    int sec=guessSection(yyFileName);
    if (sec)
    {
      current->name    = yyFileName;
      current->section = sec;
      current_root->addSubEntry(current);
      current          = new Entry;
    }
    current->reset();
    scanYYrestart( scanYYin );
    if ( insidePHP )
    {
      BEGIN( FindMembersPHP );
    }
    else
    {
      BEGIN( FindMembers );
    }

    scanYYlex();
    g_lexInit=TRUE;

    if (YY_START==Comment)
    {
      warn(yyFileName,yyLineNr,"File ended in the middle of a comment block! Perhaps a missing \\endcode?");
    }

    //forceEndGroup();
    groupLeaveFile(yyFileName,yyLineNr);

    //if (depthIf>0)
    //{
    //  warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
    //}

    rt->program.resize(0);
    if (rt->children()->contains(current)==0) 
      // it could be that current is already added as a child to rt, so we
      // only delete it if this is not the case. See bug 635317.
    {
      delete current; current=0;
    }

    parseCompounds(rt);

    inputFile.close();

    anonNSCount++;
  }
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  bool orgInputFromFile;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(scanYY_create_buffer(scanYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;
  orgInputFromFile = g_inputFromFile;

  // set new string
  inputString = text;
  inputPosition = 0;
  g_inputFromFile = FALSE;
  scanYYrestart( scanYYin );
  BEGIN(Prototype);
  scanYYlex();
  g_lexInit=TRUE;

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state
  YY_BUFFER_STATE tmpState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(orgState);
  scanYY_delete_buffer(tmpState);
  inputString = orgInputString; 
  inputPosition = orgInputPosition;
  g_inputFromFile = orgInputFromFile;

  //printf("**** parsePrototype end\n");
}

void scanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION)
  if (g_lexInit)
  {
    scanYYlex_destroy();
  }
#endif
}

//static void handleGroupStartCommand(const char *header)
//{
//  memberGroupHeader=header;
//  startGroupInDoc();
//}
//
//static void handleGroupEndCommand()
//{
//  endGroup();
//  previous=0;
//}

//----------------------------------------------------------------------------

void CLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);
}

void CLanguageScanner::parseCode(CodeOutputInterface & codeOutIntf,
                   const char * scopeName,
                   const QCString & input,
                   bool isExampleBlock,
                   const char * exampleName,
                   FileDef * fileDef,
                   int startLine,
                   int endLine,
                   bool inlineFragment,
		   MemberDef *memberDef,
		   bool showLineNumbers
                  )
{
  ::parseCCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
               fileDef,startLine,endLine,inlineFragment,memberDef,
	       showLineNumbers);
}

bool CLanguageScanner::needsPreprocessing(const QCString &extension)
{
  QCString fe=extension.lower();
  return 
   !( fe==".java" || fe==".as"  || fe==".d"    || fe==".php" || 
      fe==".php4" || fe==".inc" || fe==".phtml" 
    );
}

void CLanguageScanner::resetCodeParserState()
{
  ::resetCCodeParserState();
}

void CLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void scannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


